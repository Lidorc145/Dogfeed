{"version":3,"names":["GestureHandlerWrapper","GestureHandlerRootView","View","isArrayEqual","a","b","length","every","it","index","StackView","React","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","state","filter","r","key","includes","findIndex","descriptor","props","render","navigation","some","routeNames","name","navigate","setState","dispatch","StackActions","pop","source","target","closing","emit","type","data","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","options","animationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","_","rest","styles","container","insets","isParentModal","isParentHeaderShown","getPreviousRoute","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","handleGestureStart","handleGestureEnd","handleGestureCancel","StyleSheet","create","flex"],"sources":["StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"}