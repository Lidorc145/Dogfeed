{"mappings":"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","sources":["packages/@react-stately/slider/src/index.ts","packages/@react-stately/slider/src/useSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useSliderState} from './useSliderState';\n\nexport type {SliderStateOptions} from './useSliderState';\nexport type {SliderState} from './useSliderState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {Orientation} from '@react-types/shared';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * Increments the value of the thumb by the step or page amount.\n   */\n  incrementThumb(index: number, stepSize?: number): void,\n  /**\n   * Decrements the value of the thumb by the step or page amount.\n   */\n  decrementThumb(index: number, stepSize?: number): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number,\n\n  /**\n   * The page size for the slider, used to do a bigger step.\n   */\n  readonly pageSize: number,\n\n  /** The orientation of the slider. */\n  readonly orientation: Orientation,\n\n  /** Whether the slider is disabled. */\n  readonly isDisabled: boolean\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\nexport interface SliderStateOptions<T> extends SliderProps<T> {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState<T extends number | number[]>(props: SliderStateOptions<T>): SliderState {\n  const {\n    isDisabled = false,\n    minValue = DEFAULT_MIN_VALUE,\n    maxValue = DEFAULT_MAX_VALUE,\n    numberFormatter: formatter,\n    step = DEFAULT_STEP_VALUE,\n    orientation = 'horizontal'\n  } = props;\n\n  // Page step should be at least equal to step and always a multiple of the step.\n  let pageSize = useMemo(() => {\n    let calcPageSize = (maxValue - minValue) / 10;\n    calcPageSize = snapValueToStep(calcPageSize, 0, calcPageSize + step, step);\n    return Math.max(calcPageSize, step);\n  }, [step, maxValue, minValue]);\n\n  let value = useMemo(() => convertValue(props.value), [props.value]);\n  let defaultValue = useMemo(() => convertValue(props.defaultValue) ?? [minValue], [props.defaultValue, minValue]);\n  let onChange = createOnChange(props.value, props.defaultValue, props.onChange);\n  let onChangeEnd = createOnChange(props.value, props.defaultValue, props.onChangeEnd);\n\n  const [values, setValues] = useControlledState<number[]>(\n    value,\n    defaultValue,\n    onChange\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  function incrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] + s, minValue, maxValue, step));\n  }\n\n  function decrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] - s, minValue, maxValue, step));\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    incrementThumb,\n    decrementThumb,\n    step,\n    pageSize,\n    orientation,\n    isDisabled\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n\nfunction convertValue(value: number | number[]) {\n  if (value == null) {\n    return undefined;\n  }\n\n  return Array.isArray(value) ? value : [value];\n}\n\nfunction createOnChange(value, defaultValue, onChange) {\n  return (newValue: number[]) => {\n    if (typeof value === 'number' || typeof defaultValue === 'number') {\n      onChange?.(newValue[0]);\n    } else {\n      onChange?.(newValue);\n    }\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}