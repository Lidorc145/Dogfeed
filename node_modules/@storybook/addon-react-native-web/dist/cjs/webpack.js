"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBabelPlugins = void 0;

var _webpack = _interopRequireDefault(require("webpack"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getBabelPlugins = function getBabelPlugins(options) {
  var reactNativeWeb = 'react-native-web';

  if (options.babelPlugins && Array.isArray(options.babelPlugins)) {
    return [reactNativeWeb].concat(_toConsumableArray(options.babelPlugins));
  }

  return [reactNativeWeb];
};

exports.getBabelPlugins = getBabelPlugins;

var getModule = function getModule(name) {
  return _path["default"].join('node_modules', name);
}; // copied from https://github.com/expo/expo-cli/blob/master/packages/webpack-config/src/loaders/createBabelLoader.ts


var DEFAULT_INCLUDES = [getModule('react-native'), getModule('react-navigation'), getModule('expo'), getModule('unimodules'), getModule('@react'), getModule('@expo'), getModule('@use-expo'), getModule('@unimodules'), getModule('native-base'), getModule('styled-components')];
var DEFAULT_EXCLUDES = ['/node_modules', '/bower_components', '/.expo/', // Prevent transpiling webpack generated files.
'(webpack)'];

var webpackFinal = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config, options) {
    var _options$projectRoot, _options$modulesToTra, _options$modulesToTra2, _options$modulesToAli;

    var babelPlugins, root, userModules, modules, userAliases;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // Add __DEV__ global variable which is relied on by many libraries
            config.plugins.push(new _webpack["default"].DefinePlugin({
              'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development'),
              __DEV__: process.env.NODE_ENV !== 'production' || true
            })); // plugin suggested in reanimated docs https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/web-support/

            config.plugins.push(new _webpack["default"].DefinePlugin({
              process: {
                env: {}
              }
            }));
            babelPlugins = getBabelPlugins(options);
            root = (_options$projectRoot = options.projectRoot) !== null && _options$projectRoot !== void 0 ? _options$projectRoot : process.cwd();
            userModules = (_options$modulesToTra = (_options$modulesToTra2 = options.modulesToTranspile) === null || _options$modulesToTra2 === void 0 ? void 0 : _options$modulesToTra2.map(getModule)) !== null && _options$modulesToTra !== void 0 ? _options$modulesToTra : [];
            modules = [].concat(DEFAULT_INCLUDES, _toConsumableArray(userModules));
            userAliases = (_options$modulesToAli = options.modulesToAlias) !== null && _options$modulesToAli !== void 0 ? _options$modulesToAli : {}; // fix for uncompiled react-native dependencies

            config.module.rules.push({
              test: /\.(js|jsx|ts|tsx)$/,
              loader: 'babel-loader',
              // include logic copied from https://github.com/expo/expo-cli/blob/master/packages/webpack-config/src/loaders/createBabelLoader.ts
              include: function include(filename) {
                if (!filename) {
                  return false;
                }

                var _iterator = _createForOfIteratorHelper(modules),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var possibleModule = _step.value;

                    if (filename.includes(_path["default"].normalize(possibleModule))) {
                      return true;
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                if (filename.includes(root)) {
                  var _iterator2 = _createForOfIteratorHelper(DEFAULT_EXCLUDES),
                      _step2;

                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      var excluded = _step2.value;

                      if (filename.includes(_path["default"].normalize(excluded))) {
                        return false;
                      }
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }

                  return true;
                }

                return false;
              },
              options: {
                root: root,
                presets: [['module:metro-react-native-babel-preset', {
                  useTransformReactJSXExperimental: true
                }], ['@babel/preset-react', {
                  runtime: 'automatic'
                }]],
                plugins: [].concat(_toConsumableArray(babelPlugins), ['@babel/plugin-proposal-class-properties'])
              }
            });
            config.resolve.extensions = ['.web.js', '.web.jsx', '.web.ts', '.web.tsx'].concat(_toConsumableArray(config.resolve.extensions));
            config.resolve.alias = _objectSpread(_objectSpread({
              'react-native$': 'react-native-web'
            }, config.resolve.alias), userAliases);
            return _context.abrupt("return", config);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function webpackFinal(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = webpackFinal;