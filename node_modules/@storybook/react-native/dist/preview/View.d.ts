/// <reference types="react" />
import { StoryIndex, SelectionSpecifier } from '@storybook/store';
import { StoryContext } from '@storybook/csf';
import { theme } from './components/Shared/theme';
import type { ReactNativeFramework } from '../types/types-6.0';
import { PreviewWeb } from '@storybook/preview-web';
declare type StoryKind = string;
declare type StoryName = string;
declare type InitialSelection = `${StoryKind}--${StoryName}` | {
    /**
     * Kind is the default export name or the storiesOf("name") name
     */
    kind: StoryKind;
    /**
     * Name is the named export or the .add("name") name
     */
    name: StoryName;
};
export declare type Params = {
    onDeviceUI?: boolean;
    enableWebsockets?: boolean;
    query?: string;
    host?: string;
    port?: number;
    secured?: boolean;
    initialSelection?: InitialSelection;
    shouldPersistSelection?: boolean;
    tabOpen?: number;
    isUIHidden?: boolean;
    shouldDisableKeyboardAvoidingView?: boolean;
    keyboardAvoidingViewVerticalOffset?: number;
} & {
    theme?: typeof theme;
};
export declare class View {
    _storyIndex: StoryIndex;
    _setStory: (story: StoryContext<ReactNativeFramework>) => void;
    _forceRerender: () => void;
    _ready: boolean;
    _preview: PreviewWeb<ReactNativeFramework>;
    _asyncStorageStoryId: string;
    _webUrl: string;
    constructor(preview: PreviewWeb<ReactNativeFramework>);
    _getInitialStory: ({ initialSelection, shouldPersistSelection, }?: Partial<Params>) => Promise<SelectionSpecifier>;
    _getServerChannel: (params?: Partial<Params>) => import("@storybook/channels").Channel;
    getStorybookUI: (params?: Partial<Params>) => () => JSX.Element;
}
export {};
