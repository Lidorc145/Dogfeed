import styled from '@emotion/native';
import { addons } from '@storybook/addons';
import Events from '@storybook/core-events';
import React, { useMemo, useState } from 'react';
import { SectionList, StyleSheet, View } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { GridIcon, StoryIcon } from '../Shared/icons';
import { Header, Name } from '../Shared/text';
const SearchBar = styled.TextInput({
    borderRadius: 16,
    borderWidth: 2,
    fontSize: 16,
    marginVertical: 4,
    marginHorizontal: 8,
    paddingVertical: 8,
    paddingHorizontal: 15,
}, ({ theme }) => ({
    borderColor: theme.borderColor,
    color: theme.buttonActiveTextColor,
}));
const HeaderContainer = styled.View({
    paddingVertical: 5,
    paddingHorizontal: 5,
    flexDirection: 'row',
    alignItems: 'center',
});
const StoryListContainer = styled.View(({ theme }) => (Object.assign(Object.assign({ top: 0 }, StyleSheet.absoluteFillObject), { 
    // for this to work I need to get the top margin from safeareview context
    // shadowColor: '#000',
    // shadowOffset: {
    //   width: 0,
    //   height: 1,
    // },
    // shadowOpacity: 0.2,
    // shadowRadius: 1.41,
    // elevation: 2,
    borderRightWidth: StyleSheet.hairlineWidth, borderRightColor: theme.borderColor, backgroundColor: theme.storyListBackgroundColor })));
const SectionHeader = React.memo(({ title, selected }) => (React.createElement(HeaderContainer, { key: title },
    React.createElement(GridIcon, null),
    React.createElement(Header, { selected: selected }, title))));
const ItemTouchable = styled.TouchableOpacity({
    padding: 5,
    paddingLeft: 40,
    flexDirection: 'row',
    alignItems: 'center',
}, ({ selected, theme }) => { var _a; return (selected ? { backgroundColor: (_a = theme === null || theme === void 0 ? void 0 : theme.listItemActiveColor) !== null && _a !== void 0 ? _a : '#1ea7fd' } : {}); });
const ListItem = React.memo(({ kind, title, selected, onPress }) => (React.createElement(ItemTouchable, { key: title, onPress: onPress, activeOpacity: 0.8, testID: `Storybook.ListItem.${kind}.${title}`, accessibilityLabel: `Storybook.ListItem.${title}`, selected: selected },
    React.createElement(StoryIcon, { selected: selected }),
    React.createElement(Name, { selected: selected }, title))), (prevProps, nextProps) => prevProps.selected === nextProps.selected);
const getStories = (storyIndex) => {
    if (!storyIndex) {
        return [];
    }
    const groupedStories = Object.values(storyIndex.stories).reduce((acc, story) => {
        var _a, _b;
        acc[story.title] = {
            title: story.title,
            data: ((_b = (_a = acc[story.title]) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : []).concat(story),
        };
        return acc;
    }, {});
    return Object.values(groupedStories);
};
const styles = StyleSheet.create({
    sectionList: { flex: 1 },
});
const tabBarHeight = 40;
const StoryListView = ({ selectedStoryContext, storyIndex }) => {
    const insets = useSafeAreaInsets();
    const originalData = useMemo(() => getStories(storyIndex), [storyIndex]);
    const [data, setData] = useState(originalData);
    const handleChangeSearchText = (text) => {
        const query = text.trim();
        if (!query) {
            setData(originalData);
            return;
        }
        const checkValue = (value) => value.toLowerCase().includes(query.toLowerCase());
        const filteredData = originalData.reduce((acc, story) => {
            const hasTitle = checkValue(story.title);
            const hasKind = story.data.some((ref) => checkValue(ref.name));
            if (hasTitle || hasKind) {
                acc.push(Object.assign(Object.assign({}, story), { 
                    // in case the query matches component's title, all of its stories will be shown
                    data: !hasTitle ? story.data.filter((ref) => checkValue(ref.name)) : story.data }));
            }
            return acc;
        }, []);
        setData(filteredData);
    };
    const changeStory = (storyId) => {
        const channel = addons.getChannel();
        channel.emit(Events.SET_CURRENT_STORY, { storyId });
    };
    const safeStyle = { flex: 1, marginTop: insets.top, paddingBottom: insets.bottom + tabBarHeight };
    return (React.createElement(StoryListContainer, null,
        React.createElement(View, { style: safeStyle },
            React.createElement(SearchBar, { testID: "Storybook.ListView.SearchBar", clearButtonMode: "while-editing", disableFullscreenUI: true, onChangeText: handleChangeSearchText, placeholder: "Filter", returnKeyType: "search" }),
            React.createElement(SectionList
            // contentInset={{ bottom: insets.bottom, top: 0 }}
            , { 
                // contentInset={{ bottom: insets.bottom, top: 0 }}
                style: styles.sectionList, testID: "Storybook.ListView", renderItem: ({ item }) => (React.createElement(ListItem, { title: item.name, kind: item.title, selected: selectedStoryContext && item.id === selectedStoryContext.id, onPress: () => changeStory(item.id) })), renderSectionHeader: ({ section: { title } }) => (React.createElement(SectionHeader, { title: title, selected: selectedStoryContext && title === selectedStoryContext.title })), keyExtractor: (item, index) => item.id + index, sections: data, stickySectionHeadersEnabled: false }))));
};
export default StoryListView;
