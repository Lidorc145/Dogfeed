import styled from '@emotion/native';
import React, { useState, useRef } from 'react';
import { Animated, Dimensions, Keyboard, KeyboardAvoidingView, Platform, SafeAreaView, TouchableOpacity, StatusBar, StyleSheet, View, } from 'react-native';
import StoryListView from '../StoryListView';
import StoryView from '../StoryView';
import AbsolutePositionedKeyboardAwareView from './absolute-positioned-keyboard-aware-view';
import Addons from './addons/Addons';
import { getAddonPanelPosition, getNavigatorPanelPosition, getPreviewPosition, getPreviewScale, } from './animation';
import Navigation from './navigation';
import { PREVIEW, ADDONS } from './navigation/constants';
import Panel from './Panel';
import { useWindowDimensions } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
const ANIMATION_DURATION = 300;
const IS_IOS = Platform.OS === 'ios';
// @ts-ignore: Property 'Expo' does not exist on type 'Global'
const getExpoRoot = () => global.Expo || global.__expo || global.__exponent;
export const IS_EXPO = getExpoRoot() !== undefined;
const IS_ANDROID = Platform.OS === 'android';
const BREAKPOINT = 1024;
const flex = { flex: 1 };
const Preview = styled.View(flex, ({ disabled, theme }) => ({
    borderLeftWidth: disabled ? 0 : 1,
    borderTopWidth: disabled ? 0 : 1,
    borderRightWidth: disabled ? 0 : 1,
    borderBottomWidth: disabled ? 0 : 1,
    borderColor: disabled ? 'transparent' : theme.previewBorderColor,
}));
const absolutePosition = {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
};
const styles = StyleSheet.create({
    expoAndroidContainer: { paddingTop: StatusBar.currentHeight },
});
const OnDeviceUI = ({ context, storyIndex, isUIHidden, shouldDisableKeyboardAvoidingView, keyboardAvoidingViewVerticalOffset, tabOpen: initialTabOpen, }) => {
    var _a, _b;
    const [tabOpen, setTabOpen] = useState(initialTabOpen || PREVIEW);
    const [slideBetweenAnimation, setSlideBetweenAnimation] = useState(false);
    const [previewDimensions, setPreviewDimensions] = useState({
        width: Dimensions.get('window').width,
        height: Dimensions.get('window').height,
    });
    const animatedValue = useRef(new Animated.Value(tabOpen));
    const wide = useWindowDimensions().width >= BREAKPOINT;
    const insets = useSafeAreaInsets();
    const [isUIVisible, setIsUIVisible] = useState(isUIHidden !== undefined ? !isUIHidden : true);
    const handleToggleTab = (newTabOpen) => {
        if (newTabOpen === tabOpen) {
            return;
        }
        Animated.timing(animatedValue.current, {
            toValue: newTabOpen,
            duration: ANIMATION_DURATION,
            useNativeDriver: true,
        }).start();
        setTabOpen(newTabOpen);
        const isSwipingBetweenNavigatorAndAddons = tabOpen + newTabOpen === PREVIEW;
        setSlideBetweenAnimation(isSwipingBetweenNavigatorAndAddons);
        // close the keyboard opened from a TextInput from story list or knobs
        if (newTabOpen === PREVIEW) {
            Keyboard.dismiss();
        }
    };
    const noSafeArea = (_b = (_a = context === null || context === void 0 ? void 0 : context.parameters) === null || _a === void 0 ? void 0 : _a.noSafeArea) !== null && _b !== void 0 ? _b : false;
    const previewWrapperStyles = [
        flex,
        getPreviewPosition({
            animatedValue: animatedValue.current,
            previewDimensions,
            slideBetweenAnimation,
            wide,
            noSafeArea,
            insets,
        }),
    ];
    const previewStyles = [flex, getPreviewScale(animatedValue.current, slideBetweenAnimation, wide)];
    const WrapperView = noSafeArea ? View : SafeAreaView;
    const wrapperMargin = { marginBottom: isUIVisible ? insets.bottom + 40 : 0 };
    return (React.createElement(React.Fragment, null,
        React.createElement(View, { style: [flex, IS_ANDROID && IS_EXPO && styles.expoAndroidContainer] },
            React.createElement(KeyboardAvoidingView, { enabled: !shouldDisableKeyboardAvoidingView || tabOpen !== PREVIEW, behavior: IS_IOS ? 'padding' : null, keyboardVerticalOffset: keyboardAvoidingViewVerticalOffset, style: flex },
                React.createElement(AbsolutePositionedKeyboardAwareView, { onLayout: setPreviewDimensions, previewDimensions: previewDimensions },
                    React.createElement(Animated.View, { style: previewWrapperStyles },
                        React.createElement(Animated.View, { style: previewStyles },
                            React.createElement(Preview, { disabled: tabOpen === PREVIEW },
                                React.createElement(WrapperView, { style: [flex, wrapperMargin] },
                                    React.createElement(StoryView, { context: context }))),
                            tabOpen !== PREVIEW ? (React.createElement(TouchableOpacity, { style: absolutePosition, onPress: () => handleToggleTab(PREVIEW) })) : null)),
                    React.createElement(Panel, { style: getNavigatorPanelPosition(animatedValue.current, previewDimensions.width, wide) },
                        React.createElement(StoryListView, { storyIndex: storyIndex, selectedStoryContext: context })),
                    React.createElement(Panel, { style: [
                            getAddonPanelPosition(animatedValue.current, previewDimensions.width, wide),
                            wrapperMargin,
                        ] },
                        React.createElement(Addons, { active: tabOpen === ADDONS })))),
            React.createElement(Navigation, { tabOpen: tabOpen, onChangeTab: handleToggleTab, isUIVisible: isUIVisible, setIsUIVisible: setIsUIVisible }))));
};
export default React.memo(OnDeviceUI);
