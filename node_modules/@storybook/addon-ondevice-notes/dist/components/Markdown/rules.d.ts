/// <reference types="react" />
import { Image, Text, View, TextStyle, ViewStyle, ImageStyle, StyleProp } from 'react-native';
import SimpleMarkdown, { Output, ReactElements, State, SingleASTNode } from 'simple-markdown';
interface Styles {
    [key: string]: StyleProp<ViewStyle | TextStyle | ImageStyle>;
}
declare const _default: (styles: Styles) => {
    autolink: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    blockQuote: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").ViewProps, View>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    br: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    codeBlock: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    del: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    em: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    heading: {
        react: (node: SingleASTNode, output: Output<ReactElements>, parentState: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    hr: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").ViewProps, View>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    image: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").ImageProps, Image>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    inlineCode: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    link: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    list: {
        react: (node: {
            items: Array<SingleASTNode>;
            ordered: boolean;
        }, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").ViewProps, View>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    newline: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    paragraph: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").ViewProps, View>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    strong: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    table: {
        react: (node: {
            header: Array<SingleASTNode>;
            cells: Array<Array<SingleASTNode>>;
        }, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").ViewProps, View>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    text: {
        react: (node: SingleASTNode, output: Output<ReactElements>, parentState: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    u: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    url: {
        react: (node: SingleASTNode, output: Output<ReactElements>, state: State) => import("react").CElement<import("react-native").TextProps, Text>;
        order: number;
        match: SimpleMarkdown.MatchFunction;
        quality?: (capture: SimpleMarkdown.Capture, state: SimpleMarkdown.State, prevCapture: string) => number;
        parse: SimpleMarkdown.SingleNodeParseFunction;
        html: SimpleMarkdown.HtmlNodeOutput;
    };
    Array: SimpleMarkdown.DefaultArrayRule;
    nptable: SimpleMarkdown.DefaultInRule;
    lheading: SimpleMarkdown.DefaultInRule;
    fence: SimpleMarkdown.DefaultInRule;
    def: SimpleMarkdown.LenientInOutRule;
    tableSeparator: SimpleMarkdown.DefaultInRule;
    escape: SimpleMarkdown.DefaultInRule;
    mailto: SimpleMarkdown.DefaultInRule;
    reflink: SimpleMarkdown.DefaultInRule;
    refimage: SimpleMarkdown.DefaultInRule;
};
export default _default;
