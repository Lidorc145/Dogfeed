/**
 * mostly based on code from https://github.com/CharlesMangwa/react-native-simple-markdown
 */
import { createElement } from 'react';
import { Image, Text, View, Linking, } from 'react-native';
import SimpleMarkdown from 'simple-markdown';
export default (styles) => (Object.assign(Object.assign({}, SimpleMarkdown.defaultRules), { autolink: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.autolink), { react: (node, output, state) => {
            state.withinText = true;
            return createElement(Text, {
                key: state.key,
                style: styles.link,
                onPress: () => null,
            }, output(node.content, state));
        } }), blockQuote: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.blockQuote), { react: (node, output, state) => {
            state.withinText = true;
            const blockBar = createElement(View, {
                key: state.key,
                style: [styles.blockQuoteSectionBar, styles.blockQuoteBar],
            });
            const blockText = createElement(Text, {
                key: state.key,
                style: styles.blockQuoteText,
            }, output(node.content, state));
            return createElement(View, {
                key: state.key,
                style: [styles.blockQuoteSection, styles.blockQuote],
            }, [blockBar, blockText]);
        } }), br: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.br), { react: (node, output, state) => {
            return createElement(Text, {
                key: state.key,
                style: styles.br,
            }, '\n\n');
        } }), codeBlock: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.codeBlock), { react: (node, output, state) => {
            state.withinText = true;
            return createElement(Text, {
                key: state.key,
                style: styles.codeBlock,
            }, null);
        } }), del: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.del), { react: (node, output, state) => {
            state.withinText = true;
            return createElement(Text, {
                key: state.key,
                style: styles.del,
            }, output(node.content, state));
        } }), em: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.em), { react: (node, output, state) => {
            state.withinText = true;
            return createElement(Text, {
                key: state.key,
                style: styles.em,
            }, output(node.content, state));
        } }), heading: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.heading), { react: (node, output, parentState) => {
            const state = Object.assign({}, parentState);
            state.withinText = true;
            const stylesToApply = [styles.heading, styles[`heading${node.level}`]];
            state.stylesToApply = stylesToApply;
            return createElement(Text, {
                key: state.key,
                style: stylesToApply,
            }, output(node.content, state));
        } }), hr: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.hr), { react: (node, output, state) => createElement(View, { key: state.key, style: styles.hr }) }), image: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.image), { react: (node, output, state) => createElement(Image, {
            key: state.key,
            resizeMode: 'contain',
            source: { uri: node.target },
            style: (node.target.match(/youtu|vimeo/) ? styles.video : styles.image),
            //styles.resizeMode ? styles.resizeMode :
        }) }), inlineCode: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.inlineCode), { react: (node, output, state) => {
            state.withinText = true;
            return createElement(Text, {
                key: state.key,
                style: styles.inlineCode,
            }, node.content);
        } }), link: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.link), { react: (node, output, state) => {
            state.withinText = true;
            const openUrl = (url) => {
                Linking.openURL(url).catch((error) => console.warn('An error occurred: ', error));
            };
            return createElement(Text, {
                style: node.target.match(/@/) ? styles.mailTo : styles.link,
                key: state.key,
                onPress: () => openUrl(node.target),
            }, output(node.content, state));
        } }), list: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.list), { react: (node, output, state) => {
            const items = node.items.map((item, i) => {
                let bullet;
                if (node.ordered) {
                    bullet = createElement(Text, { key: state.key, style: styles.listItemNumber }, `${i + 1} . `);
                }
                else {
                    bullet = createElement(Text, { key: state.key, style: styles.listItemBullet }, '\u2022 ');
                }
                const listItemText = createElement(Text, { key: state.key + 1, style: styles.listItemText }, output(item, state));
                return createElement(View, {
                    key: i,
                    style: styles.listItem,
                }, [bullet, listItemText]);
            });
            return createElement(View, { key: state.key, style: styles.list }, items);
        } }), newline: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.newline), { react: (node, output, state) => createElement(Text, {
            key: state.key,
            style: styles.newline,
        }, '\n') }), paragraph: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.paragraph), { react: (node, output, state) => createElement(View, {
            key: state.key,
            style: styles.paragraph,
        }, output(node.content, state)) }), strong: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.strong), { react: (node, output, state) => {
            state.withinText = true;
            return createElement(Text, {
                key: state.key,
                style: styles.strong,
            }, output(node.content, state));
        } }), table: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.table), { react: (node, output, state) => {
            const headers = node.header.map((content, i) => createElement(Text, {
                style: styles.tableHeaderCell,
                key: i,
            }, output(content, state)));
            const header = createElement(View, { style: styles.tableHeader }, headers);
            const rows = node.cells.map((row, r) => {
                const cells = row.map((content, c) => createElement(View, {
                    key: c,
                    style: styles.tableRowCell,
                }, output(content, state)));
                const rowStyles = [styles.tableRow];
                node.cells.length - 1 === r ? rowStyles.push(styles.tableRowLast) : null;
                return createElement(View, { key: r, style: rowStyles }, cells);
            });
            return createElement(View, { key: state.key, style: styles.table }, [header, rows]);
        } }), text: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.text), { react: (node, output, parentState) => {
            const state = Object.assign({}, parentState);
            // Breaking words up in order to allow for text reflowing in flexbox
            // let words = node.content.split(' ');
            // words = words.map((word: string, i: number) => {
            //   i !== words.length - 1 ? (word = `${word} `) : null;
            const textStyles = [styles.text];
            //   !state.withinText ? textStyles.push(styles.plainText) : null;
            //   state.stylesToApply ? textStyles.push(state.stylesToApply) : null;
            return createElement(Text, {
                key: state.key,
                style: textStyles,
            }, node.content);
        } }), u: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.u), { react: (node, output, state) => {
            state.withinText = true;
            return createElement(Text, {
                key: state.key,
                style: styles.u,
            }, output(node.content, state));
        } }), url: Object.assign(Object.assign({}, SimpleMarkdown.defaultRules.url), { react: (node, output, state) => {
            state.withinText = true;
            const openURL = (url) => {
                Linking.openURL(url).catch((error) => console.warn('An error occurred: ', error));
            };
            return createElement(Text, {
                key: state.key,
                style: styles.url,
                onPress: () => openURL(node.target),
            }, output(node.content, state));
        } }) }));
