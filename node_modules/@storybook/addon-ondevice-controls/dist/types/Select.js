import { Platform, View } from 'react-native';
import React from 'react';
import ModalPicker from 'react-native-modal-selector';
import styled from '@emotion/native';
const Input = styled.TextInput(({ theme }) => ({
    borderWidth: 1,
    borderRadius: 2,
    padding: 5,
    margin: 10,
    borderColor: theme.borderColor || '#e6e6e6',
    color: theme.labelColor || 'black',
}));
const Select = (args) => React.createElement("select", Object.assign({}, args));
const Container = styled.View(({ theme }) => ({
    borderWidth: 1,
    borderRadius: 2,
    padding: 5,
    margin: 10,
    borderColor: theme.borderColor || '#e6e6e6',
}));
// @ts-ignore styled is being weird ;(
const WebSelect = styled(Select)(({ theme }) => ({
    border: 'none',
    color: theme.labelColor || 'black',
}));
const getOptions = ({ options, control: { labels } }) => {
    if (Array.isArray(options)) {
        if (labels) {
            return options.map((val) => ({ key: val, label: labels[val] || val }));
        }
        return options.map((val) => ({ key: val, label: val }));
    }
    return Object.keys(options).map((key) => ({
        label: key,
        key: options[key],
    }));
};
const SelectType = ({ arg, onChange }) => {
    const { value } = arg;
    const options = getOptions(arg);
    const active = options.find(({ key }) => value === key);
    const selected = active && active.label;
    if (Platform.OS === 'web') {
        const handleChange = (event) => {
            onChange(event.target.value);
        };
        return (React.createElement(Container, null,
            React.createElement(WebSelect, { value: value, onChange: handleChange }, options.map(({ label, key }) => (React.createElement("option", { key: `${label}-${key}`, value: key }, label))))));
    }
    return (React.createElement(View, null,
        React.createElement(ModalPicker, { data: options, initValue: value, onChange: (option) => onChange(option.key), animationType: "none", keyExtractor: ({ key, label }) => `${label}-${key}` },
            React.createElement(Input, { editable: false, value: selected, autoCapitalize: "none", underlineColorAndroid: "transparent" }))));
};
SelectType.serialize = (value) => value;
SelectType.deserialize = (value) => value;
export default SelectType;
