import React, { useState } from 'react';
import { Text, Modal, View, TouchableOpacity, TouchableWithoutFeedback, StyleSheet, Platform, } from 'react-native';
import styled from '@emotion/native';
import { ColorPicker, fromHsv } from '../components/color-picker';
const Touchable = styled.TouchableOpacity(({ theme, color }) => ({
    borderColor: theme.borderColor || '#e6e6e6',
    width: 30,
    height: 20,
    borderRadius: 2,
    borderWidth: 1,
    margin: 10,
    backgroundColor: color,
}));
const webInputStyles = { margin: 10 };
const ColorType = ({ arg, onChange = (value) => value }) => {
    const [displayColorPicker, setDisplayColorPicker] = useState(false);
    const [currentColor, setCurrentColor] = useState(null);
    const openColorPicker = () => {
        setDisplayColorPicker(true);
    };
    const closeColorPicker = () => {
        setDisplayColorPicker(false);
    };
    const onChangeColor = (color) => {
        onChange(fromHsv(color));
    };
    if (Platform.OS === 'web') {
        return (React.createElement("input", { type: "color", style: webInputStyles, value: arg.value, onChange: (event) => onChange(event.target.value) }));
    }
    return (React.createElement(View, null,
        React.createElement(Touchable, { color: arg.value, onPress: openColorPicker }),
        React.createElement(Modal, { supportedOrientations: ['portrait', 'landscape'], transparent: true, visible: displayColorPicker, onRequestClose: closeColorPicker },
            React.createElement(TouchableWithoutFeedback, { onPress: closeColorPicker },
                React.createElement(View, { style: styles.containerCenter },
                    React.createElement(View, { style: styles.innerContainer },
                        React.createElement(ColorPicker, { onColorSelected: onChangeColor, onColorChange: (color) => setCurrentColor(color), defaultColor: arg.value, style: styles.picker }),
                        React.createElement(View, { style: styles.actionContainer },
                            React.createElement(TouchableOpacity, { style: styles.actionButton, onPress: closeColorPicker },
                                React.createElement(Text, { style: styles.actionText }, "CANCEL")),
                            React.createElement(TouchableOpacity, { style: styles.actionButton, onPress: () => {
                                    onChangeColor(currentColor);
                                    closeColorPicker();
                                } },
                                React.createElement(Text, { style: styles.actionText }, "DONE")))))))));
};
const styles = StyleSheet.create({
    actionText: { color: '#1EA7FD', fontSize: 16 },
    actionButton: { paddingVertical: 8, paddingHorizontal: 8, marginTop: 16 },
    actionContainer: {
        alignItems: 'flex-end',
        flexDirection: 'row',
        justifyContent: 'flex-end',
        width: '100%',
    },
    picker: { flex: 1, marginTop: 16 },
    close: { fontSize: 18, fontWeight: 'bold' },
    end: { alignSelf: 'flex-end', padding: 5 },
    innerContainer: {
        backgroundColor: 'white',
        borderWidth: 1,
        borderColor: 'rgb(247, 244, 244)',
        width: 350,
        height: 350,
        padding: 8,
        borderRadius: 4,
    },
    containerCenter: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(0,0,0,0.3)',
    },
});
ColorType.serialize = (value) => value;
ColorType.deserialize = (value) => value;
export default ColorType;
