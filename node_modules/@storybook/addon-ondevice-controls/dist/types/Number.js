import styled from '@emotion/native';
import Slider from '@react-native-community/slider';
import React, { useCallback, useState } from 'react';
import { Platform, StyleSheet, View } from 'react-native';
import { useResyncValue } from './useResyncValue';
const Input = styled.TextInput(({ theme }) => ({
    borderWidth: 1,
    borderColor: theme.borderColor || '#e6e6e6',
    borderRadius: 2,
    fontSize: 14,
    paddingVertical: 4,
    paddingHorizontal: 8,
    color: theme.labelColor || 'black',
}));
const SliderText = styled.Text(({ theme }) => ({
    color: theme.labelColor || 'black',
    fontSize: 14,
}));
const ValueLabelText = styled.Text(({ theme }) => ({
    color: theme.secondaryLabelColor || '#999999',
    fontSize: 14,
    marginRight: 8,
}));
const ValueContainer = styled.View({ flexDirection: 'row' });
// @ts-ignore styled is being weird ;(
const NumberSlider = styled(Slider)(() => ({
    marginTop: Platform.OS === 'android' ? 8 : 4,
    marginLeft: Platform.OS === 'android' ? -10 : 0,
}));
const NumberType = ({ arg, isPristine, onChange = (value) => value }) => {
    const showError = Number.isNaN(arg.value);
    const [numStr, setNumStr] = useState(arg.value.toString());
    const updateNumstr = useCallback((value) => setNumStr(value.toString()), []);
    const { key, setCurrentValue } = useResyncValue(arg.value, isPristine, updateNumstr);
    const handleNormalChangeText = (text) => {
        const commaReplaced = text.trim().replace(/,/, '.');
        setNumStr(commaReplaced);
        if (commaReplaced === '-') {
            onChange(-1);
            setCurrentValue(-1);
        }
        else {
            onChange(Number(commaReplaced));
            setCurrentValue(Number(commaReplaced));
        }
    };
    const renderNormal = () => {
        return (React.createElement(Input, { autoCapitalize: "none", underlineColorAndroid: "transparent", value: numStr, keyboardType: "numeric", onChangeText: handleNormalChangeText, style: showError && styles.errorBorder }));
    };
    const renderRange = () => {
        return (React.createElement(View, { key: key },
            React.createElement(ValueContainer, null,
                React.createElement(ValueLabelText, null, "Value:"),
                React.createElement(SliderText, null, arg.value)),
            React.createElement(NumberSlider, { minimumValue: arg.min, maximumValue: arg.max, step: arg.step, onValueChange: (val) => {
                    onChange(val);
                    setCurrentValue(val);
                } })));
    };
    return React.createElement(View, { style: styles.spacing }, arg.range ? renderRange() : renderNormal());
};
const styles = StyleSheet.create({
    spacing: { margin: 10 },
    errorBorder: { borderColor: '#FF4400' },
});
NumberType.serialize = (value) => String(value);
NumberType.deserialize = (value) => parseFloat(value);
export default NumberType;
