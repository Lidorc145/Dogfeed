export class TriangleColorPicker extends React.PureComponent<any, any, any> {
    constructor(props: any, ctx: any);
    state: {
        color: {
            h: number;
            s: number;
            v: number;
        };
        pickerSize: any;
    };
    _layout: {
        width: number;
        height: number;
        x: number;
        y: number;
    };
    _pageX: number;
    _pageY: number;
    _onLayout(l: any): void;
    _onSValueChange(s: any): void;
    _onVValueChange(v: any): void;
    _onColorSelected(): void;
    _onOldColorSelected(): void;
    _isRTL: boolean;
    _pickerResponder: import("react-native").PanResponderInstance;
    _changingHColor: boolean;
    pickerContainer: React.RefObject<any>;
    getColor(): any;
    _handleColorChange: ({ x, y }: {
        x: any;
        y: any;
    }) => void;
    _getColor(): any;
    _onColorChange(color: any): void;
    _computeHValue(x: any, y: any): number;
    _hValueToRad(deg: any): number;
    _handleHColorChange({ x, y }: {
        x: any;
        y: any;
    }): void;
    _handleSVColorChange({ x, y }: {
        x: any;
        y: any;
    }): void;
    _normalizeTriangleTouch(s: any, v: any, sRatio: any): {
        s: any;
        v: any;
        s1?: undefined;
        v1?: undefined;
    } | {
        s1: any;
        v1: any;
        s?: undefined;
        v?: undefined;
    };
    /**
     * Computes s, v from position (x, y). If position is outside of triangle,
     * it will return invalid values (greater than 1 or lower than 0)
     */
    _computeColorFromTriangle({ x, y }: {
        x: any;
        y: any;
    }): {
        h: any;
        s: any;
        v: any;
    };
    render(): JSX.Element;
}
export namespace TriangleColorPicker {
    namespace propTypes {
        const color: PropTypes.Requireable<NonNullable<string | PropTypes.InferProps<{
            h: PropTypes.Requireable<number>;
            s: PropTypes.Requireable<number>;
            v: PropTypes.Requireable<number>;
        }>>>;
        const defaultColor: PropTypes.Requireable<string>;
        const oldColor: PropTypes.Requireable<string>;
        const onColorChange: PropTypes.Requireable<(...args: any[]) => any>;
        const onColorSelected: PropTypes.Requireable<(...args: any[]) => any>;
        const onOldColorSelected: PropTypes.Requireable<(...args: any[]) => any>;
        const rotationHackFactor: PropTypes.Requireable<number>;
        const style: {};
    }
    namespace defaultProps {
        const rotationHackFactor_1: number;
        export { rotationHackFactor_1 as rotationHackFactor };
    }
}
import React from "react";
import PropTypes from "prop-types";
