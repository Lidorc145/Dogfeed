import styled from '@emotion/native';
import React, { useState, useCallback } from 'react';
import { useArgs } from './hooks';
import NoControlsWarning from './NoControlsWarning';
import PropForm from './PropForm';
const Touchable = styled.TouchableOpacity(({ theme }) => ({
    borderRadius: 2,
    borderWidth: 1,
    borderColor: theme.borderColor || '#e6e6e6',
    padding: 4,
    margin: 10,
    justifyContent: 'center',
    alignItems: 'center',
}));
const ResetButton = styled.Text(({ theme }) => ({
    color: theme.buttonTextColor || '#999999',
}));
const ControlsPanel = ({ api }) => {
    const store = api.store();
    const storyId = store.getSelection().storyId;
    const [isPristine, setIsPristine] = useState(true);
    const [argsfromHook, updateArgs, resetArgs] = useArgs(storyId, store);
    const { argTypes, parameters } = store.fromId(storyId);
    const argsObject = Object.entries(argTypes).reduce((prev, [key, argType]) => {
        var _a;
        const isControl = Boolean(argType === null || argType === void 0 ? void 0 : argType.control);
        return isControl
            ? Object.assign(Object.assign({}, prev), { [key]: Object.assign(Object.assign({}, argType), { name: key, type: (_a = argType === null || argType === void 0 ? void 0 : argType.control) === null || _a === void 0 ? void 0 : _a.type, value: argsfromHook[key] }) }) : prev;
    }, {});
    const hasControls = Object.keys(argTypes).length > 0;
    const isArgsStory = parameters.__isArgsStory;
    const showWarning = !(hasControls && isArgsStory);
    const updateArgsOnFieldChange = useCallback((args) => {
        updateArgs(args);
        setIsPristine(false);
    }, [updateArgs]);
    const handleReset = () => {
        resetArgs();
        setIsPristine(true);
    };
    if (showWarning) {
        return React.createElement(NoControlsWarning, null);
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(PropForm, { args: argsObject, isPristine: isPristine, onFieldChange: updateArgsOnFieldChange }),
        React.createElement(Touchable, { onPress: handleReset },
            React.createElement(ResetButton, null, "RESET"))));
};
export default ControlsPanel;
