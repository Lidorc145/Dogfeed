{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport { default as Box } from \"../components/primitives/Box\";\nimport { ResponsiveQueryContext } from \"./useResponsiveQuery/ResponsiveQueryProvider\";\nfunction flattenChildren(children) {\n  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce(function (flatChildren, child, index) {\n    if (child.type === React.Fragment) {\n      return flatChildren.concat(flattenChildren(child.props.children, keys.concat(child.key || index)));\n    }\n    if (React.isValidElement(child)) {\n      flatChildren.push(React.cloneElement(child, {\n        key: keys.concat(String(child.key || index)).join('.')\n      }));\n    } else {\n      flatChildren.push(child);\n    }\n    return flatChildren;\n  }, []);\n}\nvar getSpacedChildren = function getSpacedChildren(children, space, axis, reverse, divider) {\n  var childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray = reverse === 'reverse' ? _toConsumableArray(childrenArray).reverse() : childrenArray;\n  var orientation = axis === 'X' ? 'vertical' : 'horizontal';\n  var responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  var disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n  if (divider) {\n    var spacingProp = _objectSpread({}, axis === 'X' ? {\n      mx: space\n    } : {\n      my: space\n    });\n    divider = React.cloneElement(divider, _objectSpread({\n      orientation: orientation\n    }, spacingProp));\n    childrenArray = childrenArray.map(function (child, index) {\n      var _child$key;\n      return React.createElement(React.Fragment, {\n        key: (_child$key = child.key) !== null && _child$key !== void 0 ? _child$key : \"spaced-child-\".concat(index)\n      }, child, index < childrenArray.length - 1 && divider);\n    });\n  } else {\n    var _spacingProp = _objectSpread({}, axis === 'X' ? {\n      width: space\n    } : {\n      height: space\n    });\n    childrenArray = childrenArray.map(function (child, index) {\n      var _child$key2;\n      return React.createElement(React.Fragment, {\n        key: (_child$key2 = child.key) !== null && _child$key2 !== void 0 ? _child$key2 : \"spaced-child-\".concat(index)\n      }, child, disableCSSMediaQueries ? index < childrenArray.length - 1 && React.createElement(Box, _spacingProp) : React.createElement(React.Fragment, null));\n    });\n  }\n  return childrenArray;\n};\nexport default getSpacedChildren;","map":{"version":3,"mappings":"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","names":["React","default","Box","ResponsiveQueryContext","flattenChildren","children","keys","childrenArray","Children","toArray","reduce","flatChildren","child","index","type","Fragment","concat","props","key","isValidElement","push","cloneElement","String","join","getSpacedChildren","space","axis","reverse","divider","orientation","responsiveQueryContext","useContext","disableCSSMediaQueries","spacingProp","mx","my","map","length","width","height"],"sources":["getSpacedChildren.tsx"],"sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\n// Thanks @gregberge for code and @nandorojo for suggestion.\n// Original source: https://github.com/gregberge/react-flatten-children\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\nfunction flattenChildren(\n  children: JSX.Element[] | JSX.Element,\n  keys: (string | number)[] = []\n): ReactChildArray {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce(\n    (flatChildren: ReactChildArray, child: any, index: number) => {\n      if ((child as React.ReactElement<any>).type === React.Fragment) {\n        return flatChildren.concat(\n          flattenChildren(\n            (child as React.ReactElement<any>).props.children,\n            keys.concat(child.key || index)\n          )\n        );\n      }\n      if (React.isValidElement(child)) {\n        flatChildren.push(\n          React.cloneElement(child, {\n            key: keys.concat(String(child.key || index)).join('.'),\n          })\n        );\n      } else {\n        flatChildren.push(child);\n      }\n      return flatChildren;\n    },\n    []\n  );\n}\n\nconst getSpacedChildren = (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {disableCSSMediaQueries ? (\n            index < childrenArray.length - 1 && <Box {...spacingProp} />\n          ) : (\n            <></>\n          )}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;\n"]},"metadata":{},"sourceType":"module"}