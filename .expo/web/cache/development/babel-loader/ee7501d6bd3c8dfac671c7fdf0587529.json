{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport _useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { useSubscription } from 'use-subscription';\nimport { useNativeBaseConfig } from \"../NativeBaseContext\";\nexport var useColorMode = function useColorMode() {\n  var _React$useContext = React.useContext(HybridContext),\n    colorModeContext = _React$useContext.colorMode;\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === 'dark' ? dark : light;\n}\nexport var useAppState = function useAppState() {\n  var subscription = React.useMemo(function () {\n    return {\n      getCurrentValue: function getCurrentValue() {\n        return AppState.currentState;\n      },\n      subscribe: function subscribe(callback) {\n        var subsription = AppState.addEventListener('change', callback);\n        return function () {\n          if (AppState.removeEventListener) {\n            AppState.removeEventListener('change', callback);\n          } else {\n            subsription.remove();\n          }\n        };\n      }\n    };\n  }, []);\n  var isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    return useSubscription(subscription);\n  }\n};\nexport var useColorScheme = function useColorScheme() {\n  var colorScheme = _useColorScheme();\n  var _useState = useState(colorScheme),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentScheme = _useState2[0],\n    setCurrentScheme = _useState2[1];\n  var appState = useAppState();\n  useEffect(function () {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n  return currentScheme;\n};\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = useColorScheme();\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n  var _useState3 = useState(initialColorMode),\n    _useState4 = _slicedToArray(_useState3, 2),\n    colorMode = _useState4[0],\n    setRawMode = _useState4[1];\n  var setColorMode = React.useCallback(function _callee(val) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(colorModeManager.set(val));\n          case 3:\n            setRawMode(val);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [colorModeManager]);\n  useEffect(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regeneratorRuntime.async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(colorModeManager.get(initialColorMode));\n              case 2:\n                value = _context2.sent;\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  var _React$useContext2 = React.useContext(HybridContext),\n    colorModeContext = _React$useContext2.colorMode;\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","HybridContext","useSubscription","useNativeBaseConfig","useColorMode","useContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","useAppState","subscription","useMemo","getCurrentValue","AppState","currentState","subscribe","callback","subsription","addEventListener","removeEventListener","remove","isSSR","useColorScheme","colorScheme","_useColorScheme","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","setRawMode","setColorMode","useCallback","val","set","getMode","get","value","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\nimport { useNativeBaseConfig } from '../NativeBaseContext';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        const subsription = AppState.addEventListener('change', callback);\n        return () => {\n          if (AppState.removeEventListener) {\n            // React Native < 0.65\n            AppState.removeEventListener('change', callback);\n          } else {\n            // React Native >= 0.65\n            // @ts-ignore:next-line ignoring ts error as devDependency contains \"@types/react-native\" < 0.65\n            subsription.remove();\n          }\n        };\n      },\n    }),\n    []\n  );\n\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  if (isSSR) {\n    return 'unknown';\n  } else {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSubscription(subscription);\n  }\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}