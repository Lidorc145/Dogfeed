{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signInAnonymously, signOut, fetchSignInMethodsForEmail, deleteUser, sendPasswordResetEmail, sendEmailVerification, updateEmail, updatePassword, reauthenticateWithCredential, EmailAuthProvider } from 'firebase/auth';\nimport { auth } from \"./config\";\nimport { firebaseHandler } from \"./handler\";\nexport function anonymousSignIn() {\n  return _regeneratorRuntime.async(function anonymousSignIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", firebaseHandler(signInAnonymously(auth)));\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchSignInMethods(email) {\n  return _regeneratorRuntime.async(function fetchSignInMethods$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", firebaseHandler(fetchSignInMethodsForEmail(auth, email)));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function signInWithEmail(email, password) {\n  return _regeneratorRuntime.async(function signInWithEmail$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", firebaseHandler(signInWithEmailAndPassword(auth, email, password)));\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function signUpWithEmail(email, password) {\n  return _regeneratorRuntime.async(function signUpWithEmail$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", firebaseHandler(createUserWithEmailAndPassword(auth, email, password)));\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function verifyEmail() {\n  var error;\n  return _regeneratorRuntime.async(function verifyEmail$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!auth.currentUser) {\n            _context5.next = 2;\n            break;\n          }\n          return _context5.abrupt(\"return\", firebaseHandler(sendEmailVerification(auth.currentUser)));\n        case 2:\n          error = {\n            name: 'Firebase Error',\n            message: 'User does not exist',\n            code: 'auth/user-not-found',\n            errorCause: 'account'\n          };\n          throw error;\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteCurrentUser() {\n  var error;\n  return _regeneratorRuntime.async(function deleteCurrentUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!auth.currentUser) {\n            _context6.next = 2;\n            break;\n          }\n          return _context6.abrupt(\"return\", firebaseHandler(deleteUser(auth.currentUser)));\n        case 2:\n          error = {\n            name: 'Firebase Error',\n            message: 'User does not exist',\n            code: 'auth/user-not-found',\n            errorCause: 'account'\n          };\n          throw error;\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function signOutUser() {\n  var _auth$currentUser;\n  return _regeneratorRuntime.async(function signOutUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!((_auth$currentUser = auth.currentUser) != null && _auth$currentUser.isAnonymous)) {\n            _context7.next = 2;\n            break;\n          }\n          return _context7.abrupt(\"return\", firebaseHandler(deleteCurrentUser()));\n        case 2:\n          return _context7.abrupt(\"return\", firebaseHandler(signOut(auth)));\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function resetPassword(email) {\n  return _regeneratorRuntime.async(function resetPassword$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          return _context8.abrupt(\"return\", firebaseHandler(sendPasswordResetEmail(auth, email)));\n        case 1:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function resetEmail(newEmail) {\n  var error;\n  return _regeneratorRuntime.async(function resetEmail$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (!auth.currentUser) {\n            _context9.next = 2;\n            break;\n          }\n          return _context9.abrupt(\"return\", firebaseHandler(updateEmail(auth.currentUser, newEmail)));\n        case 2:\n          error = {\n            name: 'Firebase Error',\n            message: 'User does not exist',\n            code: 'auth/user-not-found',\n            errorCause: 'account'\n          };\n          throw error;\n        case 4:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function reauthenticate(email, password) {\n  var credential, error;\n  return _regeneratorRuntime.async(function reauthenticate$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          credential = EmailAuthProvider.credential(email, password);\n          if (!auth.currentUser) {\n            _context10.next = 3;\n            break;\n          }\n          return _context10.abrupt(\"return\", firebaseHandler(reauthenticateWithCredential(auth.currentUser, credential)));\n        case 3:\n          error = {\n            name: 'Firebase Error',\n            message: 'User does not exist',\n            code: 'auth/user-not-found',\n            errorCause: 'account'\n          };\n          throw error;\n        case 5:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setNewPassword(email, oldPassword, newPassword) {\n  var error;\n  return _regeneratorRuntime.async(function setNewPassword$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          if (!auth.currentUser) {\n            _context11.next = 4;\n            break;\n          }\n          _context11.next = 3;\n          return _regeneratorRuntime.awrap(reauthenticate(email, oldPassword));\n        case 3:\n          return _context11.abrupt(\"return\", firebaseHandler(updatePassword(auth.currentUser, newPassword)));\n        case 4:\n          error = {\n            name: 'Firebase Error',\n            message: 'User does not exist',\n            code: 'auth/user-not-found',\n            errorCause: 'account'\n          };\n          throw error;\n        case 6:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setNewEmail(oldEmail, password, newEmail) {\n  var error;\n  return _regeneratorRuntime.async(function setNewEmail$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          if (!auth.currentUser) {\n            _context12.next = 4;\n            break;\n          }\n          _context12.next = 3;\n          return _regeneratorRuntime.awrap(reauthenticate(oldEmail, password));\n        case 3:\n          return _context12.abrupt(\"return\", firebaseHandler(updateEmail(auth.currentUser, newEmail)));\n        case 4:\n          error = {\n            name: 'Firebase Error',\n            message: 'User does not exist',\n            code: 'auth/user-not-found',\n            errorCause: 'account'\n          };\n          throw error;\n        case 6:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signInAnonymously","signOut","fetchSignInMethodsForEmail","deleteUser","sendPasswordResetEmail","sendEmailVerification","updateEmail","updatePassword","reauthenticateWithCredential","EmailAuthProvider","auth","firebaseHandler","anonymousSignIn","fetchSignInMethods","email","signInWithEmail","password","signUpWithEmail","verifyEmail","currentUser","error","name","message","code","errorCause","deleteCurrentUser","signOutUser","isAnonymous","resetPassword","resetEmail","newEmail","reauthenticate","credential","setNewPassword","oldPassword","newPassword","setNewEmail","oldEmail"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/firebase/auth-api.ts"],"sourcesContent":["import {\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    signInAnonymously,\n    signOut,\n    fetchSignInMethodsForEmail,\n    deleteUser,\n    sendPasswordResetEmail,\n    sendEmailVerification,\n    UserCredential,\n    updateEmail,\n    updatePassword,\n    reauthenticateWithCredential,\n    EmailAuthProvider,\n} from 'firebase/auth';\nimport { auth } from './config';\nimport { firebaseHandler, FirebaseError } from './handler';\n\n\n\n/**\n * AUTH FUNCTIONS: https://firebase.google.com/docs/reference/js/auth.md#auth_package\n */\n\n/**\n * sign in as a guest user\n * https://firebase.google.com/docs/reference/js/auth.md#signinanonymously\n * @export\n * @return {*}  {Promise<UserCredential>}\n */\nexport async function anonymousSignIn(): Promise<UserCredential> {\n    return firebaseHandler<UserCredential>(signInAnonymously(auth));\n}\n\n/**\n * Get the sign in methods\n * https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth#fetchsigninmethodsforemail\n * @export\n * @param {string} email\n * @return {*}  {Promise<string[]>} a list of the sign in methods\n */\nexport async function fetchSignInMethods(email: string): Promise<string[]> {\n    return firebaseHandler<string[]>(fetchSignInMethodsForEmail(auth, email));\n}\n\n/**\n * Sign in with an email and password\n * https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth#signinwithemailandpassword\n * @export\n * @param {string} email\n * @param {string} password\n * @return {*}  {Promise<UserCredential>}\n */\nexport async function signInWithEmail(email: string, password: string): Promise<UserCredential> {\n    return firebaseHandler<UserCredential>(signInWithEmailAndPassword(auth, email, password));\n}\n\n/**\n * Sign up with an email and password\n * https://firebase.google.com/docs/reference/js/v8/firebase.auth.Auth#createuserwithemailandpassword\n * @export\n * @param {string} email\n * @param {string} password\n * @return {*}  {Promise<UserCredential>}\n */\nexport async function signUpWithEmail(email: string, password: string): Promise<UserCredential> {\n    return firebaseHandler<UserCredential>(createUserWithEmailAndPassword(auth, email, password));\n}\n\n/**\n * Send verification email to the account email\n * https://firebase.google.com/docs/reference/js/auth.md#sendemailverification\n * @export\n * @return {*}  {Promise<void>}\n */\nexport async function verifyEmail(): Promise<void> {\n    if (auth.currentUser) {\n        return firebaseHandler<void>(sendEmailVerification(auth.currentUser));\n    }\n    const error: FirebaseError = {\n        name: 'Firebase Error',\n        message: 'User does not exist',\n        code: 'auth/user-not-found',\n        errorCause: 'account',\n    };\n    throw error;\n}\n\n/**\n * Delete the current user\n * https://firebase.google.com/docs/auth/web/manage-users#delete_a_user\n * @export\n * @return {*}  {Promise<void>}\n */\nexport async function deleteCurrentUser(): Promise<void> {\n    if (auth.currentUser) {\n        return firebaseHandler<void>(deleteUser(auth.currentUser));\n    }\n    const error: FirebaseError = {\n        name: 'Firebase Error',\n        message: 'User does not exist',\n        code: 'auth/user-not-found',\n        errorCause: 'account',\n    };\n    throw error;\n}\n\n/**\n * Sign out the current user\n * https://firebase.google.com/s/#signout\n * @export\n * @return {*}  {Promise<void>}\n */\nexport async function signOutUser(): Promise<void> {\n    // Delete user if anonymous\n    if (auth.currentUser?.isAnonymous) {\n        return firebaseHandler<void>(deleteCurrentUser());\n    }\n    return firebaseHandler<void>(signOut(auth));\n}\n\n/**\n * Handle the password reset\n * https://firebase.google.com/docs/reference/js/auth.md#sendpasswordresetemail\n * @export\n * @param {string} email\n * @return {*}  {Promise<void>}\n */\nexport async function resetPassword(email: string): Promise<void> {\n    return firebaseHandler<void>(sendPasswordResetEmail(auth, email));\n}\n\n/**\n * Changes the email in the 'authentication' section in firebase\n *\n * @export\n * @param {User} user\n * @param {string} newEmail\n * @return {*} {Promise<void>}\n */\nexport async function resetEmail(newEmail: string): Promise<void> {\n    if (auth.currentUser) {\n        return firebaseHandler<void>(updateEmail(auth.currentUser, newEmail));\n    }\n    const error: FirebaseError = {\n        name: 'Firebase Error',\n        message: 'User does not exist',\n        code: 'auth/user-not-found',\n        errorCause: 'account',\n    };\n    throw error;\n}\n\n/**\n * Function will reauthenticate the user for sensitive actions\n *\n * @export\n * @param {string} email\n * @param {string} password\n * @return {*} {Promise<UserCredential>}\n */\nexport async function reauthenticate(email: string, password: string): Promise<UserCredential> {\n    const credential = EmailAuthProvider.credential(email, password);\n    if (auth.currentUser) {\n        return firebaseHandler<UserCredential>(\n            reauthenticateWithCredential(auth.currentUser, credential),\n        );\n    }\n    const error: FirebaseError = {\n        name: 'Firebase Error',\n        message: 'User does not exist',\n        code: 'auth/user-not-found',\n        errorCause: 'account',\n    };\n    throw error;\n}\n\n/**\n * Function will set the new password for the user\n *\n * @export\n * @param {string} email\n * @param {string} oldPassword\n * @param {string} newPassword\n * @return {*}  {Promise<void>}\n */\nexport async function setNewPassword(\n    email: string,\n    oldPassword: string,\n    newPassword: string,\n): Promise<void> {\n    // https://firebase.google.com/docs/reference/js/auth.md#updatepassword\n    if (auth.currentUser) {\n        await reauthenticate(email, oldPassword);\n        return firebaseHandler(updatePassword(auth.currentUser, newPassword));\n    }\n    const error: FirebaseError = {\n        name: 'Firebase Error',\n        message: 'User does not exist',\n        code: 'auth/user-not-found',\n        errorCause: 'account',\n    };\n    throw error;\n}\n\n/**\n * Function will set the user's new email in auth\n *\n * @export\n * @param {string} newEmail\n * @param {string} oldEmail\n * @param {string} password\n * @return {*}  {Promise<void>}\n */\nexport async function setNewEmail(\n    oldEmail: string,\n    password: string,\n    newEmail: string,\n): Promise<void> {\n    // https://firebase.google.com/docs/reference/js/auth.md#updateemail\n    if (auth.currentUser) {\n        await reauthenticate(oldEmail, password);\n        return firebaseHandler<void>(updateEmail(auth.currentUser, newEmail));\n    }\n    const error: FirebaseError = {\n        name: 'Firebase Error',\n        message: 'User does not exist',\n        code: 'auth/user-not-found',\n        errorCause: 'account',\n    };\n    throw error;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}