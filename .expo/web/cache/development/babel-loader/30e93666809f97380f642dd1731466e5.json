{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"space\"],\n  _excluded2 = [\"children\", \"direction\", \"reversed\", \"divider\", \"size\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { default as Box } from \"../Box\";\nimport { getSpacedChildren } from \"../../../utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { ResponsiveQueryContext } from \"../../../utils/useResponsiveQuery/ResponsiveQueryProvider\";\nvar Stack = function Stack(_ref, ref) {\n  var space = _ref.space,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var dir = props.direction;\n  var _usePropsResolution = usePropsResolution('Stack', _objectSpread(_objectSpread({}, props), {}, {\n      size: space\n    }), {\n      isDisabled: props.isDisabled,\n      isHovered: props.isHovered,\n      isFocused: props.isFocused,\n      isInvalid: props.isInvalid,\n      isReadOnly: props.isReadOnly\n    }, {\n      resolveResponsively: ['space', 'direction']\n    }),\n    children = _usePropsResolution.children,\n    direction = _usePropsResolution.direction,\n    reversed = _usePropsResolution.reversed,\n    divider = _usePropsResolution.divider,\n    size = _usePropsResolution.size,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  var disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, _extends({\n    flexDirection: dir\n  }, resolvedProps, {\n    ref: ref,\n    gap: disableCSSMediaQueries ? undefined : size\n  }), getSpacedChildren(children, size, direction === 'row' ? 'X' : 'Y', reversed ? 'reverse' : 'normal', divider));\n};\nexport default memo(forwardRef(Stack));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,OAAO,IAAIC,GAApB;AACA,SAASC,iBAAT;AACA,SAASC,kBAAT;AACA,SAASC,qBAAT;AAEA,SAASC,sBAAT;AAgDA,IAAMC,KAAK,GAAG,SAARA,KAAK,OAAsCC,GAAnC,EAAiD;EAAA,IAA9CC,KAAF,QAAEA,KAAF;IAAYC;EACzB,IAAMC,GAAG,GAAGD,KAAK,CAACE,SAAlB;EACA,0BAOSR,kBAAkB,CACzB,OADyB,kCAEpBM,KAAL;MAAYG,IAAI,EAAEJ;IAAAA,IAClB;MACEK,UAAU,EAAEJ,KAAK,CAACI,UADpB;MAEEC,SAAS,EAAEL,KAAK,CAACK,SAFnB;MAGEC,SAAS,EAAEN,KAAK,CAACM,SAHnB;MAIEC,SAAS,EAAEP,KAAK,CAACO,SAJnB;MAKEC,UAAU,EAAER,KAAK,CAACQ;IALpB,CAHyB,EAUzB;MAAEC,mBAAmB,EAAE,CAAC,OAAD,EAAU,WAAV;IAAvB,CAVyB,CAP3B;IACEC,QADI,uBACJA,QADI;IAEJR,SAFI,uBAEJA,SAFI;IAGJS,QAHI,uBAGJA,QAHI;IAIJC,OAJI,uBAIJA,OAJI;IAKJT,IALI,uBAKJA,IALI;IAMDU;EAcL,IAAMC,sBAAsB,GAAG1B,KAAK,CAAC2B,UAAN,CAAiBnB,sBAAjB,CAA/B;EACA,IAAMoB,sBAAsB,GAAGF,sBAAsB,CAACE,sBAAtD;EAGA,IAAIrB,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,OACEZ,oBAACI,GAAD;IACEyB,aAAa,EAAEhB;EADjB,GAEMY,aAFN;IAGEf,GAAG,EAAEA,GAHP;IAKEoB,GAAG,EAAEF,sBAAsB,GAAGG,SAAH,GAAehB;EAL5C,IAOGV,iBAAiB,CAChBiB,QADgB,EAEhBP,IAFgB,EAGhBD,SAAS,KAAK,KAAd,GAAsB,GAAtB,GAA4B,GAHZ,EAIhBS,QAAQ,GAAG,SAAH,GAAe,QAJP,EAKhBC,OALgB,CAPpB,CADF;AAiBD,CA/CD;AAiDA,eAAevB,IAAI,CAACC,UAAU,CAACO,KAAD,CAAX,CAAnB","names":["React","memo","forwardRef","default","Box","getSpacedChildren","usePropsResolution","useHasResponsiveProps","ResponsiveQueryContext","Stack","ref","space","props","dir","direction","size","isDisabled","isHovered","isFocused","isInvalid","isReadOnly","resolveResponsively","children","reversed","divider","resolvedProps","responsiveQueryContext","useContext","disableCSSMediaQueries","flexDirection","gap","undefined"],"sources":["Stack.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box, InterfaceBoxProps } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { CustomProps, ResponsiveValue, SpaceType } from '../../types';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nexport interface InterfaceStackProps extends InterfaceBoxProps<IStackProps> {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | SpaceType\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n  /**\n   * If true, the Stack will be in hovered state.\n   */\n  isHovered?: boolean;\n  /**\n   * If true, the Stack will be focused.\n   */\n  isFocused?: boolean;\n  /**\n   * If true, the Stack will be disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * If true, the Stack will be invalid.\n   */\n  isInvalid?: boolean;\n  /**\n   * If true, prevents the value of the children from being edited. Used with FormControls.\n   */\n  isReadOnly?: boolean;\n}\n\nexport type IStackProps = InterfaceStackProps & CustomProps<'Stack'>;\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const dir = props.direction;\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  }: any = usePropsResolution(\n    'Stack',\n    { ...props, size: space },\n    {\n      isDisabled: props.isDisabled,\n      isHovered: props.isHovered,\n      isFocused: props.isFocused,\n      isInvalid: props.isInvalid,\n      isReadOnly: props.isReadOnly,\n    },\n    { resolveResponsively: ['space', 'direction'] }\n  );\n\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      flexDirection={dir}\n      {...resolvedProps}\n      ref={ref}\n      // @ts-ignore\n      gap={disableCSSMediaQueries ? undefined : size}\n    >\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]},"metadata":{},"sourceType":"module"}