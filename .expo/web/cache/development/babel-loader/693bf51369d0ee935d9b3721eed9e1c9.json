{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useKeyboardDismissable, usePropsResolution, useToken } from \"../../../hooks\";\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Popper } from \"../Popper\";\nimport { PopoverContext } from \"./PopoverContext\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var PopoverContent = React.forwardRef(function (props, ref) {\n  var _ref, _ref2, _props$bgColor;\n  var _React$useContext = React.useContext(PopoverContext),\n    onClose = _React$useContext.onClose,\n    initialFocusRef = _React$useContext.initialFocusRef,\n    finalFocusRef = _React$useContext.finalFocusRef,\n    popoverContentId = _React$useContext.popoverContentId,\n    headerMounted = _React$useContext.headerMounted,\n    bodyMounted = _React$useContext.bodyMounted,\n    bodyId = _React$useContext.bodyId,\n    headerId = _React$useContext.headerId,\n    isOpen = _React$useContext.isOpen;\n  var resolvedProps = usePropsResolution('PopoverContent', props);\n  var arrowDefaultColor = (_ref = (_ref2 = (_props$bgColor = props.bgColor) !== null && _props$bgColor !== void 0 ? _props$bgColor : props.bg) !== null && _ref2 !== void 0 ? _ref2 : props.backgroundColor) !== null && _ref !== void 0 ? _ref : resolvedProps.backgroundColor;\n  var color = useToken('colors', arrowDefaultColor);\n  React.useEffect(function () {\n    var finalFocusRefCurrentVal = finalFocusRef === null || finalFocusRef === void 0 ? void 0 : finalFocusRef.current;\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n    return function () {\n      if (finalFocusRefCurrentVal) {\n        finalFocusRefCurrentVal.focus();\n      }\n    };\n  }, [finalFocusRef, initialFocusRef]);\n  useKeyboardDismissable({\n    enabled: true,\n    callback: onClose\n  });\n  var arrowElement = null;\n  var restChildren = [];\n  React.Children.toArray(props.children).forEach(function (child) {\n    var _child$type;\n    if ((child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === 'PopperArrow') {\n      var _child$props$color;\n      arrowElement = React.cloneElement(child, {\n        backgroundColor: (_child$props$color = child.props.color) !== null && _child$props$color !== void 0 ? _child$props$color : color\n      });\n    } else {\n      restChildren.push(child);\n    }\n  });\n  var accessibilityProps = Platform.OS === 'web' ? {\n    'accessibilityRole': 'dialog',\n    'aria-labelledby': headerMounted ? headerId : undefined,\n    'aria-describedby': bodyMounted ? bodyId : undefined\n  } : {};\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Popper.Content, _extends({\n    nativeID: popoverContentId\n  }, accessibilityProps, resolvedProps, {\n    ref: ref,\n    isOpen: isOpen\n  }), arrowElement, restChildren);\n});\nPopoverContent.displayName = 'PopoverContent';","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,SACEA,sBADF,EAEEC,kBAFF,EAGEC,QAHF;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AAAA;AAGA,SAASC,MAAT;AACA,SAASC,cAAT;AACA,SAASC,qBAAT;AAEA,OAAO,IAAMC,cAAc,GAAGJ,KAAK,CAACK,UAAN,CAC5B,UAACC,KAAD,EAA8BC,GAA9B,EAA2C;EAAA;EACzC,wBAUIP,KAAK,CAACQ,UAAN,CAAiBN,cAAjB,CAVJ;IACEO,OADI,qBACJA,OADI;IAEJC,eAFI,qBAEJA,eAFI;IAGJC,aAHI,qBAGJA,aAHI;IAIJC,gBAJI,qBAIJA,gBAJI;IAKJC,aALI,qBAKJA,aALI;IAMJC,WANI,qBAMJA,WANI;IAOJC,MAPI,qBAOJA,MAPI;IAQJC,QARI,qBAQJA,QARI;IASJC;EAEF,IAAMC,aAAa,GAAGpB,kBAAkB,CAAC,gBAAD,EAAmBQ,KAAnB,CAAxC;EAEA,IAAMa,iBAAiB,sCACrBb,KAAK,CAACc,OADe,2DAErBd,KAAK,CAACe,EAFe,yCAGrBf,KAAK,CAACgB,eAHe,uCAIrBJ,aAAa,CAACI,eAJhB;EAKA,IAAMC,KAAK,GAAGxB,QAAQ,CAAC,QAAD,EAAWoB,iBAAX,CAAtB;EAEAnB,KAAK,CAACwB,SAAN,CAAgB,YAAM;IACpB,IAAMC,uBAAuB,GAAGd,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEe,OAA/C;IACA,IAAIhB,eAAe,IAAIA,eAAe,CAACgB,OAAvC,EAAgD;MAC9ChB,eAAe,CAACgB,OAAhB,CAAwBC,KAAxB;IACD;IAED,OAAO,YAAM;MACX,IAAIF,uBAAJ,EAA6B;QAC3BA,uBAAuB,CAACE,KAAxB;MACD;IACF,CAJD;EAKD,CAXD,EAWG,CAAChB,aAAD,EAAgBD,eAAhB,CAXH;EAaAb,sBAAsB,CAAC;IACrB+B,OAAO,EAAE,IADY;IAErBC,QAAQ,EAAEpB;EAFW,CAAD,CAAtB;EAKA,IAAIqB,YAAY,GAAG,IAAnB;EACA,IAAMC,YAAiB,GAAG,EAA1B;EACA/B,KAAK,CAACgC,QAAN,CAAeC,OAAf,CAAuB3B,KAAK,CAAC4B,QAA7B,EAAuCC,OAAvC,CAAgDC,eAAD,EAAgB;IAAA;IAC7D,IAAI,MAAK,SAAL,SAAK,WAAL,gCAAK,CAAEC,IAAP,4DAAaC,WAAb,MAA6B,aAAjC,EAAgD;MAAA;MAC9CR,YAAY,GAAG9B,KAAK,CAACuC,YAAN,CAAmBH,KAAnB,EAA0B;QACvCd,eAAe,wBAAEc,KAAK,CAAC9B,KAAN,CAAYiB,KAAd,mEAAuBA;MADC,CAA1B,CAAf;IAGD,CAJD,MAIO;MACLQ,YAAY,CAACS,IAAb,CAAkBJ,KAAlB;IACD;EACF,CARD;EAUA,IAAMK,kBAAkB,GACtBC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACK;IACC,qBAAqB,QADtB;IAEC,mBAAmB9B,aAAa,GAAGG,QAAH,GAAc4B,SAF/C;IAGC,oBAAoB9B,WAAW,GAAGC,MAAH,GAAY6B;EAH5C,CADL,GAMI,EAPN;EAUA,IAAIzC,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,OACEN,oBAACC,MAAD,CAAQ4C,OAAR;IACEC,QAAQ,EAAElC;EADZ,GAEM6B,kBAFN,EAGMvB,aAHN;IAIEX,GAAG,EAAEA,GAJP;IAKEU,MAAM,EAAEA;EALV,IAOGa,YAPH,EAQGC,YARH,CADF;AAYD,CA9E2B,CAAvB;AAiFP3B,cAAc,CAACkC,WAAf,GAA6B,gBAA7B","names":["useKeyboardDismissable","usePropsResolution","useToken","React","Popper","PopoverContext","useHasResponsiveProps","PopoverContent","forwardRef","props","ref","useContext","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","isOpen","resolvedProps","arrowDefaultColor","bgColor","bg","backgroundColor","color","useEffect","finalFocusRefCurrentVal","current","focus","enabled","callback","arrowElement","restChildren","Children","toArray","children","forEach","child","type","displayName","cloneElement","push","accessibilityProps","Platform","OS","undefined","Content","nativeID"],"sources":["PopoverContent.tsx"],"sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n      isOpen,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.toArray(props.children).forEach((child: any) => {\n      if (child?.type?.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        ref={ref}\n        isOpen={isOpen}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]},"metadata":{},"sourceType":"module"}