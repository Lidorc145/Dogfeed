{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from \"./../../theme/base\";\nimport { getClosestBreakpoint, findLastValidBreakpoint, hasValidBreakpointFormat, extractInObject } from \"./../../theme/tools\";\nimport { useContrastText } from \"../useContrastText\";\nexport function extractProps(props, theme, _ref, componentTheme, currentBreakpoint) {\n  _objectDestructuringEmpty(_ref);\n  var newProps = {};\n  for (var property in props) {\n    if (themePropertyMap[property]) {\n      var propValues = extractPropertyFromFunction(property, props, theme, componentTheme);\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (var nestedProp in propValues) {\n          newProps[nestedProp] = get(theme, \"\".concat(themePropertyMap[nestedProp], \".\").concat(propValues[nestedProp]), propValues[nestedProp]);\n        }\n      } else if (property === 'shadow') {\n        var shadowProps = theme[themePropertyMap[property]][props[property]];\n        if (!isNil(shadowProps)) {\n          newProps = _objectSpread(_objectSpread({}, newProps), shadowProps);\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(props[property], theme.breakpoints, currentBreakpoint, property);\n    }\n  }\n  return cloneDeep(newProps);\n}\nfunction filterDefaultProps(props, defaultProps) {\n  var _extractInObject = extractInObject(defaultProps, Object.keys(props)),\n    _extractInObject2 = _slicedToArray(_extractInObject, 2),\n    resultProps = _extractInObject2[1];\n  return resultProps;\n}\nexport var extractPropertyFromFunction = function extractPropertyFromFunction(property, props, theme, componentTheme) {\n  var propValues;\n  if (componentTheme && typeof componentTheme[themePropertyMap[property]] === 'function') {\n    var funcProps = componentTheme[themePropertyMap[property]](_objectSpread({\n      theme: theme\n    }, props));\n    var isNested = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    propValues = isNested ? _objectSpread({}, get(funcProps, \"\".concat(props[property]))) : _objectSpread({}, funcProps);\n  } else {\n    propValues = get(componentTheme, \"\".concat(themePropertyMap[property], \".\").concat(props[property]));\n  }\n  return propValues;\n};\nexport function mergeUnderscoreProps(newProps, props) {\n  var _props = Object.keys(newProps).filter(function (propName) {\n    return propName.startsWith('_');\n  });\n  _props.forEach(function (propName) {\n    var _newProps$bg, _newProps$propName$co, _newProps$propName, _props$propName;\n    var bg = (_newProps$bg = newProps.bg) !== null && _newProps$bg !== void 0 ? _newProps$bg : newProps.backgroundColor;\n    var textColor = bg ? {\n      color: useContrastText(bg, (_newProps$propName$co = (_newProps$propName = newProps[propName]) === null || _newProps$propName === void 0 ? void 0 : _newProps$propName.color) !== null && _newProps$propName$co !== void 0 ? _newProps$propName$co : (_props$propName = props[propName]) === null || _props$propName === void 0 ? void 0 : _props$propName.color)\n    } : {};\n    newProps[propName] = _objectSpread(_objectSpread(_objectSpread({}, textColor), newProps[propName]), props[propName]);\n  });\n  return newProps;\n}\nexport var resolveValueWithBreakpoint = function resolveValueWithBreakpoint(values, breakpointTheme, currentBreakpoint, property) {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\nexport function calculateProps(theme, colorModeProps, componentTheme, props, windowWidth) {\n  var currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n  var newProps;\n  if (componentTheme) {\n    newProps = extractProps(filterDefaultProps(props, componentTheme.defaultProps), theme, colorModeProps, componentTheme, currentBreakpoint);\n    var componentBaseStyle = typeof componentTheme.baseStyle !== 'function' ? componentTheme.baseStyle : componentTheme.baseStyle(_objectSpread(_objectSpread(_objectSpread({\n      theme: theme\n    }, newProps), props), colorModeProps));\n    newProps = mergeWith(newProps, componentBaseStyle, function (objValue, srcValue, key) {\n      if (!isNil(objValue)) {\n        delete newProps[key];\n      }\n    });\n    var variant = props.variant || get(componentTheme, 'defaultProps.variant');\n    if (variant && componentTheme.variants && componentTheme.variants[variant]) {\n      var colorScheme = props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      var variantProps = componentTheme.variants[variant](_objectSpread(_objectSpread(_objectSpread({}, props), newProps), {}, {\n        colorScheme: colorScheme,\n        theme: theme\n      }, colorModeProps));\n      variantProps = extractProps(variantProps, theme, colorModeProps, componentTheme, currentBreakpoint);\n      newProps = mergeWith(newProps, variantProps, function (objValue, srcValue, key) {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      });\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  var extractedProps = extractProps(props, theme, colorModeProps, componentTheme, currentBreakpoint);\n  newProps = mergeWith(newProps, extractedProps, function (objValue, srcValue, key) {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}","map":{"version":3,"mappings":";;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,gBAAT;AACA,SACEC,oBADF,EAEEC,uBAFF,EAGEC,wBAHF,EAIEC,eAJF;AAMA,SAASC,eAAT;AAcA,OAAO,SAASC,YAAT,CACLC,KADK,EAELC,KAFK,QAILC,cAJK,EAKLC,iBALK,EAML;EAAA;EACA,IAAIC,QAAa,GAAG,EAApB;EACA,KAAK,IAAIC,QAAT,IAAqBL,KAArB,EAA4B;IAE1B,IAAIP,gBAAgB,CAACY,QAAD,CAApB,EAAgC;MAC9B,IAAIC,UAAU,GAAGC,2BAA2B,CAC1CF,QAD0C,EAE1CL,KAF0C,EAG1CC,KAH0C,EAI1CC,cAJ0C,CAA5C;MAMA,IAAI,OAAOI,UAAP,KAAsB,QAAtB,IAAkC,OAAOA,UAAP,KAAsB,QAA5D,EAAsE;QACpEF,QAAQ,CAACC,QAAD,CAAR,GAAqBC,UAArB;MACD,CAFD,MAEO,IAAI,CAAChB,KAAK,CAACgB,UAAD,CAAV,EAAwB;QAC7B,KAAK,IAAIE,UAAT,IAAuBF,UAAvB,EAAmC;UACjCF,QAAQ,CAACI,UAAD,CAAR,GAAuBnB,GAAG,CACxBY,KADwB,YAErBR,gBAAgB,CAACe,UAAD,CAFK,cAEWF,UAAU,CAACE,UAAD,CAFrB,GAGxBF,UAAU,CAACE,UAAD,CAHc,CAA1B;QAKD;MACF,CARM,MAQA,IAAIH,QAAQ,KAAK,QAAjB,EAA2B;QAChC,IAAII,WAAW,GAAGR,KAAK,CAACR,gBAAgB,CAACY,QAAD,CAAjB,CAAL,CAAkCL,KAAK,CAACK,QAAD,CAAvC,CAAlB;QACA,IAAI,CAACf,KAAK,CAACmB,WAAD,CAAV,EAAyB;UACvBL,QAAQ,mCAAQA,QAAL,GAAkBK,YAA7B;QACD;MACF,CALM,MAKA;QACLL,QAAQ,CAACC,QAAD,CAAR,GAAqBK,0BAA0B,CAC7CV,KAAK,CAACK,QAAD,CADwC,EAE7CJ,KAAK,CAACU,WAFuC,EAG7CR,iBAH6C,EAI7CE,QAJ6C,CAA/C;MAMD;IACF,CA9BD,MA8BO;MACLD,QAAQ,CAACC,QAAD,CAAR,GAAqBK,0BAA0B,CAC7CV,KAAK,CAACK,QAAD,CADwC,EAE7CJ,KAAK,CAACU,WAFuC,EAG7CR,iBAH6C,EAI7CE,QAJ6C,CAA/C;IAMD;EACF;EACD,OAAOb,SAAS,CAACY,QAAD,CAAhB;AACD;AAKD,SAASQ,kBAAT,CAA4BZ,KAA5B,EAAwCa,YAAxC,EAA2D;EACzD,uBAAsBhB,eAAe,CAACgB,YAAD,EAAeC,MAAM,CAACC,IAAP,CAAYf,KAAZ,CAAf,CAArC;IAAA;IAAOgB,WAAH;EACJ,OAAOA,WAAP;AACD;AAWD,OAAO,IAAMT,2BAA2B,GAAG,SAA9BA,2BAA2B,CACtCF,QADyC,EAEzCL,KAFyC,EAGzCC,KAHyC,EAIzCC,cAJyC,EAKtC;EACH,IAAII,UAAJ;EAEA,IACEJ,cAAc,IACd,OAAOA,cAAc,CAACT,gBAAgB,CAACY,QAAD,CAAjB,CAArB,KAAsD,UAFxD,EAGE;IACA,IAAIY,SAAS,GAAGf,cAAc,CAACT,gBAAgB,CAACY,QAAD,CAAjB,CAAd;MACdJ,KADyD,EACzDA;IADyD,GAEtDD,OAFL;IAKA,IAAIkB,QAAiB,GAAGJ,MAAM,CAACC,IAAP,CAAYE,SAAZ,EAAuBE,IAAvB,CAA4B,UAAUC,GAAV,EAAe;MACjE,OAAOH,SAAS,CAACG,GAAD,CAAT,IAAkB,OAAOH,SAAS,CAACG,GAAD,CAAhB,KAA0B,QAAnD;IACD,CAFuB,CAAxB;IAIAd,UAAU,GAAGY,QAAQ,qBACZ7B,GAAG,CAAC4B,SAAD,YAAejB,KAAK,CAACK,QAAD,CAApB,wBACHY,UAFT;EAGD,CAhBD,MAgBO;IAELX,UAAU,GAAGjB,GAAG,CACda,cADc,YAEXT,gBAAgB,CAACY,QAAD,CAFL,cAEmBL,KAAK,CAACK,QAAD,CAFxB,EAAhB;EAID;EACD,OAAOC,UAAP;AACD,CAhCM;AAqCP,OAAO,SAASe,oBAAT,CAA8BjB,QAA9B,EAA6CJ,KAA7C,EAAyD;EAC9D,IAAMsB,MAAM,GAAGR,MAAM,CAACC,IAAP,CAAYX,QAAZ,EAAsBmB,MAAtB,CAA8BC,kBAAD;IAAA,OAC1CA,QAAQ,CAACC,UAAT,CAAoB,GAApB,CADa;EAAA,EAAf;EAGAH,MAAM,CAACI,OAAP,CAAgBF,kBAAD,EAAsB;IAAA;IAEnC,IAAMG,EAAE,mBAAGvB,QAAQ,CAACuB,EAAZ,uDAAkBvB,QAAQ,CAACwB,eAAnC;IACA,IAAMC,SAAS,GAAGF,EAAE,GAChB;MACEG,KAAK,EAAEhC,eAAe,CACpB6B,EADoB,iDAEpBvB,QAAQ,CAACoB,QAAD,CAFY,uDAEpBO,mBAAoBD,KAFA,4FAES9B,KAAK,CAACwB,QAAD,CAFd,oDAESQ,gBAAiBF,KAF1B;IADxB,CADgB,GAOhB,EAPJ;IASA1B,QAAQ,CAACoB,QAAD,CAAR,iDACKK,SADgB,GAEhBzB,QAAQ,CAACoB,QAAD,CAFQ,GAGhBxB,KAAK,CAACwB,QAAD,EAHV;EAKD,CAjBD;EAkBA,OAAOpB,QAAP;AACD;AAUD,OAAO,IAAMM,0BAA0B,GAAG,SAA7BA,0BAA0B,CACrCuB,MADwC,EAExCC,eAFwC,EAGxC/B,iBAHwC,EAIxCE,QAJwC,EAKrC;EACH,IAAIT,wBAAwB,CAACqC,MAAD,EAASC,eAAT,EAA0B7B,QAA1B,CAA5B,EAAiE;IAG/D,OAAOV,uBAAuB,CAACsC,MAAD,EAASC,eAAT,EAA0B/B,iBAA1B,CAA9B;EACD,CAJD,MAIO;IACL,OAAO8B,MAAP;EACD;AACF,CAbM;AAyBP,OAAO,SAASE,cAAT,CACLlC,KADK,EAELmC,cAFK,EAGLlC,cAHK,EAILF,KAJK,EAKLqC,WALK,EAML;EACA,IAAIlC,iBAAiB,GAAGT,oBAAoB,CAACO,KAAK,CAACU,WAAP,EAAoB0B,WAApB,CAA5C;EACA,IAAI,CAACrC,KAAL,EAAY;IACVA,KAAK,GAAG,EAAR;EACD;EAED,IAAII,QAAJ;EACA,IAAIF,cAAJ,EAAoB;IAElBE,QAAQ,GAAGL,YAAY,CACrBa,kBAAkB,CAACZ,KAAD,EAAQE,cAAc,CAACW,YAAvB,CADG,EAErBZ,KAFqB,EAGrBmC,cAHqB,EAIrBlC,cAJqB,EAKrBC,iBALqB,CAAvB;IAQA,IAAImC,kBAAkB,GACpB,OAAOpC,cAAc,CAACqC,SAAtB,KAAoC,UAApC,GACIrC,cAAc,CAACqC,SADnB,GAEIrC,cAAc,CAACqC,SAAf;MACEtC,KADuB,EACvBA;IADuB,GAEpBG,QAFoB,GAGpBJ,KAHoB,GAIpBoC,gBAPX;IASAhC,QAAQ,GAAGb,SAAS,CAClBa,QADkB,EAElBkC,kBAFkB,EAIlB,UAACE,QAAD,EAAWC,QAAX,EAAqBrB,GAArB,EAA6B;MAC3B,IAAI,CAAC9B,KAAK,CAACkD,QAAD,CAAV,EAAsB;QACpB,OAAOpC,QAAQ,CAACgB,GAAD,CAAf;MACD;IACF,CARiB,CAApB;IAWA,IAAMsB,OAAO,GACX1C,KAAK,CAAC0C,OAAN,IAAiBrD,GAAG,CAACa,cAAD,EAAiB,sBAAjB,CADtB;IAGA,IACEwC,OAAO,IACPxC,cAAc,CAACyC,QADf,IAEAzC,cAAc,CAACyC,QAAf,CAAwBD,OAAxB,CAHF,EAIE;MACA,IAAME,WAAW,GACf5C,KAAK,CAAC4C,WAAN,IAAqBvD,GAAG,CAACa,cAAD,EAAiB,0BAAjB,CAD1B;MAEA,IAAI2C,YAAY,GAAG3C,cAAc,CAACyC,QAAf,CAAwBD,OAAxB,gDACd1C,KAD+C,GAE/CI,QAF+C;QAGlDwC,WAHkD,EAGlDA,WAHkD;QAIlD3C,KAJkD,EAIlDA;MAJkD,GAK/CmC,gBALL;MAOAS,YAAY,GAAG9C,YAAY,CACzB8C,YADyB,EAEzB5C,KAFyB,EAGzBmC,cAHyB,EAIzBlC,cAJyB,EAKzBC,iBALyB,CAA3B;MAQAC,QAAQ,GAAGb,SAAS,CAClBa,QADkB,EAElByC,YAFkB,EAIlB,UAACL,QAAD,EAAWC,QAAX,EAAqBrB,GAArB,EAA6B;QAC3B,IAAI,CAAC9B,KAAK,CAACkD,QAAD,CAAV,EAAsB;UACpB,OAAOpC,QAAQ,CAACgB,GAAD,CAAf;QACD;MACF,CARiB,CAApB;MAUA,OAAOhB,QAAQ,CAACsC,OAAhB;MACA,OAAOtC,QAAQ,CAACwC,WAAhB;IACD;EACF;EAED,IAAIE,cAAc,GAAG/C,YAAY,CAC/BC,KAD+B,EAE/BC,KAF+B,EAG/BmC,cAH+B,EAI/BlC,cAJ+B,EAK/BC,iBAL+B,CAAjC;EASAC,QAAQ,GAAGb,SAAS,CAACa,QAAD,EAAW0C,cAAX,EAA2B,UAACN,QAAD,EAAWC,QAAX,EAAqBrB,GAArB,EAA6B;IAC1E,IAAI,CAAC9B,KAAK,CAACkD,QAAD,CAAV,EAAsB;MACpB,OAAOpC,QAAQ,CAACgB,GAAD,CAAf;IACD;EACF,CAJmB,CAApB;EAKAhB,QAAQ,GAAGiB,oBAAoB,CAACjB,QAAD,EAAWJ,KAAX,CAA/B;EACA,OAAOI,QAAP;AACD","names":["get","isNil","mergeWith","cloneDeep","themePropertyMap","getClosestBreakpoint","findLastValidBreakpoint","hasValidBreakpointFormat","extractInObject","useContrastText","extractProps","props","theme","componentTheme","currentBreakpoint","newProps","property","propValues","extractPropertyFromFunction","nestedProp","shadowProps","resolveValueWithBreakpoint","breakpoints","filterDefaultProps","defaultProps","Object","keys","resultProps","funcProps","isNested","some","key","mergeUnderscoreProps","_props","filter","propName","startsWith","forEach","bg","backgroundColor","textColor","color","_newProps$propName","_props$propName","values","breakpointTheme","calculateProps","colorModeProps","windowWidth","componentBaseStyle","baseStyle","objValue","srcValue","variant","variants","colorScheme","variantProps","extractedProps"],"sources":["utils.ts"],"sourcesContent":["import get from 'lodash.get';\nimport isNil from 'lodash.isnil';\nimport mergeWith from 'lodash.mergewith';\nimport cloneDeep from 'lodash.clonedeep';\nimport { themePropertyMap } from './../../theme/base';\nimport {\n  getClosestBreakpoint,\n  findLastValidBreakpoint,\n  hasValidBreakpointFormat,\n  extractInObject,\n} from './../../theme/tools';\nimport { useContrastText } from '../useContrastText';\n\n/*\n Extract props from theme props and omit those from props\n*/\n/**\n *\n * @param props Props passed by the user\n * @param theme Theme object\n * @param colorModeProps `colorMode` object\n * @param componentTheme Theme for specific components\n * @param currentBreakpoint Current breakpoint values\n * @returns Extracting props from defaultProps while overriding the props that are already present\n */\nexport function extractProps(\n  props: any,\n  theme: any,\n  {},\n  componentTheme: any,\n  currentBreakpoint: number\n) {\n  let newProps: any = {};\n  for (let property in props) {\n    // If the property exists in themePropertyMap then get its value\n    if (themePropertyMap[property]) {\n      let propValues = extractPropertyFromFunction(\n        property,\n        props,\n        theme,\n        componentTheme\n      );\n      if (typeof propValues === 'string' || typeof propValues === 'number') {\n        newProps[property] = propValues;\n      } else if (!isNil(propValues)) {\n        for (let nestedProp in propValues) {\n          newProps[nestedProp] = get(\n            theme,\n            `${themePropertyMap[nestedProp]}.${propValues[nestedProp]}`,\n            propValues[nestedProp]\n          );\n        }\n      } else if (property === 'shadow') {\n        let shadowProps = theme[themePropertyMap[property]][props[property]];\n        if (!isNil(shadowProps)) {\n          newProps = { ...newProps, ...shadowProps };\n        }\n      } else {\n        newProps[property] = resolveValueWithBreakpoint(\n          props[property],\n          theme.breakpoints,\n          currentBreakpoint,\n          property\n        );\n      }\n    } else {\n      newProps[property] = resolveValueWithBreakpoint(\n        props[property],\n        theme.breakpoints,\n        currentBreakpoint,\n        property\n      );\n    }\n  }\n  return cloneDeep(newProps);\n}\n\n/*\nRemove props from defaultProps that are already present in props\n*/\nfunction filterDefaultProps(props: any, defaultProps: any) {\n  let [, resultProps] = extractInObject(defaultProps, Object.keys(props));\n  return resultProps;\n}\n\n/**\n * If property is functional in componentTheme, get its returned object\n *\n * @param property : name of the prop\n * @param props : all props\n * @param theme : provided theme without components\n * @param componentTheme : component specific theme\n * @returns\n */\nexport const extractPropertyFromFunction = (\n  property: string,\n  props: any,\n  theme: any,\n  componentTheme: any\n) => {\n  let propValues;\n  // Check if the entry in the theme is a function then calling it with all theme and props as params\n  if (\n    componentTheme &&\n    typeof componentTheme[themePropertyMap[property]] === 'function'\n  ) {\n    let funcProps = componentTheme[themePropertyMap[property]]({\n      theme,\n      ...props,\n    });\n    // Check if returned object from componentTheme is a nested object\n    let isNested: boolean = Object.keys(funcProps).some(function (key) {\n      return funcProps[key] && typeof funcProps[key] === 'object';\n    });\n    // If the returned value is nested object then find the property value in it, otherwise return the whole object\n    propValues = isNested\n      ? { ...get(funcProps, `${props[property]}`) }\n      : { ...funcProps };\n  } else {\n    // If the entry is any value other than function then return the whole object or value\n    propValues = get(\n      componentTheme,\n      `${themePropertyMap[property]}.${props[property]}`\n    );\n  }\n  return propValues;\n};\n\n/*\nMerge _props and apply contrastText color if not passed by theme or user\n*/\nexport function mergeUnderscoreProps(newProps: any, props: any) {\n  const _props = Object.keys(newProps).filter((propName) =>\n    propName.startsWith('_')\n  );\n  _props.forEach((propName: string) => {\n    // Adding color based on bg contrast if no color is given\n    const bg = newProps.bg ?? newProps.backgroundColor;\n    const textColor = bg\n      ? {\n          color: useContrastText(\n            bg,\n            newProps[propName]?.color ?? props[propName]?.color\n          ),\n        }\n      : {};\n    // Overriding calculated props with user added props\n    newProps[propName] = {\n      ...textColor,\n      ...newProps[propName],\n      ...props[propName],\n    };\n  });\n  return newProps;\n}\n\n/**\n *\n * Checks the property and resolves it if it has breakpoints\n * @param values : value from props\n * @param currentBreakpoint : current value for which breakpoint will be calculated\n * @param property : property name\n * @returns\n */\nexport const resolveValueWithBreakpoint = (\n  values: any,\n  breakpointTheme: any,\n  currentBreakpoint: number,\n  property: any\n) => {\n  if (hasValidBreakpointFormat(values, breakpointTheme, property)) {\n    // Check the last valid breakpoint value from all values\n    // If current breakpoint is `md` and we have `base` then `lg`, then last value will be taken(`base` in this case)\n    return findLastValidBreakpoint(values, breakpointTheme, currentBreakpoint);\n  } else {\n    return values;\n  }\n};\n\n/**\n * Takes all prop related data and returns the props that needs to be applied to the component\n *\n * @param theme Theme object\n * @param colorModeProps Color mode information\n * @param componentTheme Theme object for the specific component\n * @param props Props passed by the user\n * @param windowWidth Width of the current window\n * @returns props to be applied\n */\nexport function calculateProps(\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  props: any,\n  windowWidth: any\n) {\n  let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n  if (!props) {\n    props = {};\n  }\n\n  let newProps: any;\n  if (componentTheme) {\n    // Extracting props from defaultProps\n    newProps = extractProps(\n      filterDefaultProps(props, componentTheme.defaultProps),\n      theme,\n      colorModeProps,\n      componentTheme,\n      currentBreakpoint\n    );\n    // Extracting props from base style\n    let componentBaseStyle =\n      typeof componentTheme.baseStyle !== 'function'\n        ? componentTheme.baseStyle\n        : componentTheme.baseStyle({\n            theme,\n            ...newProps,\n            ...props,\n            ...colorModeProps,\n          });\n    newProps = mergeWith(\n      newProps,\n      componentBaseStyle,\n      // @ts-ignore\n      (objValue, srcValue, key) => {\n        if (!isNil(objValue)) {\n          delete newProps[key];\n        }\n      }\n    );\n\n    const variant =\n      props.variant || get(componentTheme, 'defaultProps.variant');\n    // Extracting props from variant\n    if (\n      variant &&\n      componentTheme.variants &&\n      componentTheme.variants[variant]\n    ) {\n      const colorScheme =\n        props.colorScheme || get(componentTheme, 'defaultProps.colorScheme');\n      let variantProps = componentTheme.variants[variant]({\n        ...props,\n        ...newProps,\n        colorScheme,\n        theme,\n        ...colorModeProps,\n      });\n      variantProps = extractProps(\n        variantProps,\n        theme,\n        colorModeProps,\n        componentTheme,\n        currentBreakpoint\n      );\n      // added this to handle order of props\n      newProps = mergeWith(\n        newProps,\n        variantProps,\n        // @ts-ignore\n        (objValue, srcValue, key) => {\n          if (!isNil(objValue)) {\n            delete newProps[key];\n          }\n        }\n      );\n      delete newProps.variant;\n      delete newProps.colorScheme;\n    }\n  }\n  // Extracting props from normal props\n  let extractedProps = extractProps(\n    props,\n    theme,\n    colorModeProps,\n    componentTheme,\n    currentBreakpoint\n  );\n  // added this to handle order of props\n  // @ts-ignore\n  newProps = mergeWith(newProps, extractedProps, (objValue, srcValue, key) => {\n    if (!isNil(objValue)) {\n      delete newProps[key];\n    }\n  });\n  newProps = mergeUnderscoreProps(newProps, props);\n  return newProps;\n}\n"]},"metadata":{},"sourceType":"module"}