{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"_hover\", \"_expanded\", \"_disabled\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Box from \"../../primitives/Box\";\nimport { AccordionItemContext } from \"./Context\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar AccordionSummary = function AccordionSummary(_ref2, ref) {\n  var children = _ref2.children,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var _React$useContext = React.useContext(AccordionItemContext),\n    index = _React$useContext.index,\n    isOpen = _React$useContext.isOpen,\n    isDisabled = _React$useContext.isDisabled,\n    onOpen = _React$useContext.onOpen,\n    onClose = _React$useContext.onClose;\n  var _useThemeProps = useThemeProps('AccordionSummary', props),\n    _hover = _useThemeProps._hover,\n    _expanded = _useThemeProps._expanded,\n    _disabled = _useThemeProps._disabled,\n    themedProps = _objectWithoutProperties(_useThemeProps, _excluded2);\n  var pressHandler = function pressHandler() {\n    isOpen ? onClose && onClose() : onOpen && onOpen();\n  };\n  var _ref = React.useRef(null);\n  var _useHover = useHover({}, _ref),\n    isHovered = _useHover.isHovered;\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(TouchableOpacity, {\n    activeOpacity: 0.2,\n    disabled: isDisabled,\n    onPress: pressHandler,\n    accessible: true,\n    accessibilityRole: \"checkbox\",\n    ref: mergeRefs([ref, _ref])\n  }, React.createElement(Box, _extends({\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  }, themedProps, isHovered && _hover, isOpen && _expanded, isDisabled && _disabled, !index && {\n    borderTopColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    disabled: isDisabled,\n    cursor: isDisabled ? 'not-allowed' : 'auto'\n  } : {}), children));\n};\nexport default React.memo(React.forwardRef(AccordionSummary));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAEA,OAAOC,GAAP;AAKA,SAASC,oBAAT;AACA,SAASC,aAAT;AACA,SAASC,SAAT;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,qBAAT;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,QAEpBC,GAFuB,EAGpB;EAAA,IAFDC,QAAF,SAAEA,QAAF;IAAeC;EAGf,wBAMgCV,KAAK,CAACW,UAAN,CAAiBT,oBAAjB,CANhC;IACEU,KADI,qBACJA,KADI;IAEJC,MAFI,qBAEJA,MAFI;IAGJC,UAHI,qBAGJA,UAHI;IAIJC,MAJI,qBAIJA,MAJI;IAKJC;EAGF,qBAAyDb,aAAa,CACpE,kBADoE,EAEpEO,KAFoE,CAAtE;IAAQO,MAAF,kBAAEA,MAAF;IAAUC,SAAV,kBAAUA,SAAV;IAAqBC,SAArB,kBAAqBA,SAArB;IAAmCC;EAIzC,IAAMC,YAAY,GAAG,SAAfA,YAAY,GAAS;IACzBR,MAAM,GAAGG,OAAO,IAAIA,OAAO,EAArB,GAA0BD,MAAM,IAAIA,MAAM,EAAhD;EACD,CAFD;EAIA,IAAMO,IAAI,GAAGtB,KAAK,CAACuB,MAAN,CAAa,IAAb,CAAb;EACA,gBAAsBlB,QAAQ,CAAC,EAAD,EAAKiB,IAAL,CAA9B;IAAQE;EAER,IAAIlB,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACEV,oBAACyB,gBAAD;IACEC,aAAa,EAAE,GADjB;IAEEC,QAAQ,EAAEb,UAFZ;IAGEc,OAAO,EAAEP,YAHX;IAIEQ,UAAU,MAJZ;IAKEC,iBAAiB,EAAC,UALpB;IAMEtB,GAAG,EAAEJ,SAAS,CAAC,CAACI,GAAD,EAAMc,IAAN,CAAD;EANhB,GAQEtB,oBAACC,GAAD;IACE8B,OAAO,EAAC,MADV;IAEEC,aAAa,EAAC,KAFhB;IAGEC,cAAc,EAAC,eAHjB;IAIEC,UAAU,EAAC;EAJb,GAKMd,WALN,EAMOI,SAAS,IAAIP,MANpB,EAOOJ,MAAM,IAAIK,SAPjB,EAQOJ,UAAU,IAAIK,SARrB,EASO,CAACP,KAAD,IAAU;IAAEuB,cAAc,EAAE;EAAlB,CATjB,EAUOC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACD;IACEV,QAAQ,EAAEb,UADZ;IAEEwB,MAAM,EAAExB,UAAU,GAAG,aAAH,GAAmB;EAFvC,CADC,GAKD,EAfN,GAiBGL,QAjBH,CARF,CADF;AA8BD,CAxDD;AA0DA,eAAeT,KAAK,CAACuC,IAAN,CAAWvC,KAAK,CAACwC,UAAN,CAAiBjC,gBAAjB,CAAX,CAAf","names":["React","Box","AccordionItemContext","useThemeProps","mergeRefs","useHover","useHasResponsiveProps","AccordionSummary","ref","children","props","useContext","index","isOpen","isDisabled","onOpen","onClose","_hover","_expanded","_disabled","themedProps","pressHandler","_ref","useRef","isHovered","TouchableOpacity","activeOpacity","disabled","onPress","accessible","accessibilityRole","display","flexDirection","justifyContent","alignItems","borderTopColor","Platform","OS","cursor","memo","forwardRef"],"sources":["AccordionSummary.tsx"],"sourcesContent":["import React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport Box from '../../primitives/Box';\nimport type {\n  IAccordionSummaryProps,\n  IAccordionItemContextProps,\n} from './types';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionSummary = (\n  { children, ...props }: IAccordionSummaryProps,\n  ref: any\n) => {\n  const {\n    index,\n    isOpen,\n    isDisabled,\n    onOpen,\n    onClose,\n  }: IAccordionItemContextProps = React.useContext(AccordionItemContext);\n\n  const { _hover, _expanded, _disabled, ...themedProps } = useThemeProps(\n    'AccordionSummary',\n    props\n  );\n  const pressHandler = () => {\n    isOpen ? onClose && onClose() : onOpen && onOpen();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <TouchableOpacity\n      activeOpacity={0.2}\n      disabled={isDisabled}\n      onPress={pressHandler}\n      accessible\n      accessibilityRole=\"checkbox\"\n      ref={mergeRefs([ref, _ref])}\n    >\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        {...themedProps}\n        {...(isHovered && _hover)}\n        {...(isOpen && _expanded)}\n        {...(isDisabled && _disabled)}\n        {...(!index && { borderTopColor: 'transparent' })}\n        {...(Platform.OS === 'web'\n          ? {\n              disabled: isDisabled,\n              cursor: isDisabled ? 'not-allowed' : 'auto',\n            }\n          : {})}\n      >\n        {children}\n      </Box>\n    </TouchableOpacity>\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionSummary));\n"]},"metadata":{},"sourceType":"module"}