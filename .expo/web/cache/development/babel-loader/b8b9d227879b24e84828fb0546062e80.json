{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { AlertDialogContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar AlertDialogContent = function AlertDialogContent(props, ref) {\n  var newProps = usePropsResolution('AlertDialogContent', props);\n  var _React$useContext = React.useContext(AlertDialogContext),\n    contentSize = _React$useContext.contentSize,\n    initialFocusRef = _React$useContext.initialFocusRef,\n    finalFocusRef = _React$useContext.finalFocusRef,\n    handleClose = _React$useContext.handleClose;\n  React.useEffect(function () {\n    var finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n    return function () {\n      if (finalRefVal) {\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, _extends({}, contentSize, newProps, {\n    ref: ref,\n    onAccessibilityEscape: handleClose,\n    \"aria-modal\": \"true\",\n    accessibilityRole: \"alert\",\n    accessibilityViewIsModal: true\n  }));\n};\nexport default memo(forwardRef(AlertDialogContent));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP;AACA,SAASC,kBAAT;AACA,SAASC,kBAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,KAAD,EAAmBC,GAAnB,EAAiC;EAC1D,IAAMC,QAAQ,GAAGN,kBAAkB,CAAC,oBAAD,EAAuBI,KAAvB,CAAnC;EACA,wBAKIR,KAAK,CAACW,UAAN,CAAiBN,kBAAjB,CALJ;IACEO,WADI,qBACJA,WADI;IAEJC,eAFI,qBAEJA,eAFI;IAGJC,aAHI,qBAGJA,aAHI;IAIJC;EAEFf,KAAK,CAACgB,SAAN,CAAgB,YAAM;IACpB,IAAMC,WAAW,GAAGH,aAAa,GAAGA,aAAa,CAACI,OAAjB,GAA2B,IAA5D;IACA,IAAIL,eAAe,IAAIA,eAAe,CAACK,OAAvC,EAAgD;MAE9CL,eAAe,CAACK,OAAhB,CAAwBC,KAAxB;IACD;IAED,OAAO,YAAM;MACX,IAAIF,WAAJ,EAAiB;QAEfA,WAAW,CAACE,KAAZ;MACD;IACF,CALD;EAMD,CAbD,EAaG,CAACN,eAAD,EAAkBC,aAAlB,CAbH;EAgBA,IAAIR,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACER,oBAACG,GAAD,eACMS,WADN,EAEMF,QAFN;IAGED,GAAG,EAAEA,GAHP;IAIEW,qBAAqB,EAAEL,WAJzB;IAME,cAAW,MANb;IAQEM,iBAAiB,EAAC,OARpB;IASEC,wBAAwB;EAT1B,GADF;AAaD,CAxCD;AA0CA,eAAerB,IAAI,CAACC,UAAU,CAACK,kBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","AlertDialogContext","useHasResponsiveProps","AlertDialogContent","props","ref","newProps","useContext","contentSize","initialFocusRef","finalFocusRef","handleClose","useEffect","finalRefVal","current","focus","onAccessibilityEscape","accessibilityRole","accessibilityViewIsModal"],"sources":["AlertDialogContent.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogContent = (props: IBoxProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...newProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole=\"alert\"\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(AlertDialogContent));\n"]},"metadata":{},"sourceType":"module"}