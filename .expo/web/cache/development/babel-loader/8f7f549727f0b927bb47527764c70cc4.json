{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\", \"isFocusVisible\", \"variant\"],\n  _excluded2 = [\"onValueChange\", \"selectedValue\", \"children\", \"dropdownIcon\", \"dropdownCloseIcon\", \"dropdownOpenIcon\", \"placeholder\", \"accessibilityLabel\", \"defaultValue\", \"_item\", \"_selectedItem\", \"onOpen\", \"onClose\", \"optimized\", \"_customDropdownIconProps\", \"_actionSheet\", \"_actionSheetContent\", \"_actionSheetBody\", \"_webSelect\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Actionsheet } from \"../../composites/Actionsheet\";\nimport Box from \"../Box\";\nimport { Input } from \"../Input\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from \"../../../hooks\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { ChevronDownIcon } from \"../Icon/Icons\";\nimport { ScrollView } from \"../../basic/ScrollView\";\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { FlatList } from \"../../basic/FlatList\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { Pressable } from \"../Pressable\";\nexport var SelectContext = React.createContext({\n  onValueChange: function onValueChange() {},\n  selectedValue: null,\n  _selectedItem: {},\n  _item: {}\n});\nvar Select = function Select(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n    isFocusedProp = _ref2.isFocused,\n    isFocusVisibleProp = _ref2.isFocusVisible,\n    variant = _ref2.variant,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID\n  });\n  var flatListData = [];\n  var isDisabled = selectProps.disabled;\n  var tempFix = '__NativebasePlaceholder__';\n  var _ref = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isOpen = _React$useState2[0],\n    setIsOpen = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    isFocused = _React$useState4[0],\n    setIsFocused = _React$useState4[1];\n  var _useFocusRing = useFocusRing(),\n    focusProps = _useFocusRing.focusProps,\n    isFocusVisible = _useFocusRing.isFocusVisible;\n  var _useHover = useHover({\n      isDisabled: isDisabled\n    }, _ref),\n    hoverProps = _useHover.hoverProps,\n    isHovered = _useHover.isHovered;\n  var _usePropsResolution = usePropsResolution('Select', props, {\n      isDisabled: isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible\n    }, undefined),\n    onValueChange = _usePropsResolution.onValueChange,\n    selectedValue = _usePropsResolution.selectedValue,\n    children = _usePropsResolution.children,\n    dropdownIcon = _usePropsResolution.dropdownIcon,\n    dropdownCloseIcon = _usePropsResolution.dropdownCloseIcon,\n    dropdownOpenIcon = _usePropsResolution.dropdownOpenIcon,\n    placeholder = _usePropsResolution.placeholder,\n    accessibilityLabel = _usePropsResolution.accessibilityLabel,\n    defaultValue = _usePropsResolution.defaultValue,\n    _item = _usePropsResolution._item,\n    _selectedItem = _usePropsResolution._selectedItem,\n    onOpen = _usePropsResolution.onOpen,\n    onClose = _usePropsResolution.onClose,\n    optimized = _usePropsResolution.optimized,\n    _customDropdownIconProps = _usePropsResolution._customDropdownIconProps,\n    _actionSheet = _usePropsResolution._actionSheet,\n    _actionSheetContent = _usePropsResolution._actionSheetContent,\n    _actionSheetBody = _usePropsResolution._actionSheetBody,\n    _webSelect = _usePropsResolution._webSelect,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var _useControllableState = useControllableState({\n      value: selectedValue,\n      defaultValue: defaultValue,\n      onChange: function onChange(newValue) {\n        onValueChange && onValueChange(newValue);\n        setIsOpen(false);\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var itemsList = React.Children.toArray(children).map(function (child) {\n    var _child$props, _child$props2;\n    return {\n      label: child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.label,\n      value: child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.value\n    };\n  });\n  var selectedItemArray = itemsList.filter(function (item) {\n    return (item === null || item === void 0 ? void 0 : item.value) === value;\n  });\n  var selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  var contextValue = React.useMemo(function () {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},\n      _item: _item !== null && _item !== void 0 ? _item : {}\n    };\n  }, [value, setValue, _selectedItem, _item]);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  var rightIcon = isOpen && dropdownOpenIcon ? dropdownOpenIcon : !isOpen && dropdownCloseIcon ? dropdownCloseIcon : dropdownIcon ? dropdownIcon : React.createElement(ChevronDownIcon, _customDropdownIconProps);\n  var handleClose = function handleClose() {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n  if (optimized) {\n    React.Children.toArray(children).map(function (child) {\n      flatListData.push(child.props);\n    });\n  }\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), ['shadow', 'opacity'])),\n    _extractInObject2 = _slicedToArray(_extractInObject, 2),\n    layoutProps = _extractInObject2[0],\n    nonLayoutProps = _extractInObject2[1];\n  var commonInput = React.createElement(Input, _extends({\n    placeholder: placeholder,\n    InputRightElement: rightIcon\n  }, nonLayoutProps, {\n    isFocused: isFocused,\n    isHovered: isHovered,\n    \"aria-hidden\": true,\n    importantForAccessibility: \"no\",\n    value: selectedItem ? selectedItem.label : '',\n    editable: false,\n    focusable: false,\n    isDisabled: isDisabled,\n    pointerEvents: \"none\",\n    variant: variant\n  }));\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? React.createElement(React.Fragment, null, React.createElement(Pressable, _extends({\n    onPress: function onPress() {\n      Keyboard.dismiss();\n      setIsOpen(true);\n      onOpen && onOpen();\n    },\n    disabled: isDisabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    ref: mergeRefs([ref, _ref])\n  }, layoutProps), commonInput), React.createElement(Actionsheet, _extends({\n    isOpen: isOpen,\n    onClose: handleClose\n  }, _actionSheet), React.createElement(Actionsheet.Content, _actionSheetContent, optimized ? React.createElement(FlatList, _extends({}, _actionSheetBody, {\n    data: flatListData,\n    keyExtractor: function keyExtractor(_item, index) {\n      return index.toString();\n    },\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      var isSelected = selectedValue === (item === null || item === void 0 ? void 0 : item.value);\n      return React.createElement(Actionsheet.Item, _extends({\n        onPress: function onPress() {\n          if (!isDisabled) {\n            setValue(item === null || item === void 0 ? void 0 : item.value);\n          }\n        },\n        accessibilityState: {\n          selected: isSelected\n        }\n      }, item, _item, isSelected && _selectedItem), item === null || item === void 0 ? void 0 : item.label);\n    }\n  })) : React.createElement(ScrollView, _actionSheetBody, React.createElement(SelectContext.Provider, {\n    value: contextValue\n  }, children))))) : React.createElement(Box, layoutProps, React.createElement(\"select\", _extends({\n    \"aria-readonly\": selectProps.readOnly,\n    required: selectProps.required,\n    disabled: isDisabled\n  }, focusProps, hoverProps, {\n    ref: mergeRefs([ref, _ref]),\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n    },\n    value: selectedItem === null ? tempFix : value,\n    \"aria-label\": placeholder,\n    onFocus: function onFocus() {\n      setIsFocused(true);\n      onOpen && onOpen();\n    },\n    onBlur: function onBlur() {\n      setIsFocused(false);\n      onClose && onClose();\n    }\n  }, _webSelect), React.createElement(\"option\", {\n    disabled: true,\n    value: tempFix\n  }, placeholder), children), commonInput);\n};\nexport default memo(forwardRef(Select));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AAAA;AAAA;AAGA,SAASC,WAAT;AACA,OAAOC,GAAP;AACA,SAASC,KAAT;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,oBAAT;AACA,SAASC,kBAAT;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,SAAT;AACA,SAASC,cAAT;AACA,SAASC,eAAT;AAEA,SAASC,UAAT;AACA,SAASC,eAAT,EAA0BC,YAA1B;AACA,SAASC,QAAT;AACA,SAASC,qBAAT;AAEA,SAASC,SAAT;AAEA,OAAO,IAAMC,aAAa,GAAGnB,KAAK,CAACoB,aAAN,CAAoB;EAC/CC,aAAa,EAAG,yBAAM,CAAE,CADuB;EAE/CC,aAAa,EAAE,IAFgC;EAG/CC,aAAa,EAAE,EAHgC;EAI/CC,KAAK,EAAE;AAJwC,CAApB,CAAtB;AAOP,IAAMC,MAAM,GAAG,SAATA,MAAM,QAQVC,GARa,EASV;EAAA,IAPUC,aADb,SACEC,SAAS;IACEC,aAFb,SAEEC,SAAS;IACOC,kBAHlB,SAGEC,cAAc;IACdC,OAJF,SAIEA,OAJF;IAKKC;EAIL,IAAMC,WAAW,GAAGxB,cAAc,CAAC;IACjCyB,UAAU,EAAEF,KAAK,CAACE,UADe;IAEjCC,QAAQ,EAAEH,KAAK,CAACG;EAFiB,CAAD,CAAlC;EAIA,IAAMC,YAAgC,GAAG,EAAzC;EAEA,IAAMF,UAAU,GAAGD,WAAW,CAACI,QAA/B;EACA,IAAMC,OAAO,GAAG,2BAAhB;EACA,IAAMC,IAAI,GAAGzC,KAAK,CAAC0C,MAAN,CAAa,IAAb,CAAb;EAEA,sBAA4B1C,KAAK,CAAC2C,QAAN,CAAwB,KAAxB,CAA5B;IAAA;IAAOC,MAAD;IAASC,SAAT;EACN,uBAAkC7C,KAAK,CAAC2C,QAAN,CAAwB,KAAxB,CAAlC;IAAA;IAAOb,SAAD;IAAYgB,YAAZ;EAEN,oBAAuCxC,YAAY,EAAnD;IAAQyC,UAAF,iBAAEA,UAAF;IAAcf;EACpB,gBAAkCvB,QAAQ,CAAC;MAAE2B;IAAF,CAAD,EAAiBK,IAAjB,CAA1C;IAAQO,UAAF,aAAEA,UAAF;IAAcpB;EAEpB,0BAqBIpB,kBAAkB,CACpB,QADoB,EAEpB0B,KAFoB,EAGpB;MACEE,UADF,EACEA,UADF;MAEER,SAAS,EAAED,aAAa,IAAIC,SAF9B;MAGEE,SAAS,EAAED,aAAa,IAAIC,SAH9B;MAIEE,cAAc,EAAED,kBAAkB,IAAIC;IAJxC,CAHoB,EASpBiB,SAToB,CArBtB;IACE5B,aADI,uBACJA,aADI;IAEJC,aAFI,uBAEJA,aAFI;IAGJ4B,QAHI,uBAGJA,QAHI;IAIJC,YAJI,uBAIJA,YAJI;IAKJC,iBALI,uBAKJA,iBALI;IAMJC,gBANI,uBAMJA,gBANI;IAOJC,WAPI,uBAOJA,WAPI;IAQJC,kBARI,uBAQJA,kBARI;IASJC,YATI,uBASJA,YATI;IAUJhC,KAVI,uBAUJA,KAVI;IAWJD,aAXI,uBAWJA,aAXI;IAYJkC,MAZI,uBAYJA,MAZI;IAaJC,OAbI,uBAaJA,OAbI;IAcJC,SAdI,uBAcJA,SAdI;IAeJC,wBAfI,uBAeJA,wBAfI;IAgBJC,YAhBI,uBAgBJA,YAhBI;IAiBJC,mBAjBI,uBAiBJA,mBAjBI;IAkBJC,gBAlBI,uBAkBJA,gBAlBI;IAmBJC,UAnBI,uBAmBJA,UAnBI;IAoBDC;EAaL,4BAA0B1D,oBAAoB,CAAC;MAC7C2D,KAAK,EAAE5C,aADsC;MAE7CkC,YAF6C,EAE7CA,YAF6C;MAG7CW,QAAQ,EAAGC,0BAAD,EAAc;QACtB/C,aAAa,IAAIA,aAAa,CAAC+C,QAAD,CAA9B;QACAvB,SAAS,CAAC,KAAD,CAAT;MACD;IAN4C,CAAD,CAA9C;IAAA;IAAOqB,KAAD;IAAQG,QAAR;EASN,IAAMC,SAGJ,GAAGtE,KAAK,CAACuE,QAAN,CAAeC,OAAf,CAAuBtB,QAAvB,EAAiCuB,GAAjC,CAAsCC,eAAD,EAAgB;IAAA;IACxD,OAAO;MACLC,KAAK,EAAED,KAAF,aAAEA,KAAF,uCAAEA,KAAK,CAAExC,KAAT,iDAAE0C,aAAcD,KADhB;MAELT,KAAK,EAAEQ,KAAF,aAAEA,KAAF,wCAAEA,KAAK,CAAExC,KAAT,kDAAE2C,cAAcX;IAFhB,CAAP;EAID,CALI,CAHL;EAUA,IAAMY,iBAAiB,GAAGR,SAAS,CAACS,MAAV,CACvBC,cAAD;IAAA,OAAe,KAAI,SAAJ,QAAI,WAAJ,gBAAI,CAAEd,KAAN,MAAgBA,KADP;EAAA,EAA1B;EAIA,IAAMe,YAAY,GAChBH,iBAAiB,IAAIA,iBAAiB,CAACI,MAAvC,GAAgDJ,iBAAiB,CAAC,CAAD,CAAjE,GAAuE,IADzE;EAGA,IAAMK,YAAY,GAAGnF,KAAK,CAACoF,OAAN,CAAc,YAAM;IACvC,OAAO;MACL/D,aAAa,EAAEgD,QADV;MAEL/C,aAAa,EAAE4C,KAFV;MAGL3C,aAAa,EAAEA,aAAF,aAAEA,aAAF,cAAEA,aAAF,GAAmB,EAH3B;MAILC,KAAK,EAAEA,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAW;IAJX,CAAP;EAMD,CAPoB,EAOlB,CAAC0C,KAAD,EAAQG,QAAR,EAAkB9C,aAAlB,EAAiCC,KAAjC,CAPkB,CAArB;EAUA,IAAIP,qBAAqB,CAACiB,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,IAAMmD,SAAS,GACbzC,MAAM,IAAIS,gBAAV,GACEA,gBADF,GAEI,CAACT,MAAD,IAAWQ,iBAAX,GACFA,iBADE,GAEAD,YAAY,GACdA,YADc,GAGdnD,oBAACY,eAAD,EAAqBgD,wBAArB,CARJ;EAWA,IAAM0B,WAAW,GAAG,SAAdA,WAAW,GAAS;IACxBzC,SAAS,CAAC,KAAD,CAAT;IACAa,OAAO,IAAIA,OAAO,EAAlB;EACD,CAHD;EAKA,IAAIC,SAAJ,EAAe;IACb3D,KAAK,CAACuE,QAAN,CAAeC,OAAf,CAAuBtB,QAAvB,EAAiCuB,GAAjC,CAAsCC,eAAD,EAAgB;MACnDpC,YAAY,CAACiD,IAAb,CAAkBb,KAAK,CAACxC,KAAxB;IACD,CAFD;EAGD;EAED,uBAAsCpB,eAAe,CAACmD,aAAD,+BAChDlD,YAAY,CAACyE,MADmD,sBAEhEzE,YAAY,CAAC0E,OAFmD,sBAGhE1E,YAAY,CAAC2E,QAHmD,IAInE,QAJmE,EAKnE,SALmE,GAArE;IAAA;IAAOC,WAAD;IAAcC,cAAd;EAQN,IAAMC,WAAW,GACf7F,oBAACK,KAAD;IACEiD,WAAW,EAAEA,WADf;IAEEwC,iBAAiB,EAAET;EAFrB,GAGMO,cAHN;IAME9D,SAAS,EAAEA,SANb;IAOEF,SAAS,EAAEA,SAPb;IAQE,eAAa,IARf;IASEmE,yBAAyB,EAAC,IAT5B;IAUE7B,KAAK,EAAEe,YAAY,GAAGA,YAAY,CAACN,KAAhB,GAAwB,EAV7C;IAWEqB,QAAQ,EAAE,KAXZ;IAYEC,SAAS,EAAE,KAZb;IAaE7D,UAAU,EAAEA,UAbd;IAcE8D,aAAa,EAAC,MAdhB;IAeEjE,OAAO,EAAEA;EAfX,GADF;EAoBA,OAAOkE,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACC,EAAT,KAAgB,KAA7C,GACLpG,0CACEA,oBAACkB,SAAD;IACEmF,OAAO,EAAE,mBAAM;MACbC,QAAQ,CAACC,OAAT;MACA1D,SAAS,CAAC,IAAD,CAAT;MACAY,MAAM,IAAIA,MAAM,EAAhB;IACD,CALH;IAMElB,QAAQ,EAAEH,UANZ;IAOEmB,kBAAkB,EAAEA,kBAPtB;IAQEiD,iBAAiB,EAAC,QARpB;IASE9E,GAAG,EAAEhB,SAAS,CAAC,CAACgB,GAAD,EAAMe,IAAN,CAAD;EAThB,GAUMkD,WAVN,GAYGE,WAZH,CADF,EAeE7F,oBAACG,WAAD;IAAayC,MAAM,EAAEA,MAArB;IAA6Bc,OAAO,EAAE4B;EAAtC,GAAuDzB,YAAvD,GACE7D,oBAACG,WAAD,CAAasG,OAAb,EAAyB3C,mBAAzB,EAEGH,SAAS,GACR3D,oBAACgB,QAAD,eACM+C,gBADN;IAEE2C,IAAI,EAAEpE,YAFR;IAIEqE,YAAY,EAAE,sBAACnF,KAAD,EAAQoF,KAAR;MAAA,OAAkBA,KAAK,CAACC,QAAN,EAJlC;IAAA;IAKEC,UAAU,EAAE,2BAAmB;MAAA,IAAhB9B;MACb,IAAM+B,UAAU,GAAGzF,aAAa,MAAK0D,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEd,KAAX,CAAhC;MACA,OACElE,oBAACG,WAAD,CAAa6G,IAAb;QACEX,OAAO,EAAE,mBAAM;UACb,IAAI,CAACjE,UAAL,EAAiB;YACfiC,QAAQ,CAACW,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEd,KAAP,CAAR;UACD;QACF,CALH;QAME+C,kBAAkB,EAAE;UAAEC,QAAQ,EAAEH;QAAZ;MANtB,GAOM/B,IAPN,EAQMxD,KARN,EASOuF,UAAU,IAAIxF,aATrB,GAWGyD,IAXH,aAWGA,IAXH,uBAWGA,IAAI,CAAEL,KAXT,CADF;IAeD;EAtBH,GADQ,GA0BR3E,oBAACa,UAAD,EAAgBkD,gBAAhB,EACE/D,oBAACmB,aAAD,CAAegG,QAAf;IAAwBjD,KAAK,EAAEiB;EAA/B,GACGjC,QADH,CADF,CA5BJ,CADF,CAfF,CADK,GAuDLlD,oBAACI,GAAD,EAASuF,WAAT,EAEE3F;IACE,iBAAemC,WAAW,CAACiF,QAD7B;IAEEC,QAAQ,EAAElF,WAAW,CAACkF,QAFxB;IAGE9E,QAAQ,EAAEH;EAHZ,GAIMW,UAJN,EAKMC,UALN;IAMEtB,GAAG,EAAEhB,SAAS,CAAC,CAACgB,GAAD,EAAMe,IAAN,CAAD,CANhB;IAQE0B,QAAQ,EAAGmD,mBAAD,EAAO;MACfjD,QAAQ,CAACiD,CAAC,CAACC,MAAF,CAASrD,KAAV,CAAR;IACD,CAVH;IAWEA,KAAK,EAAEe,YAAY,KAAK,IAAjB,GAAwBzC,OAAxB,GAAkC0B,KAX3C;IAYE,cAAYZ,WAZd;IAaEkE,OAAO,EAAE,mBAAM;MACb1E,YAAY,CAAC,IAAD,CAAZ;MACAW,MAAM,IAAIA,MAAM,EAAhB;IACD,CAhBH;IAiBEgE,MAAM,EAAE,kBAAM;MACZ3E,YAAY,CAAC,KAAD,CAAZ;MACAY,OAAO,IAAIA,OAAO,EAAlB;IACD;EApBH,GAqBMM,UArBN,GAuBEhE;IAAQuC,QAAQ,MAAhB;IAAiB2B,KAAK,EAAE1B;EAAxB,GACGc,WADH,CAvBF,EA0BGJ,QA1BH,CAFF,EA+BG2C,WA/BH,CAvDF;AAyFD,CA9OD;AAgPA,eAAe3F,IAAI,CAACD,UAAU,CAACwB,MAAD,CAAX,CAAnB","names":["React","forwardRef","memo","Actionsheet","Box","Input","useFocusRing","useControllableState","usePropsResolution","useHover","mergeRefs","useFormControl","ChevronDownIcon","ScrollView","extractInObject","stylingProps","FlatList","useHasResponsiveProps","Pressable","SelectContext","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","ref","isHoveredProp","isHovered","isFocusedProp","isFocused","isFocusVisibleProp","isFocusVisible","variant","props","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","useState","isOpen","setIsOpen","setIsFocused","focusProps","hoverProps","undefined","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","_customDropdownIconProps","_actionSheet","_actionSheetContent","_actionSheetBody","_webSelect","resolvedProps","value","onChange","newValue","setValue","itemsList","Children","toArray","map","child","label","_child$props","_child$props2","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","margin","flexbox","position","layoutProps","nonLayoutProps","commonInput","InputRightElement","importantForAccessibility","editable","focusable","pointerEvents","Platform","OS","onPress","Keyboard","dismiss","accessibilityRole","Content","data","keyExtractor","index","toString","renderItem","isSelected","Item","accessibilityState","selected","Provider","readOnly","required","e","target","onFocus","onBlur"],"sources":["Select.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    _customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{\n    label: string;\n    value: string;\n  }> = React.Children.toArray(children).map((child: any) => {\n    return {\n      label: child?.props?.label,\n      value: child?.props?.value,\n    };\n  });\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item?.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {..._customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map((child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...nonLayoutProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n      variant={variant}\n    />\n  );\n\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose} {..._actionSheet}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item?.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item?.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item?.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  ) : (\n    <Box {...layoutProps}>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]},"metadata":{},"sourceType":"module"}