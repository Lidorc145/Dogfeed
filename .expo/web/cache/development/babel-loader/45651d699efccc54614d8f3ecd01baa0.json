{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport { Box, Button, KeyboardAvoidingView, Text, useToast } from 'native-base';\nimport { FormInput } from \"../components/form-input\";\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { newEmailSchema } from \"../utils/schemas\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useUpdateEmailMutation } from \"../services\";\nimport { useAppSelector } from \"../ducks/useful-hooks\";\nimport { AlertToast } from \"../components/alert-toast\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var ChangeEmailScreen = function ChangeEmailScreen(_ref) {\n  var _errors$oldEmail, _errors$password, _errors$newEmail;\n  var navigation = _ref.navigation;\n  var user = useAppSelector(function (state) {\n    return state.user;\n  });\n  var _useUpdateEmailMutati = useUpdateEmailMutation(),\n    _useUpdateEmailMutati2 = _slicedToArray(_useUpdateEmailMutati, 2),\n    setNewEmail = _useUpdateEmailMutati2[0],\n    _useUpdateEmailMutati3 = _useUpdateEmailMutati2[1],\n    isLoading = _useUpdateEmailMutati3.isLoading,\n    isSuccess = _useUpdateEmailMutati3.isSuccess,\n    isError = _useUpdateEmailMutati3.isError,\n    error = _useUpdateEmailMutati3.error;\n  var _useForm = useForm({\n      resolver: yupResolver(newEmailSchema)\n    }),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    errors = _useForm.formState.errors;\n  var toast = useToast();\n  useEffect(function () {\n    if (!isLoading && isSuccess) {\n      toast.show({\n        placement: 'bottom',\n        render: function render() {\n          return _jsx(AlertToast, {\n            title: \"Email Changed!\",\n            type: \"success\",\n            message: \"Your email has been successfully changed.\",\n            toExit: function toExit() {\n              return toast.close('email-toast');\n            }\n          });\n        },\n        id: 'email-toast'\n      });\n      navigation.goBack();\n    }\n  }, [isLoading, isSuccess, navigation, toast]);\n  var updatePassword = function _callee(_ref2) {\n    var oldEmail, password, newEmail;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            oldEmail = _ref2.oldEmail, password = _ref2.password, newEmail = _ref2.newEmail;\n            setNewEmail({\n              userID: user.id,\n              oldEmail: oldEmail,\n              password: password,\n              newEmail: newEmail\n            });\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  return _jsx(KeyboardAvoidingView, {\n    h: {\n      lg: 'auto'\n    },\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    onTouchStart: function onTouchStart() {\n      return Keyboard.dismiss();\n    },\n    w: \"100%\",\n    children: _jsxs(Box, {\n      px: 5,\n      mt: 5,\n      children: [_jsx(FormInput, {\n        mt: 1,\n        name: \"oldEmail\",\n        control: control,\n        isInvalid: 'oldEmail' in errors,\n        label: \"Enter your old email\",\n        placeholder: \"Old Email\",\n        defaultValue: user != null && user.email ? user.email : '',\n        errorMessage: errors == null ? void 0 : (_errors$oldEmail = errors.oldEmail) == null ? void 0 : _errors$oldEmail.message\n      }, \"oldEmail\"), _jsx(FormInput, {\n        name: \"password\",\n        control: control,\n        isInvalid: 'password' in errors,\n        password: true,\n        label: \"Enter your password\",\n        placeholder: \"Password\",\n        defaultValue: \"\",\n        errorMessage: errors == null ? void 0 : (_errors$password = errors.password) == null ? void 0 : _errors$password.message\n      }, \"password\"), _jsx(FormInput, {\n        name: \"newEmail\",\n        control: control,\n        isInvalid: 'newEmail' in errors,\n        label: \"Enter your new email\",\n        placeholder: \"New Email\",\n        defaultValue: \"\",\n        errorMessage: errors == null ? void 0 : (_errors$newEmail = errors.newEmail) == null ? void 0 : _errors$newEmail.message\n      }, \"newEmail\"), isError ? _jsx(Text, {\n        color: \"danger.600\",\n        textAlign: \"center\",\n        mt: 5,\n        children: error == null ? void 0 : error.message\n      }) : null, _jsx(Button, {\n        isLoading: isLoading,\n        mt: 8,\n        onPress: handleSubmit(updatePassword),\n        children: \"Update Email\"\n      }), _jsx(Button, {\n        colorScheme: \"danger\",\n        variant: \"ghost\",\n        my: 5,\n        onPress: navigation.goBack,\n        children: \"Cancel\"\n      })]\n    })\n  });\n};","map":{"version":3,"names":["React","useEffect","Box","Button","KeyboardAvoidingView","Text","useToast","FormInput","useForm","yupResolver","newEmailSchema","useUpdateEmailMutation","useAppSelector","AlertToast","ChangeEmailScreen","navigation","user","state","setNewEmail","isLoading","isSuccess","isError","error","resolver","control","handleSubmit","errors","formState","toast","show","placement","render","close","id","goBack","updatePassword","oldEmail","password","newEmail","userID","lg","Platform","OS","Keyboard","dismiss","email","message"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/screens/change-email.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Box, Button, KeyboardAvoidingView, Text, useToast } from 'native-base';\nimport { FormInput } from 'src/components/form-input';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { newEmailSchema, NewEmailSchemaType } from 'src/utils/schemas';\nimport { Keyboard, Platform } from 'react-native';\nimport { SettingStackParams } from 'src/navigation/settings-stack';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport { useUpdateEmailMutation } from 'src/services';\nimport { useAppSelector } from 'src/ducks/useful-hooks';\nimport { AlertToast } from 'src/components/alert-toast';\n\ntype ChangeEmailScreenProps = StackScreenProps<SettingStackParams, 'Email'>;\n\nexport /**\n * Change Email screen, will display the form that allows user\n * to change their email\n *\n * @param {*} { navigation }\n * @return {*}\n */\nconst ChangeEmailScreen: React.FC<ChangeEmailScreenProps> = ({ navigation }) => {\n    // declare hooks\n    const user = useAppSelector((state) => state.user);\n    const [setNewEmail, { isLoading, isSuccess, isError, error }] = useUpdateEmailMutation();\n    // form validation\n    const {\n        control,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<NewEmailSchemaType>({\n        resolver: yupResolver(newEmailSchema),\n    });\n    // declare toast\n    const toast = useToast();\n\n    // effect hook for navigating back to the setting screen\n    useEffect(() => {\n        if (!isLoading && isSuccess) {\n            toast.show({\n                placement: 'bottom',\n                render: () => (\n                    <AlertToast\n                        title=\"Email Changed!\"\n                        type=\"success\"\n                        message=\"Your email has been successfully changed.\"\n                        toExit={() => toast.close('email-toast')}\n                    />\n                ),\n                id: 'email-toast',\n            });\n            navigation.goBack();\n        }\n    }, [isLoading, isSuccess, navigation, toast]);\n\n    const updatePassword = async ({ oldEmail, password, newEmail }: NewEmailSchemaType) => {\n        setNewEmail({ userID: user.id, oldEmail, password, newEmail });\n    };\n\n    return (\n        <KeyboardAvoidingView\n            h={{\n                lg: 'auto',\n            }}\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            onTouchStart={() => Keyboard.dismiss()}\n            w=\"100%\">\n            <Box px={5} mt={5}>\n                <FormInput\n                    mt={1}\n                    key=\"oldEmail\"\n                    name=\"oldEmail\"\n                    control={control}\n                    isInvalid={'oldEmail' in errors}\n                    label=\"Enter your old email\"\n                    placeholder=\"Old Email\"\n                    defaultValue={user?.email ? user.email : ''}\n                    errorMessage={errors?.oldEmail?.message}\n                />\n                <FormInput\n                    key=\"password\"\n                    name=\"password\"\n                    control={control}\n                    isInvalid={'password' in errors}\n                    password\n                    label=\"Enter your password\"\n                    placeholder=\"Password\"\n                    defaultValue=\"\"\n                    errorMessage={errors?.password?.message}\n                />\n                <FormInput\n                    key=\"newEmail\"\n                    name=\"newEmail\"\n                    control={control}\n                    isInvalid={'newEmail' in errors}\n                    label=\"Enter your new email\"\n                    placeholder=\"New Email\"\n                    defaultValue=\"\"\n                    errorMessage={errors?.newEmail?.message}\n                />\n                {isError ? (\n                    <Text color=\"danger.600\" textAlign=\"center\" mt={5}>\n                        {error?.message}\n                    </Text>\n                ) : null}\n                <Button isLoading={isLoading} mt={8} onPress={handleSubmit(updatePassword)}>\n                    Update Email\n                </Button>\n                <Button colorScheme=\"danger\" variant=\"ghost\" my={5} onPress={navigation.goBack}>\n                    Cancel\n                </Button>\n            </Box>\n        </KeyboardAvoidingView>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}