{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"index\", \"defaultIndex\", \"allowMultiple\", \"allowToggle\", \"onChange\"],\n  _excluded2 = [\"endingHeight\", \"startingHeight\", \"duration\", \"isOpen\", \"onAnimationEnd\", \"onAnimationStart\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport Box from \"../../primitives/Box\";\nimport { useThemeProps } from \"../../../hooks\";\nimport getIndexedChildren from \"../../../utils/getIndexedChildren\";\nimport { AccordionContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Accordion = function Accordion(_ref, ref) {\n  var children = _ref.children,\n    pIndex = _ref.index,\n    defaultIndex = _ref.defaultIndex,\n    allowMultiple = _ref.allowMultiple,\n    allowToggle = _ref.allowToggle,\n    onChange = _ref.onChange,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useThemeProps = useThemeProps('Accordion', props),\n    endingHeight = _useThemeProps.endingHeight,\n    startingHeight = _useThemeProps.startingHeight,\n    duration = _useThemeProps.duration,\n    isOpen = _useThemeProps.isOpen,\n    onAnimationEnd = _useThemeProps.onAnimationEnd,\n    onAnimationStart = _useThemeProps.onAnimationStart,\n    newProps = _objectWithoutProperties(_useThemeProps, _excluded2);\n  var _React$useState = React.useState(pIndex || defaultIndex || []),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    index = _React$useState2[0],\n    setIndex = _React$useState2[1];\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  var changeHandler = function changeHandler(isOpening, activeIndex) {\n    var indexCopy = index.map(function (i) {\n      return i;\n    });\n    if (allowToggle) {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        setIndex(index.splice(index.indexOf(activeIndex), 1));\n      }\n    } else {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        indexCopy = indexCopy.filter(function (n) {\n          return n !== activeIndex;\n        });\n        setIndex(indexCopy);\n      }\n    }\n    onChange && onChange(indexCopy);\n  };\n  return React.createElement(AccordionContext.Provider, {\n    value: {\n      index: index,\n      changeHandler: changeHandler,\n      AnimationProps: {\n        endingHeight: endingHeight,\n        startingHeight: startingHeight,\n        duration: duration,\n        isOpen: isOpen,\n        onAnimationEnd: onAnimationEnd,\n        onAnimationStart: onAnimationStart\n      }\n    }\n  }, React.createElement(Box, _extends({\n    overflow: \"hidden\"\n  }, newProps, {\n    ref: ref\n  }), getIndexedChildren(children)));\n};\nexport default React.memo(React.forwardRef(Accordion));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP;AAEA,SAASC,aAAT;AACA,OAAOC,kBAAP;AACA,SAASC,gBAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAS,OAUbC,GAVgB,EAWb;EAAA,IATDC,QADF,QACEA,QADF;IAESC,MAFT,QAEEC,KAAK;IACLC,YAHF,QAGEA,YAHF;IAIEC,aAJF,QAIEA,aAJF;IAKEC,WALF,QAKEA,WALF;IAMEC,QANF,QAMEA,QANF;IAOKC;EAIL,qBAQIb,aAAa,CAAC,WAAD,EAAca,KAAd,CARjB;IACEC,YADI,kBACJA,YADI;IAEJC,cAFI,kBAEJA,cAFI;IAGJC,QAHI,kBAGJA,QAHI;IAIJC,MAJI,kBAIJA,MAJI;IAKJC,cALI,kBAKJA,cALI;IAMJC,gBANI,kBAMJA,gBANI;IAODC;EAGL,sBAA0BtB,KAAK,CAACuB,QAAN,CAAed,MAAM,IAAIE,YAAV,IAA0B,EAAzC,CAA1B;IAAA;IAAOD,KAAD;IAAQc,QAAR;EAEN,IAAInB,qBAAqB,CAACU,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,IAAMU,aAAa,GAAG,SAAhBA,aAAa,CAAIC,SAAD,EAAqBC,WAArB,EAA6C;IACjE,IAAIC,SAAS,GAAGlB,KAAK,CAACmB,GAAN,CAAWC,WAAD;MAAA,OAAeA,CAAzB;IAAA,EAAhB;IACA,IAAIjB,WAAJ,EAAiB;MACf,IAAIa,SAAJ,EAAe;QACbE,SAAS,CAACG,IAAV,CAAeJ,WAAf;QACAf,aAAa,GAAGY,QAAQ,CAACI,SAAD,CAAX,GAAyBJ,QAAQ,CAAC,CAACG,WAAD,CAAD,CAA9C;MACD,CAHD,MAGO;QACLH,QAAQ,CAACd,KAAK,CAACsB,MAAN,CAAatB,KAAK,CAACuB,OAAN,CAAcN,WAAd,CAAb,EAAyC,CAAzC,CAAD,CAAR;MACD;IACF,CAPD,MAOO;MACL,IAAID,SAAJ,EAAe;QACbE,SAAS,CAACG,IAAV,CAAeJ,WAAf;QACAf,aAAa,GAAGY,QAAQ,CAACI,SAAD,CAAX,GAAyBJ,QAAQ,CAAC,CAACG,WAAD,CAAD,CAA9C;MACD,CAHD,MAGO;QACLC,SAAS,GAAGA,SAAS,CAACM,MAAV,CAAkBC,WAAD;UAAA,OAAYA,CAAC,KAAKR,WAAnC;QAAA,EAAZ;QACAH,QAAQ,CAACI,SAAD,CAAR;MACD;IACF;IACDd,QAAQ,IAAIA,QAAQ,CAACc,SAAD,CAApB;EACD,CAnBD;EAoBA,OACE5B,oBAACI,gBAAD,CAAkBgC,QAAlB;IACEC,KAAK,EAAE;MACL3B,KAAK,EAAEA,KADF;MAELe,aAFK,EAELA,aAFK;MAGLa,cAAc,EAAE;QACdtB,YADc,EACdA,YADc;QAEdC,cAFc,EAEdA,cAFc;QAGdC,QAHc,EAGdA,QAHc;QAIdC,MAJc,EAIdA,MAJc;QAKdC,cALc,EAKdA,cALc;QAMdC;MANc;IAHX;EADT,GAcErB,oBAACC,GAAD;IAAKsC,QAAQ,EAAC;EAAd,GAA2BjB,QAA3B;IAAqCf,GAAG,EAAEA;EAA1C,IACGJ,kBAAkB,CAACK,QAAD,CADrB,CAdF,CADF;AAoBD,CAnED;AAqEA,eAAeR,KAAK,CAACwC,IAAN,CAAWxC,KAAK,CAACyC,UAAN,CAAiBnC,SAAjB,CAAX,CAAf","names":["React","Box","useThemeProps","getIndexedChildren","AccordionContext","useHasResponsiveProps","Accordion","ref","children","pIndex","index","defaultIndex","allowMultiple","allowToggle","onChange","props","endingHeight","startingHeight","duration","isOpen","onAnimationEnd","onAnimationStart","newProps","useState","setIndex","changeHandler","isOpening","activeIndex","indexCopy","map","i","push","splice","indexOf","filter","n","Provider","value","AnimationProps","overflow","memo","forwardRef"],"sources":["Accordion.tsx"],"sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport type { IAccordionProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport getIndexedChildren from '../../../utils/getIndexedChildren';\nimport { AccordionContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Accordion = (\n  {\n    children,\n    index: pIndex,\n    defaultIndex,\n    allowMultiple,\n    allowToggle,\n    onChange,\n    ...props\n  }: IAccordionProps,\n  ref: any\n) => {\n  const {\n    endingHeight,\n    startingHeight,\n    duration,\n    isOpen,\n    onAnimationEnd,\n    onAnimationStart,\n    ...newProps\n  } = useThemeProps('Accordion', props);\n\n  const [index, setIndex] = React.useState(pIndex || defaultIndex || []);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  const changeHandler = (isOpening: boolean, activeIndex: number) => {\n    let indexCopy = index.map((i: number) => i);\n    if (allowToggle) {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        setIndex(index.splice(index.indexOf(activeIndex), 1));\n      }\n    } else {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        indexCopy = indexCopy.filter((n: any) => n !== activeIndex);\n        setIndex(indexCopy);\n      }\n    }\n    onChange && onChange(indexCopy);\n  };\n  return (\n    <AccordionContext.Provider\n      value={{\n        index: index,\n        changeHandler,\n        AnimationProps: {\n          endingHeight,\n          startingHeight,\n          duration,\n          isOpen,\n          onAnimationEnd,\n          onAnimationStart,\n        },\n      }}\n    >\n      <Box overflow=\"hidden\" {...newProps} ref={ref}>\n        {getIndexedChildren(children)}\n      </Box>\n    </AccordionContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(Accordion));\n"]},"metadata":{},"sourceType":"module"}