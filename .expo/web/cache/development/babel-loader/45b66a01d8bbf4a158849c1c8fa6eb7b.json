{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport { useMemo as $58Phs$useMemo, useEffect as $58Phs$useEffect } from \"react\";\nimport { useMultipleSelectionState as $58Phs$useMultipleSelectionState, SelectionManager as $58Phs$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $58Phs$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $58Phs$useControlledState } from \"@react-stately/utils\";\nvar tmp = Symbol.iterator;\nvar $a02d57049d202695$export$d085fb9e920b5ca7 = function () {\n  function $a02d57049d202695$export$d085fb9e920b5ca7(nodes) {\n    var _this = this;\n    _classCallCheck(this, $a02d57049d202695$export$d085fb9e920b5ca7);\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    var visit = function visit(node) {\n      _this.keyMap.set(node.key, node);\n      if (node.childNodes && node.type === 'section') {\n        for (var _iterator = _createForOfIteratorHelperLoose(node.childNodes), _step; !(_step = _iterator()).done;) {\n          var child = _step.value;\n          visit(child);\n        }\n      }\n    };\n    for (var _iterator2 = _createForOfIteratorHelperLoose(nodes), _step2; !(_step2 = _iterator2()).done;) {\n      var node2 = _step2.value;\n      visit(node2);\n    }\n    var last;\n    var index = 0;\n    for (var _iterator3 = _createForOfIteratorHelperLoose(this.keyMap), _step3; !(_step3 = _iterator3()).done;) {\n      var _ref = _step3.value;\n      var _ref2 = _slicedToArray(_ref, 2);\n      var key = _ref2[0];\n      var node1 = _ref2[1];\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n      if (node1.type === 'item') node1.index = index++;\n      last = node1;\n      last.nextKey = undefined;\n    }\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n  _createClass($a02d57049d202695$export$d085fb9e920b5ca7, [{\n    key: tmp,\n    value: _regeneratorRuntime.mark(function value() {\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(this.iterable, \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.keyMap.size;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      return this.firstKey;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      return this.lastKey;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n      return this.getItem(keys[idx]);\n    }\n  }]);\n  return $a02d57049d202695$export$d085fb9e920b5ca7;\n}();\nfunction $e72dd72e1c76a225$export$2f645645f7bca764(props) {\n  var filter = props.filter;\n  var selectionState = $58Phs$useMultipleSelectionState(props);\n  var disabledKeys = $58Phs$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var factory = function factory(nodes) {\n    return filter ? new $a02d57049d202695$export$d085fb9e920b5ca7(filter(nodes)) : new $a02d57049d202695$export$d085fb9e920b5ca7(nodes);\n  };\n  var context = $58Phs$useMemo(function () {\n    return {\n      suppressTextValueWarning: props.suppressTextValueWarning\n    };\n  }, [props.suppressTextValueWarning]);\n  var collection = $58Phs$useCollection(props, factory, context, [filter]);\n  $58Phs$useEffect(function () {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [collection, selectionState.focusedKey]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: new $58Phs$SelectionManager(collection, selectionState)\n  };\n}\nfunction $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {\n  var _defaultSelectedKey;\n  var _$58Phs$useControlled = $58Phs$useControlledState(props.selectedKey, (_defaultSelectedKey = props.defaultSelectedKey) !== null && _defaultSelectedKey !== void 0 ? _defaultSelectedKey : null, props.onSelectionChange),\n    _$58Phs$useControlled2 = _slicedToArray(_$58Phs$useControlled, 2),\n    selectedKey = _$58Phs$useControlled2[0],\n    setSelectedKey = _$58Phs$useControlled2[1];\n  var selectedKeys = $58Phs$useMemo(function () {\n    return selectedKey != null ? [selectedKey] : [];\n  }, [selectedKey]);\n  var _$e72dd72e1c76a225$ex = $e72dd72e1c76a225$export$2f645645f7bca764(_objectSpread(_objectSpread({}, props), {}, {\n      selectionMode: 'single',\n      disallowEmptySelection: true,\n      allowDuplicateSelectionEvents: true,\n      selectedKeys: selectedKeys,\n      onSelectionChange: function onSelectionChange(keys) {\n        var key = keys.values().next().value;\n        if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);\n        setSelectedKey(key);\n      }\n    })),\n    collection = _$e72dd72e1c76a225$ex.collection,\n    disabledKeys = _$e72dd72e1c76a225$ex.disabledKeys,\n    selectionManager = _$e72dd72e1c76a225$ex.selectionManager;\n  var selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    setSelectedKey: setSelectedKey,\n    selectedItem: selectedItem\n  };\n}\nexport { $e72dd72e1c76a225$export$2f645645f7bca764 as useListState, $a0d645289fe9b86b$export$e7f05e985daf4b5f as useSingleSelectListState, $a02d57049d202695$export$d085fb9e920b5ca7 as ListCollection };","map":{"version":3,"mappings":"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","names":["Symbol","iterator","$a02d57049d202695$export$d085fb9e920b5ca7","nodes","keyMap","Map","iterable","visit","node","set","key","childNodes","type","child","node2","last","index","node1","nextKey","prevKey","firstKey","undefined","lastKey","size","keys","get","idx","getKeys","getItem","$e72dd72e1c76a225$export$2f645645f7bca764","props","filter","selectionState","$58Phs$useMultipleSelectionState","disabledKeys","$58Phs$useMemo","Set","factory","context","suppressTextValueWarning","collection","$58Phs$useCollection","$58Phs$useEffect","focusedKey","setFocusedKey","selectionManager","$58Phs$SelectionManager","$a0d645289fe9b86b$export$e7f05e985daf4b5f","_defaultSelectedKey","$58Phs$useControlledState","selectedKey","defaultSelectedKey","onSelectionChange","setSelectedKey","selectedKeys","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","values","next","value","selectedItem"],"sources":["packages/@react-stately/list/src/ListCollection.ts","packages/@react-stately/list/src/useListState.ts","packages/@react-stately/list/src/useSingleSelectListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ListCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>) {\n    this.iterable = nodes;\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {ListCollection} from './ListCollection';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionBase<T>, MultipleSelectionStateProps {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let {filter} = props;\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let factory = nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes as Iterable<Node<T>>);\n  let context = useMemo(() => ({suppressTextValueWarning: props.suppressTextValueWarning}), [props.suppressTextValueWarning]);\n\n  let collection = useCollection(props, factory, context, [filter]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, SingleSelection} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListState, useListState} from './useListState';\nimport {Node} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface SingleSelectListProps<T> extends CollectionBase<T>, Omit<SingleSelection, 'disallowEmptySelection'> {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"]},"metadata":{},"sourceType":"module"}