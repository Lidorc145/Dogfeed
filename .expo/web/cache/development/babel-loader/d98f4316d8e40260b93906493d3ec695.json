{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useKeyboardDismissable } from \"../../../hooks\";\nimport { ExitAnimationContext } from \"./ExitAnimationContext\";\nexport function Overlay(_ref) {\n  var children = _ref.children,\n    isOpen = _ref.isOpen,\n    _ref$useRNModal = _ref.useRNModal,\n    useRNModal = _ref$useRNModal === void 0 ? false : _ref$useRNModal,\n    _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n    useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n    _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n    isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n    _ref$animationPreset = _ref.animationPreset,\n    animationPreset = _ref$animationPreset === void 0 ? 'fade' : _ref$animationPreset,\n    onRequestClose = _ref.onRequestClose,\n    style = _ref.style,\n    unmountOnExit = _ref.unmountOnExit;\n  var _React$useState = React.useState(!isOpen),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    exited = _React$useState2[0],\n    setExited = _React$useState2[1];\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n  var styleObj = _objectSpread({}, style);\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n  if (useRNModal || useRNModalOnAndroid && Platform.OS === 'android') {\n    return React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, React.createElement(Modal, {\n      statusBarTranslucent: true,\n      transparent: true,\n      visible: isOpen,\n      onRequestClose: onRequestClose,\n      animationType: animationPreset\n    }, children));\n  }\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n  return React.createElement(OverlayContainer, {\n    style: _objectSpread({}, styleObj)\n  }, React.createElement(ExitAnimationContext.Provider, {\n    value: {\n      exited: exited,\n      setExited: setExited\n    }\n  }, children));\n}","map":{"version":3,"mappings":";;;;AACA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAGA,SAASC,sBAAT;AACA,SAASC,oBAAT;AAeA,OAAO,SAASC,OAAT,OAWW;EAAA,IAVhBC,QADsB,QACtBA,QADsB;IAEtBC,MAFsB,QAEtBA,MAFsB;IAAA,uBAGtBC,UAAU;IAAVA,UAAU,gCAAG,KAHS;IAAA,6BAItBC,mBAAmB;IAAnBA,mBAAmB,sCAAG,KAJA;IAAA,6BAKtBC,qBAAqB;IAArBA,qBAAqB,sCAAG,IALF;IAAA,4BAOtBC,eAAe;IAAfA,eAAe,qCAAG,MAPI;IAQtBC,cARsB,QAQtBA,cARsB;IAStBC,KATsB,QAStBA,KATsB;IAUtBC;EAEA,sBAA4BZ,KAAK,CAACa,QAAN,CAAe,CAACR,MAAhB,CAA5B;IAAA;IAAOS,MAAD;IAASC,SAAT;EAENd,sBAAsB,CAAC;IACrBe,OAAO,EAAEX,MAAM,IAAIG,qBADE;IAErBS,QAAQ,EAAEP,cAAc,GAAGA,cAAH,GAAoB,YAAM,CAAE;EAF/B,CAAD,CAAtB;EAIA,IAAMQ,QAAQ,qBAAQP,MAAtB;EACA,IAAIF,eAAe,KAAK,OAAxB,EAAiC;IAC/BS,QAAQ,CAACC,QAAT,GAAoB,QAApB;IACAD,QAAQ,CAACE,OAAT,GAAmB,MAAnB;EACD,CAHD,MAGO;IACLF,QAAQ,CAACE,OAAT,GAAmBN,MAAM,IAAI,CAACT,MAAX,GAAoB,MAApB,GAA6B,MAAhD;EACD;EAED,IAAIO,aAAa,IAAI,CAACP,MAAlB,IAA4BS,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;EAED,IAAIR,UAAU,IAAKC,mBAAmB,IAAIc,QAAQ,CAACC,EAAT,KAAgB,SAA1D,EAAsE;IACpE,OACEtB,oBAACE,oBAAD,CAAsBqB,QAAtB;MAA+BC,KAAK,EAAE;QAAEV,MAAF,EAAEA,MAAF;QAAUC;MAAV;IAAtC,GACEf,oBAACyB,KAAD;MACEC,oBAAoB,MADtB;MAEEC,WAAW,MAFb;MAGEC,OAAO,EAAEvB,MAHX;MAIEK,cAAc,EAAEA,cAJlB;MAKEmB,aAAa,EAAEpB;IALjB,GAOGL,QAPH,CADF,CADF;EAaD;EAED,IAAIQ,aAAa,IAAI,CAACP,MAAlB,IAA4BS,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;EAED,OAEEd,oBAACD,gBAAD;IAAkBY,KAAK,oBAAOO;EAA9B,GACElB,oBAACE,oBAAD,CAAsBqB,QAAtB;IAA+BC,KAAK,EAAE;MAAEV,MAAF,EAAEA,MAAF;MAAUC;IAAV;EAAtC,GACGX,QADH,CADF;AAMH","names":["OverlayContainer","React","useKeyboardDismissable","ExitAnimationContext","Overlay","children","isOpen","useRNModal","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","style","unmountOnExit","useState","exited","setExited","enabled","callback","styleObj","overflow","display","Platform","OS","Provider","value","Modal","statusBarTranslucent","transparent","visible","animationType"],"sources":["Overlay.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { Modal, Platform } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  useRNModal?: boolean;\n  onRequestClose?: any;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModal = false,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (useRNModal || (useRNModalOnAndroid && Platform.OS === 'android')) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          statusBarTranslucent\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}