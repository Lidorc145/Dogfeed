{"ast":null,"code":"import _toArray from \"@babel/runtime/helpers/toArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nimport { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\nexport default {\n  get currency() {\n    return null;\n  },\n  get decimalSeparator() {\n    return 1.1.toLocaleString().substring(1, 2);\n  },\n  get digitGroupingSeparator() {\n    var value = 1000 .toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n  get isRTL() {\n    var _rtlDetect$isRtlLang;\n    return (_rtlDetect$isRtlLang = rtlDetect.isRtlLang(this.locale)) != null ? _rtlDetect$isRtlLang : false;\n  },\n  get isMetric() {\n    var region = this.region;\n    switch (region) {\n      case 'US':\n      case 'LR':\n      case 'MM':\n        return false;\n    }\n    return true;\n  },\n  get locale() {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n    var locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n  get locales() {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    var _navigator = navigator,\n      _navigator$languages = _navigator.languages,\n      languages = _navigator$languages === void 0 ? [] : _navigator$languages;\n    return Array.from(languages);\n  },\n  get timezone() {\n    var defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes() {\n    return [];\n  },\n  get region() {\n    var locale = this.locale;\n    var _ref = typeof locale === 'string' ? locale.split('-') : [],\n      _ref2 = _toArray(_ref),\n      suffixes = _ref2.slice(1);\n    for (var _iterator = _createForOfIteratorHelperLoose(suffixes), _step; !(_step = _iterator()).done;) {\n      var suffix = _step.value;\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n    return null;\n  },\n  getLocalizationAsync: function getLocalizationAsync() {\n    var _this = this;\n    return function _callee() {\n      var currency, decimalSeparator, digitGroupingSeparator, isoCurrencyCodes, isMetric, isRTL, locale, locales, region, timezone;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currency = _this.currency, decimalSeparator = _this.decimalSeparator, digitGroupingSeparator = _this.digitGroupingSeparator, isoCurrencyCodes = _this.isoCurrencyCodes, isMetric = _this.isMetric, isRTL = _this.isRTL, locale = _this.locale, locales = _this.locales, region = _this.region, timezone = _this.timezone;\n              return _context.abrupt(\"return\", {\n                currency: currency,\n                decimalSeparator: decimalSeparator,\n                digitGroupingSeparator: digitGroupingSeparator,\n                isoCurrencyCodes: isoCurrencyCodes,\n                isMetric: isMetric,\n                isRTL: isRTL,\n                locale: locale,\n                locales: locales,\n                region: region,\n                timezone: timezone\n              });\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":"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","names":["Platform","rtlDetect","currency","decimalSeparator","toLocaleString","substring","digitGroupingSeparator","value","length","isRTL","isRtlLang","locale","isMetric","region","isDOMAvailable","navigator","language","locales","languages","Array","from","timezone","defaultTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","isoCurrencyCodes","split","suffixes","suffix","toUpperCase","getLocalizationAsync"],"sourceRoot":"","sources":["../src/ExpoLocalization.ts"],"sourcesContent":["/* eslint-env browser */\nimport { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\n\nimport { Localization } from './Localization.types';\n\nexport default {\n  get currency(): string | null {\n    // TODO: Add support\n    return null;\n  },\n  get decimalSeparator(): string {\n    return (1.1).toLocaleString().substring(1, 2);\n  },\n  get digitGroupingSeparator(): string {\n    const value = (1000).toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale) ?? false;\n  },\n  get isMetric(): boolean {\n    const { region } = this;\n    switch (region) {\n      case 'US': // USA\n      case 'LR': // Liberia\n      case 'MM': // Myanmar\n        return false;\n    }\n    return true;\n  },\n  get locale(): string {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO(Bacon): Add this - very low priority\n    return [];\n  },\n  get region(): string | null {\n    // There is no way to obtain the current region, as is possible on native.\n    // Instead, use the country-code from the locale when possible (e.g. \"en-US\").\n    const { locale } = this;\n    const [, ...suffixes] = typeof locale === 'string' ? locale.split('-') : [];\n    for (const suffix of suffixes) {\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n    return null;\n  },\n  async getLocalizationAsync(): Promise<Localization> {\n    const {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    } = this;\n    return {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}