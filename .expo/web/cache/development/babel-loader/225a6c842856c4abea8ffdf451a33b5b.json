{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isOpen\", \"onClose\", \"defaultIsOpen\", \"initialFocusRef\", \"finalFocusRef\", \"avoidKeyboard\", \"closeOnOverlayClick\", \"isKeyboardDismissable\", \"overlayVisible\", \"backdropVisible\", \"animationPreset\"],\n  _excluded2 = [\"contentSize\", \"_backdrop\", \"_backdropFade\", \"_fade\", \"_slide\", \"useRNModal\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Backdrop from \"../Backdrop\";\nimport { Slide } from \"../Transitions\";\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from \"../../../hooks\";\nimport { AlertDialogContext } from \"./Context\";\nimport Box from \"../../primitives/Box\";\nimport { Fade } from \"../Transitions\";\nimport { useKeyboardBottomInset } from \"../../../utils\";\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar AlertDialog = function AlertDialog(_ref, ref) {\n  var children = _ref.children,\n    isOpen = _ref.isOpen,\n    onClose = _ref.onClose,\n    defaultIsOpen = _ref.defaultIsOpen,\n    initialFocusRef = _ref.initialFocusRef,\n    finalFocusRef = _ref.finalFocusRef,\n    avoidKeyboard = _ref.avoidKeyboard,\n    _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n    closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? false : _ref$closeOnOverlayCl,\n    _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n    isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n    _ref$overlayVisible = _ref.overlayVisible,\n    overlayVisible = _ref$overlayVisible === void 0 ? true : _ref$overlayVisible,\n    _ref$backdropVisible = _ref.backdropVisible,\n    backdropVisible = _ref$backdropVisible === void 0 ? true : _ref$backdropVisible,\n    animationPreset = _ref.animationPreset,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var bottomInset = useKeyboardBottomInset();\n  var _usePropsResolution = usePropsResolution('AlertDialog', rest),\n    contentSize = _usePropsResolution.contentSize,\n    _backdrop = _usePropsResolution._backdrop,\n    _backdropFade = _usePropsResolution._backdropFade,\n    _fade = _usePropsResolution._fade,\n    _slide = _usePropsResolution._slide,\n    useRNModal = _usePropsResolution.useRNModal,\n    restThemeProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var _useControllableState = useControllableState({\n      value: isOpen,\n      defaultValue: defaultIsOpen,\n      onChange: function onChange(val) {\n        if (!val) onClose && onClose();\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    visible = _useControllableState2[0],\n    setVisible = _useControllableState2[1];\n  var handleClose = function handleClose() {\n    return setVisible(false);\n  };\n  var child = React.createElement(Box, _extends({\n    bottom: avoidKeyboard ? bottomInset + 'px' : undefined\n  }, restThemeProps, {\n    ref: ref\n  }), children);\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return React.createElement(Overlay, {\n    isOpen: visible,\n    onRequestClose: handleClose,\n    isKeyboardDismissable: isKeyboardDismissable,\n    useRNModalOnAndroid: true,\n    useRNModal: useRNModal,\n    unmountOnExit: true\n  }, React.createElement(AlertDialogContext.Provider, {\n    value: {\n      handleClose: handleClose,\n      contentSize: contentSize,\n      initialFocusRef: initialFocusRef,\n      finalFocusRef: finalFocusRef\n    }\n  }, React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _backdropFade), overlayVisible && backdropVisible && React.createElement(Backdrop, _extends({\n    onPress: function onPress() {\n      closeOnOverlayClick && handleClose();\n    }\n  }, _backdrop))), animationPreset === 'slide' ? React.createElement(Slide, _extends({\n    in: visible\n  }, _slide), React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child)) : React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _fade), React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child))));\n};\nexport default memo(forwardRef(AlertDialog));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Backdrop","Slide","FocusScope","useControllableState","usePropsResolution","AlertDialogContext","Box","Fade","useKeyboardBottomInset","Overlay","useHasResponsiveProps","AlertDialog","ref","children","isOpen","onClose","defaultIsOpen","initialFocusRef","finalFocusRef","avoidKeyboard","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","bottomInset","contentSize","_backdrop","_backdropFade","_fade","_slide","useRNModal","restThemeProps","value","defaultValue","onChange","val","visible","setVisible","handleClose","child","bottom","undefined","onRequestClose","useRNModalOnAndroid","unmountOnExit","Provider","in","style","StyleSheet","absoluteFill","onPress","contain","autoFocus","restoreFocus"],"sources":["AlertDialog.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IAlertDialogProps } from './types';\nimport { Fade } from '../Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialog = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = false,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IAlertDialogProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    useRNModal,\n    ...restThemeProps\n  } = usePropsResolution('AlertDialog', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = () => setVisible(false);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...restThemeProps}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      useRNModalOnAndroid\n      useRNModal={useRNModal}\n      unmountOnExit\n    >\n      <AlertDialogContext.Provider\n        value={{\n          handleClose,\n          contentSize,\n          initialFocusRef,\n          finalFocusRef,\n        }}\n      >\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </AlertDialogContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(AlertDialog));\n"]},"metadata":{},"sourceType":"module"}