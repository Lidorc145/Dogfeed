{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport get from 'lodash.get';\nimport { convertStringNumberToNumber } from \"./convertStringNumberToNumber\";\nimport { resolveValueWithBreakpoint } from \"../hooks/useThemeProps/utils\";\nexport var getRNKeyAndStyleValue = function getRNKeyAndStyleValue(_ref) {\n  var config = _ref.config,\n    value = _ref.value,\n    key = _ref.key,\n    theme = _ref.theme,\n    styledSystemProps = _ref.styledSystemProps,\n    currentBreakpoint = _ref.currentBreakpoint;\n  var style = {};\n  if (config === true) {\n    style = _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, key, convertStringNumberToNumber(key, value)));\n  } else if (config) {\n    var property = config.property,\n      scale = config.scale,\n      properties = config.properties,\n      transformer = config.transformer;\n    var val = value;\n    if (transformer) {\n      val = transformer(val, theme[scale], theme, styledSystemProps.fontSize);\n    } else {\n      val = get(theme[scale], value, value);\n    }\n    if (typeof val === 'string') {\n      if (val.endsWith('px')) {\n        val = parseFloat(val);\n      } else if (val.endsWith('em') && Platform.OS !== 'web') {\n        var fontSize = resolveValueWithBreakpoint(styledSystemProps.fontSize, theme.breakpoints, currentBreakpoint, key);\n        val = parseFloat(val) * parseFloat(get(theme.fontSizes, fontSize, fontSize));\n      }\n    }\n    val = convertStringNumberToNumber(key, val);\n    if (properties) {\n      properties.forEach(function (property) {\n        style = _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, property, val));\n      });\n    } else if (property) {\n      style = _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, property, val));\n    } else {\n      style = _objectSpread(_objectSpread({}, style), val);\n    }\n  }\n  return style;\n};","map":{"version":3,"mappings":";;;;AACA,OAAOA,GAAP,MAAgB,YAAhB;AACA,SAASC,2BAAT;AACA,SAASC,0BAAT;AAKA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,OAOvB;EAAA,IANTC,MADoC,QACpCA,MADoC;IAEpCC,KAFoC,QAEpCA,KAFoC;IAGpCC,GAHoC,QAGpCA,GAHoC;IAIpCC,KAJoC,QAIpCA,KAJoC;IAKpCC,iBALoC,QAKpCA,iBALoC;IAMpCC;EAEA,IAAIC,KAAU,GAAG,EAAjB;EACA,IAAIN,MAAM,KAAK,IAAf,EAAqB;IACnBM,KAAK,mCACAA,KADG,2BAELJ,GAAD,EAAOL,2BAA2B,CAACK,GAAD,EAAMD,KAAN,GAFpC;EAID,CALD,MAKO,IAAID,MAAJ,EAAY;IAEjB,IAAQO,QAAF,GAA+CP,MAArD,CAAQO,QAAF;MAAYC,KAAZ,GAA+CR,MAArD,CAAkBQ,KAAZ;MAAmBC,UAAnB,GAA+CT,MAArD,CAAyBS,UAAnB;MAA+BC,cAAgBV,MAArD,CAAqCU;IACrC,IAAIC,GAAG,GAAGV,KAAV;IAEA,IAAIS,WAAJ,EAAiB;MACfC,GAAG,GAAGD,WAAW,CAACC,GAAD,EAAMR,KAAK,CAACK,KAAD,CAAX,EAAoBL,KAApB,EAA2BC,iBAAiB,CAACQ,QAA7C,CAAjB;IACD,CAFD,MAEO;MAELD,GAAG,GAAGf,GAAG,CAACO,KAAK,CAACK,KAAD,CAAN,EAAeP,KAAf,EAAsBA,KAAtB,CAAT;IACD;IAED,IAAI,OAAOU,GAAP,KAAe,QAAnB,EAA6B;MAC3B,IAAIA,GAAG,CAACE,QAAJ,CAAa,IAAb,CAAJ,EAAwB;QACtBF,GAAG,GAAGG,UAAU,CAACH,GAAD,CAAhB;MACD,CAFD,MAEO,IAAIA,GAAG,CAACE,QAAJ,CAAa,IAAb,KAAsBE,QAAQ,CAACC,EAAT,KAAgB,KAA1C,EAAiD;QACtD,IAAMJ,QAAQ,GAAGd,0BAA0B,CACzCM,iBAAiB,CAACQ,QADuB,EAEzCT,KAAK,CAACc,WAFmC,EAGzCZ,iBAHyC,EAIzCH,GAJyC,CAA3C;QAMAS,GAAG,GACDG,UAAU,CAACH,GAAD,CAAV,GACAG,UAAU,CAAClB,GAAG,CAACO,KAAK,CAACe,SAAP,EAAkBN,QAAlB,EAA4BA,QAA5B,CAAJ,CAFZ;MAGD;IACF;IAEDD,GAAG,GAAGd,2BAA2B,CAACK,GAAD,EAAMS,GAAN,CAAjC;IAEA,IAAIF,UAAJ,EAAgB;MAEdA,UAAU,CAACU,OAAX,CAAoBZ,kBAAD,EAAc;QAC/BD,KAAK,mCACAA,KADG,2BAELC,QAAD,EAAYI,KAFd;MAID,CALD;IAMD,CARD,MAQO,IAAIJ,QAAJ,EAAc;MACnBD,KAAK,mCACAA,KADG,2BAELC,QAAD,EAAYI,KAFd;IAID,CALM,MAKA;MACLL,KAAK,mCACAA,KADG,GAEHK,IAFL;IAID;EACF;EAED,OAAOL,KAAP;AACD,CAlEM","names":["get","convertStringNumberToNumber","resolveValueWithBreakpoint","getRNKeyAndStyleValue","config","value","key","theme","styledSystemProps","currentBreakpoint","style","property","scale","properties","transformer","val","fontSize","endsWith","parseFloat","Platform","OS","breakpoints","fontSizes","forEach"],"sources":["getRNKeyAndStyleValue.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport get from 'lodash.get';\nimport { convertStringNumberToNumber } from './convertStringNumberToNumber';\nimport { resolveValueWithBreakpoint } from '../hooks/useThemeProps/utils';\n\n/**\n * Common Logic Sharing between useSx and useStyledSytem\n */\nexport const getRNKeyAndStyleValue = ({\n  config,\n  value,\n  key,\n  theme,\n  styledSystemProps,\n  currentBreakpoint,\n}: any) => {\n  let style: any = {};\n  if (config === true) {\n    style = {\n      ...style,\n      [key]: convertStringNumberToNumber(key, value),\n    };\n  } else if (config) {\n    //@ts-ignore\n    const { property, scale, properties, transformer } = config;\n    let val = value;\n\n    if (transformer) {\n      val = transformer(val, theme[scale], theme, styledSystemProps.fontSize);\n    } else {\n      // If a token is not found in the theme\n      val = get(theme[scale], value, value);\n    }\n\n    if (typeof val === 'string') {\n      if (val.endsWith('px')) {\n        val = parseFloat(val);\n      } else if (val.endsWith('em') && Platform.OS !== 'web') {\n        const fontSize = resolveValueWithBreakpoint(\n          styledSystemProps.fontSize,\n          theme.breakpoints,\n          currentBreakpoint,\n          key\n        );\n        val =\n          parseFloat(val) *\n          parseFloat(get(theme.fontSizes, fontSize, fontSize));\n      }\n    }\n\n    val = convertStringNumberToNumber(key, val);\n\n    if (properties) {\n      //@ts-ignore\n      properties.forEach((property) => {\n        style = {\n          ...style,\n          [property]: val,\n        };\n      });\n    } else if (property) {\n      style = {\n        ...style,\n        [property]: val,\n      };\n    } else {\n      style = {\n        ...style,\n        ...val,\n      };\n    }\n  }\n\n  return style;\n};\n"]},"metadata":{},"sourceType":"module"}