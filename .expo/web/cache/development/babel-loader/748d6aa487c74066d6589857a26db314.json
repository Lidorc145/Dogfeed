{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"isTruncated\", \"noOfLines\", \"bold\", \"italic\", \"sub\", \"highlight\", \"underline\", \"strikeThrough\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"_hover\", \"fontSize\", \"numberOfLines\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils/mergeRefs\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useResolvedFontFamily } from \"../../../hooks/useResolvedFontFamily\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar StyledText = makeStyledComponent(NativeText);\nvar TextAncestorContext = React.createContext(false);\nvar Text = function Text(_ref2, ref) {\n  var children = _ref2.children,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var hasTextAncestor = React.useContext(TextAncestorContext);\n  var _usePropsResolution = usePropsResolution('Text', props, {}, {\n      resolveResponsively: ['noOfLines', 'numberOfLines'],\n      componentTheme: hasTextAncestor ? {} : undefined\n    }),\n    isTruncated = _usePropsResolution.isTruncated,\n    noOfLines = _usePropsResolution.noOfLines,\n    bold = _usePropsResolution.bold,\n    italic = _usePropsResolution.italic,\n    sub = _usePropsResolution.sub,\n    highlight = _usePropsResolution.highlight,\n    underline = _usePropsResolution.underline,\n    strikeThrough = _usePropsResolution.strikeThrough,\n    propFontFamily = _usePropsResolution.fontFamily,\n    propFontWeight = _usePropsResolution.fontWeight,\n    propFontStyle = _usePropsResolution.fontStyle,\n    _hover = _usePropsResolution._hover,\n    fontSize = _usePropsResolution.fontSize,\n    numberOfLines = _usePropsResolution.numberOfLines,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var _ref = useRef(null);\n  var _useHover = useHover({}, _hover ? _ref : null),\n    isHovered = _useHover.isHovered;\n  var fontFamily = propFontFamily;\n  var fontStyle = italic ? 'italic' : propFontStyle;\n  var fontWeight = bold ? 'bold' : propFontWeight;\n  var resolvedFontFamily;\n  resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : hasTextAncestor ? undefined : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : hasTextAncestor ? undefined : 'normal'\n  });\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n  if (Platform.OS === 'web') {\n    if (resolvedFontFamily) {\n      fontFamily = resolvedFontFamily.fontFamily;\n    }\n    resolvedFontFamily = {\n      fontFamily: fontFamily,\n      fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : hasTextAncestor ? undefined : 400,\n      fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : hasTextAncestor ? undefined : 'normal'\n    };\n  }\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  var propsToSpread = _objectSpread(_objectSpread(_objectSpread({}, resolvedProps), {}, {\n    numberOfLines: numberOfLines || noOfLines ? numberOfLines || noOfLines : isTruncated ? 1 : undefined\n  }, resolvedFontFamily), {}, {\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine: underline && strikeThrough ? 'underline line-through' : underline ? 'underline' : strikeThrough ? 'line-through' : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref])\n  }, isHovered && _hover);\n  return hasTextAncestor ? React.createElement(StyledText, propsToSpread, children) : React.createElement(TextAncestorContext.Provider, {\n    value: true\n  }, React.createElement(StyledText, propsToSpread, children));\n};\nexport default memo(forwardRef(Text));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","useRef","usePropsResolution","useHover","mergeRefs","makeStyledComponent","useResolvedFontFamily","useHasResponsiveProps","StyledText","NativeText","TextAncestorContext","createContext","Text","ref","children","props","hasTextAncestor","useContext","resolveResponsively","componentTheme","undefined","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","propFontFamily","fontFamily","propFontWeight","fontWeight","propFontStyle","fontStyle","_hover","fontSize","numberOfLines","resolvedProps","_ref","isHovered","resolvedFontFamily","Platform","OS","propsToSpread","bg","textDecorationLine","Provider","value"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Platform, Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledText = makeStyledComponent(NativeText);\n// To have a RN compatible behaviour, we'll inherit parent text styles as base style\nconst TextAncestorContext = React.createContext(false);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Text',\n    props,\n    {},\n    {\n      resolveResponsively: ['noOfLines', 'numberOfLines'],\n      // We override the component base theme if text has an ancestor.\n      componentTheme: hasTextAncestor ? {} : undefined,\n    }\n  );\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n  let resolvedFontFamily;\n\n  resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n    fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n  // Need to apply fontWeight & fontStyle on web\n  if (Platform.OS === 'web') {\n    if (resolvedFontFamily) {\n      fontFamily = resolvedFontFamily.fontFamily;\n    }\n\n    resolvedFontFamily = {\n      fontFamily,\n      fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n      fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n    };\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const propsToSpread = {\n    ...resolvedProps,\n    numberOfLines:\n      numberOfLines || noOfLines\n        ? numberOfLines || noOfLines\n        : isTruncated\n        ? 1\n        : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine:\n      underline && strikeThrough\n        ? 'underline line-through'\n        : underline\n        ? 'underline'\n        : strikeThrough\n        ? 'line-through'\n        : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover),\n  };\n\n  return hasTextAncestor ? (\n    <StyledText {...propsToSpread}>{children}</StyledText>\n  ) : (\n    <TextAncestorContext.Provider value={true}>\n      <StyledText {...propsToSpread}>{children}</StyledText>\n    </TextAncestorContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]},"metadata":{},"sourceType":"module"}