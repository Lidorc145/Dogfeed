{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport { memo } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useBreakpointValue, useTheme, useToken } from \"../../../hooks\";\nimport { useColorMode } from \"../../../core/color-mode/hooks\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function Hidden(_ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _usePropsResolution = usePropsResolution('Hidden', props, {}, {\n      ignoreProps: ['only', 'platform']\n    }),\n    from = _usePropsResolution.from,\n    till = _usePropsResolution.till,\n    only = _usePropsResolution.only,\n    platform = _usePropsResolution.platform,\n    colorMode = _usePropsResolution.colorMode;\n  var _useTheme = useTheme(),\n    breakpoints = _useTheme.breakpoints;\n  var currentColorMode = useColorMode();\n  var breakpointValueObject = Object.keys(breakpoints).reduce(function (obj, val) {\n    obj[val] = val;\n    return obj;\n  }, {});\n  var breakpointValue = useBreakpointValue(breakpointValueObject);\n  var _useToken = useToken('breakpoints', [breakpointValue]),\n    _useToken2 = _slicedToArray(_useToken, 1),\n    currentBreakpointValue = _useToken2[0];\n  var _useToken3 = useToken('breakpoints', [from]),\n    _useToken4 = _slicedToArray(_useToken3, 1),\n    fromBreakPointValue = _useToken4[0];\n  var _useToken5 = useToken('breakpoints', [till]),\n    _useToken6 = _slicedToArray(_useToken5, 1),\n    tillBreakPointValue = _useToken6[0];\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (from && till && currentBreakpointValue >= fromBreakPointValue && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  } else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } else if (Array.isArray(only) && only.includes(breakpointValue) || only === breakpointValue) {\n    return null;\n  } else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\nexport default memo(Hidden);","map":{"version":3,"mappings":";;;AAAA,SAASA,IAAT,QAAqB,OAArB;AAEA,SAASC,kBAAT;AACA,SAASC,kBAAT,EAA6BC,QAA7B,EAAuCC,QAAvC;AACA,SAASC,YAAT;AAAA;AAGA,OAAO,SAASC,MAAT,OAAsD;EAAA,IAApCC,QAAF,QAAEA,QAAF;IAAeC;EACpC,0BAAkDP,kBAAkB,CAClE,QADkE,EAElEO,KAFkE,EAGlE,EAHkE,EAIlE;MACEC,WAAW,EAAE,CAAC,MAAD,EAAS,UAAT;IADf,CAJkE,CAApE;IAAQC,IAAF,uBAAEA,IAAF;IAAQC,IAAR,uBAAQA,IAAR;IAAcC,IAAd,uBAAcA,IAAd;IAAoBC,QAApB,uBAAoBA,QAApB;IAA8BC;EAQpC,gBAAwBX,QAAQ,EAAhC;IAAQY;EACR,IAAMC,gBAAgB,GAAGX,YAAY,EAArC;EAEA,IAAMY,qBAAqB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,MAAzB,CAC5B,UAACC,GAAD,EAAWC,GAAX,EAA2B;IACzBD,GAAG,CAACC,GAAD,CAAH,GAAWA,GAAX;IACA,OAAOD,GAAP;EACD,CAJ2B,EAK5B,EAL4B,CAA9B;EAOA,IAAME,eAAe,GAAGrB,kBAAkB,CAACe,qBAAD,CAA1C;EACA,gBAAiCb,QAAQ,CAAC,aAAD,EAAgB,CAACmB,eAAD,CAAhB,CAAzC;IAAA;IAAOC,sBAAD;EACN,iBAA8BpB,QAAQ,CAAC,aAAD,EAAgB,CAACM,IAAD,CAAhB,CAAtC;IAAA;IAAOe,mBAAD;EACN,iBAA8BrB,QAAQ,CAAC,aAAD,EAAgB,CAACO,IAAD,CAAhB,CAAtC;IAAA;IAAOe,mBAAD;EAGN,IAAI,CAAChB,IAAD,IAAS,CAACC,IAAV,IAAkB,CAACC,IAAnB,IAA2B,CAACE,SAA5B,IAAyC,CAACD,QAA9C,EAAwD;IACtD,OAAO,IAAP;EACD,CAFD,MAKK,IACHH,IAAI,IACJC,IADA,IAEAa,sBAAsB,IAAIC,mBAF1B,IAGAD,sBAAsB,GAAGE,mBAJtB,EAKH;IACA,OAAO,IAAP;EACD,CAPI,MAUA,IAAIhB,IAAI,IAAI,CAACC,IAAT,IAAiBa,sBAAsB,IAAIC,mBAA/C,EAAoE;IACvE,OAAO,IAAP;EACD,CAFI,MAKA,IAAId,IAAI,IAAI,CAACD,IAAT,IAAiBc,sBAAsB,GAAGE,mBAA9C,EAAmE;IACtE,OAAO,IAAP;EACD,CAFI,MAMA,IACFC,KAAK,CAACC,OAAN,CAAchB,IAAd,KAAuBA,IAAI,CAACiB,QAAL,CAAcN,eAAd,CAAxB,IACAX,IAAI,KAAKW,eAFN,EAGH;IACA,OAAO,IAAP;EACD,CALI,MAQA,IACFI,KAAK,CAACC,OAAN,CAAcf,QAAd,KAA2BA,QAAQ,CAACgB,QAAT,CAAkBC,QAAQ,CAACC,EAA3B,CAA5B,IACAlB,QAAQ,KAAKiB,QAAQ,CAACC,EAFnB,EAGH;IACA,OAAO,IAAP;EACD,CALI,MAOA,IAAIjB,SAAS,KAAKE,gBAAgB,CAACF,SAAnC,EAA8C;IACjD,OAAO,IAAP;EACD;EACD,OAAOP,QAAP;AACD;AAED,eAAeP,IAAI,CAACM,MAAD,CAAnB","names":["memo","usePropsResolution","useBreakpointValue","useTheme","useToken","useColorMode","Hidden","children","props","ignoreProps","from","till","only","platform","colorMode","breakpoints","currentColorMode","breakpointValueObject","Object","keys","reduce","obj","val","breakpointValue","currentBreakpointValue","fromBreakPointValue","tillBreakPointValue","Array","isArray","includes","Platform","OS"],"sources":["index.tsx"],"sourcesContent":["import { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {},\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"]},"metadata":{},"sourceType":"module"}