{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"hideDragIndicator\"],\n  _excluded2 = [\"isOpen\", \"disableOverlay\", \"onClose\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Modal } from \"../../composites/Modal\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { ActionSheetContext } from \"./ActionSheetContext\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar Actionsheet = function Actionsheet(_ref, ref) {\n  var children = _ref.children,\n    _ref$hideDragIndicato = _ref.hideDragIndicator,\n    hideDragIndicator = _ref$hideDragIndicato === void 0 ? false : _ref$hideDragIndicato,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _usePropsResolution = usePropsResolution('Actionsheet', props),\n    isOpen = _usePropsResolution.isOpen,\n    disableOverlay = _usePropsResolution.disableOverlay,\n    onClose = _usePropsResolution.onClose,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  var overlayStyle = Platform.OS === 'web' ? {\n    position: 'fixed'\n  } : {};\n  return React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose\n  }, resolvedProps, {\n    overlayVisible: disableOverlay ? false : true,\n    closeOnOverlayClick: disableOverlay ? false : true,\n    ref: ref,\n    _overlay: {\n      style: overlayStyle\n    }\n  }), React.createElement(ActionSheetContext.Provider, {\n    value: {\n      hideDragIndicator: hideDragIndicator\n    }\n  }, children));\n};\nexport default memo(forwardRef(Actionsheet));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT;AAEA,SAASC,kBAAT;AACA,SAASC,kBAAT;AACA,SAASC,qBAAT;AAAA;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAW,OAEfC,GAFkB,EAGf;EAAA,IAFDC,QAAF,QAAEA,QAAF;IAAA,6BAAYC,iBAAiB;IAAjBA,iBAAiB,sCAAG,KAAhC;IAA0CC;EAG1C,0BAKIP,kBAAkB,CAAC,aAAD,EAAgBO,KAAhB,CALtB;IACEC,MADI,uBACJA,MADI;IAEJC,cAFI,uBAEJA,cAFI;IAGJC,OAHI,uBAGJA,OAHI;IAIDC;EAIL,IAAIT,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,IAAIK,YAAY,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB;IAAEC,QAAQ,EAAE;EAAZ,CAAxB,GAAgD,EAAnE;EAEA,OACEnB,oBAACG,KAAD;IACES,MAAM,EAAEA,MADV;IAEEE,OAAO,EAAEA;EAFX,GAGMC,aAHN;IAIEK,cAAc,EAAEP,cAAc,GAAG,KAAH,GAAW,IAJ3C;IAKEQ,mBAAmB,EAAER,cAAc,GAAG,KAAH,GAAW,IALhD;IAMEL,GAAG,EAAEA,GANP;IAOEc,QAAQ,EAAE;MAAEC,KAAK,EAAEP;IAAT;EAPZ,IASEhB,oBAACK,kBAAD,CAAoBmB,QAApB;IAA6BC,KAAK,EAAE;MAAEf;IAAF;EAApC,GACGD,QADH,CATF,CADF;AAeD,CAjCD;AAmCA,eAAeR,IAAI,CAACC,UAAU,CAACK,WAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Modal","usePropsResolution","ActionSheetContext","useHasResponsiveProps","Actionsheet","ref","children","hideDragIndicator","props","isOpen","disableOverlay","onClose","resolvedProps","overlayStyle","Platform","OS","position","overlayVisible","closeOnOverlayClick","_overlay","style","Provider","value"],"sources":["Actionsheet.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Platform } from 'react-native';\n\nconst Actionsheet = (\n  { children, hideDragIndicator = false, ...props }: IActionsheetProps,\n  ref: any\n) => {\n  const {\n    isOpen,\n    disableOverlay,\n    onClose,\n    ...resolvedProps\n  } = usePropsResolution('Actionsheet', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  //Fixing overlay position for Web due to scrollView issue\n  let overlayStyle = Platform.OS === 'web' ? { position: 'fixed' } : {};\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      {...resolvedProps}\n      overlayVisible={disableOverlay ? false : true}\n      closeOnOverlayClick={disableOverlay ? false : true}\n      ref={ref}\n      _overlay={{ style: overlayStyle }}\n    >\n      <ActionSheetContext.Provider value={{ hideDragIndicator }}>\n        {children}\n      </ActionSheetContext.Provider>\n    </Modal>\n  );\n};\n\nexport default memo(forwardRef(Actionsheet));\n"]},"metadata":{},"sourceType":"module"}