{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"_image\", \"_badgeSize\", \"source\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Box, Image } from \"../../primitives\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport isNil from 'lodash.isnil';\nimport has from 'lodash.has';\nvar Avatar = function Avatar(_ref, ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    error = _React$useState2[0],\n    setError = _React$useState2[1];\n  var _usePropsResolution = usePropsResolution('Avatar', props),\n    _image = _usePropsResolution._image,\n    _badgeSize = _usePropsResolution._badgeSize,\n    source = _usePropsResolution.source,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var Badge = React.createElement(React.Fragment, null);\n  var remainingChildren = [];\n  React.Children.map(children, function (child) {\n    if (typeof (child === null || child === void 0 ? void 0 : child.type) === 'object' && (child === null || child === void 0 ? void 0 : child.type.displayName) === 'AvatarBadge') {\n      var _child$props, _child$props2;\n      Badge = React.cloneElement(child, {\n        size: child !== null && child !== void 0 && (_child$props = child.props) !== null && _child$props !== void 0 && _child$props.size ? child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.size : _badgeSize ? _badgeSize[0] : undefined\n      });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  var getSource = function getSource() {\n    if (source) {\n      if (has(source, 'uri') && !isNil(source.uri)) {\n        return source;\n      } else if (!has(source, 'uri')) {\n        return source;\n      }\n    }\n    return null;\n  };\n  var imageSource = getSource();\n  return React.createElement(Box, resolvedProps, imageSource && !error ? React.createElement(Image, _extends({\n    source: source,\n    onError: function onError() {\n      setError(true);\n    }\n  }, _image, {\n    ref: ref\n  })) : remainingChildren.length !== 0 && remainingChildren, Badge);\n};\nexport default memo(forwardRef(Avatar));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,GAAT,EAAcC,KAAd;AACA,SAASC,kBAAT;AAEA,SAASC,qBAAT;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAM,OAA0CC,GAAvC,EAAoD;EAAA,IAAjDC,QAAF,QAAEA,QAAF;IAAeC;EAC7B,sBAA0BZ,KAAK,CAACa,QAAN,CAAe,KAAf,CAA1B;IAAA;IAAOC,KAAD;IAAQC,QAAR;EACN,0BAAyDV,kBAAkB,CACzE,QADyE,EAEzEO,KAFyE,CAA3E;IAAQI,MAAF,uBAAEA,MAAF;IAAUC,UAAV,uBAAUA,UAAV;IAAsBC,MAAtB,uBAAsBA,MAAtB;IAAiCC;EAKvC,IAAIC,KAAK,GAAGpB,yCAAZ;EACA,IAAMqB,iBAAgC,GAAG,EAAzC;EAEArB,KAAK,CAACsB,QAAN,CAAeC,GAAf,CAAmBZ,QAAnB,EAA8Ba,eAAD,EAAW;IACtC,IACE,QAAOA,KAAP,aAAOA,KAAP,uBAAOA,KAAK,CAAEC,IAAd,MAAuB,QAAvB,IACA,MAAK,SAAL,SAAK,WAAL,iBAAK,CAAEA,IAAP,CAAYC,WAAZ,MAA4B,aAF9B,EAGE;MAAA;MACAN,KAAK,GAAGpB,KAAK,CAAC2B,YAAN,CAAmBH,KAAnB,EAA0B;QAChCI,IAAI,EAAEJ,KAAK,SAAL,SAAK,WAAL,yBAAK,CAAEZ,KAAP,sDAAcgB,IAAd,GACFJ,KADE,aACFA,KADE,wCACFA,KAAK,CAAEZ,KADL,kDACFiB,cAAcD,IADZ,GAEFX,UAAU,GACVA,UAAU,CAAC,CAAD,CADA,GAEVa;MAL4B,CAA1B,CAAR;IAOD,CAXD,MAWO;MACLT,iBAAiB,CAACU,IAAlB,CAAuBP,KAAvB;IACD;EACF,CAfD;EAkBA,IAAIlB,qBAAqB,CAACM,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,IAAMoB,SAAS,GAAG,SAAZA,SAAS,GAAS;IACtB,IAAId,MAAJ,EAAY;MACV,IAAIV,GAAG,CAACU,MAAD,EAAS,KAAT,CAAH,IAAsB,CAACX,KAAK,CAACW,MAAM,CAACe,GAAR,CAAhC,EAA8C;QAC5C,OAAOf,MAAP;MACD,CAFD,MAEO,IAAI,CAACV,GAAG,CAACU,MAAD,EAAS,KAAT,CAAR,EAAyB;QAC9B,OAAOA,MAAP;MACD;IACF;IACD,OAAO,IAAP;EACD,CATD;EAUA,IAAMgB,WAAW,GAAGF,SAAS,EAA7B;EAEA,OACEhC,oBAACG,GAAD,EAASgB,aAAT,EACGe,WAAW,IAAI,CAACpB,KAAhB,GACCd,oBAACI,KAAD;IACEc,MAAM,EAAEA,MADV;IAEEiB,OAAO,EAAE,mBAAM;MACbpB,QAAQ,CAAC,IAAD,CAAR;IACD;EAJH,GAKMC,MALN;IAMEN,GAAG,EAAEA;EANP,GADD,GAUCW,iBAAiB,CAACe,MAAlB,KAA6B,CAA7B,IAAkCf,iBAXtC,EAaGD,KAbH,CADF;AAiBD,CA7DD;AA+DA,eAAenB,IAAI,CAACC,UAAU,CAACO,MAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","Image","usePropsResolution","useHasResponsiveProps","isNil","has","Avatar","ref","children","props","useState","error","setError","_image","_badgeSize","source","resolvedProps","Badge","remainingChildren","Children","map","child","type","displayName","cloneElement","size","_child$props2","undefined","push","getSource","uri","imageSource","onError","length"],"sources":["Avatar.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport isNil from 'lodash.isnil';\nimport has from 'lodash.has';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _image, _badgeSize, source, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = React.cloneElement(child, {\n        size: child?.props?.size\n          ? child?.props?.size\n          : _badgeSize\n          ? _badgeSize[0]\n          : undefined,\n      });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const getSource = () => {\n    if (source) {\n      if (has(source, 'uri') && !isNil(source.uri)) {\n        return source;\n      } else if (!has(source, 'uri')) {\n        return source;\n      }\n    }\n    return null;\n  };\n  const imageSource = getSource();\n\n  return (\n    <Box {...resolvedProps}>\n      {imageSource && !error ? (\n        <Image\n          source={source}\n          onError={() => {\n            setError(true);\n          }}\n          {..._image}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]},"metadata":{},"sourceType":"module"}