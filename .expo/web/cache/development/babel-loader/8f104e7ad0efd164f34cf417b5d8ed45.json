{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getPrivateUserData, getUsers, updatePrivateUserData } from \"../firebase/user-api\";\nimport { uploadUserImage } from \"../firebase/storage-api\";\nimport { ConfigApi } from \"./config-api\";\nexport var UserApi = ConfigApi.injectEndpoints({\n  endpoints: function endpoints(build) {\n    return {\n      getUsers: build.query({\n        queryFn: function queryFn(begID) {\n          return function _callee() {\n            var querySnapshot, users;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(getUsers(begID, 3, 'desc'));\n                  case 3:\n                    querySnapshot = _context.sent;\n                    users = querySnapshot.docs.map(function (userDoc) {\n                      return userDoc.data();\n                    });\n                    return _context.abrupt(\"return\", {\n                      data: users\n                    });\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.warn(\"Error with fetching users\");\n                    return _context.abrupt(\"return\", {\n                      error: _context.t0\n                    });\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, [[0, 8]], Promise);\n          }();\n        }\n      }),\n      setUserImage: build.mutation({\n        queryFn: function queryFn(uri) {\n          return function _callee2() {\n            var url;\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.prev = 0;\n                    _context2.next = 3;\n                    return _regeneratorRuntime.awrap(uploadUserImage(uri));\n                  case 3:\n                    url = _context2.sent;\n                    return _context2.abrupt(\"return\", {\n                      data: url\n                    });\n                  case 7:\n                    _context2.prev = 7;\n                    _context2.t0 = _context2[\"catch\"](0);\n                    console.warn(\"Error with updating user image: \" + _context2.t0);\n                    return _context2.abrupt(\"return\", {\n                      error: _context2.t0\n                    });\n                  case 11:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, [[0, 7]], Promise);\n          }();\n        }\n      }),\n      updateUserFields: build.mutation({\n        queryFn: function queryFn(userFields) {\n          return function _callee3() {\n            var snapshot;\n            return _regeneratorRuntime.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return _regeneratorRuntime.awrap(updatePrivateUserData(userFields));\n                  case 3:\n                    _context3.next = 5;\n                    return _regeneratorRuntime.awrap(getPrivateUserData(userFields.id));\n                  case 5:\n                    snapshot = _context3.sent;\n                    return _context3.abrupt(\"return\", {\n                      data: snapshot.data()\n                    });\n                  case 9:\n                    _context3.prev = 9;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    console.warn(\"Error with updating user fields: \" + _context3.t0);\n                    return _context3.abrupt(\"return\", {\n                      error: _context3.t0\n                    });\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, [[0, 9]], Promise);\n          }();\n        }\n      })\n    };\n  },\n  overrideExisting: true\n});\nvar useGetUsersQuery = UserApi.useGetUsersQuery,\n  useSetUserImageMutation = UserApi.useSetUserImageMutation,\n  useUpdateUserFieldsMutation = UserApi.useUpdateUserFieldsMutation;\nexport { useGetUsersQuery, useSetUserImageMutation, useUpdateUserFieldsMutation };","map":{"version":3,"names":["getPrivateUserData","getUsers","updatePrivateUserData","uploadUserImage","ConfigApi","UserApi","injectEndpoints","endpoints","build","query","queryFn","begID","querySnapshot","users","docs","map","userDoc","data","console","warn","error","setUserImage","mutation","uri","url","updateUserFields","userFields","id","snapshot","overrideExisting","useGetUsersQuery","useSetUserImageMutation","useUpdateUserFieldsMutation"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/services/user-api.ts"],"sourcesContent":["import { getPrivateUserData, getUsers, updatePrivateUserData } from 'src/firebase/user-api';\nimport { PrivateUserData, PublicUserData } from 'src/types';\nimport { uploadUserImage } from 'src/firebase/storage-api';\nimport { ConfigApi } from './config-api';\n\n/**\n * Users api for fetching data related to users\n *\n * @resources\n * Customizing RTK Query with following resources\n * Firebase api calls with RTK-Query: https://stackoverflow.com/questions/71587312/is-it-possible-to-use-firebase-query-with-redux-toolkit-or-rtk-query-in-react)\n * Using queryfn: https://redux-toolkit.js.org/rtk-query/usage/customizing-queries#implementing-a-queryfn\n * Using fakeBaseQuery: https://redux-toolkit.js.org/rtk-query/usage-with-typescript#typing-a-queryfn\n * Code Splitting: https://redux-toolkit.js.org/rtk-query/usage/code-splitting\n *\n */\nexport const UserApi = ConfigApi.injectEndpoints({\n    endpoints: (build) => ({\n        getUsers: build.query<Array<PublicUserData>, string | undefined>({\n            /**\n             * Generating query for fetching and paginating users\n             *\n             * @return {*}\n             */\n            async queryFn(begID) {\n                try {\n                    const querySnapshot = await getUsers(begID, 3, 'desc');\n                    const users = querySnapshot.docs.map((userDoc) => userDoc.data());\n                    return { data: users };\n                } catch (e: any) {\n                    console.warn(`Error with fetching users`);\n                    return { error: e };\n                }\n            },\n        }),\n        setUserImage: build.mutation<string, string>({\n            /**\n             * Sets the user image in firestore.\n             *\n             * @param {*} uri\n             * @return {*}\n             */\n            async queryFn(uri) {\n                try {\n                    const url = await uploadUserImage(uri);\n                    return { data: url };\n                } catch (e: any) {\n                    console.warn(`Error with updating user image: ${e}`);\n                    return { error: e };\n                }\n            },\n        }),\n\n        updateUserFields: build.mutation<\n            PrivateUserData,\n            { id: string } & Partial<Omit<PrivateUserData, 'email'>>\n        >({\n            /**\n             * Sets the user fields in firebase, gets the user data to return\n             * If you want to update the user's email, use the updateUserEmail mutation from the auth api\n             *\n             * @param {*} userFields\n             * @return {*}\n             */\n            async queryFn(userFields) {\n                try {\n                    await updatePrivateUserData(userFields);\n                    const snapshot = await getPrivateUserData(userFields.id);\n                    return { data: snapshot.data() };\n                } catch (e: any) {\n                    console.warn(`Error with updating user fields: ${e}`);\n                    return { error: e };\n                }\n            },\n        }),\n    }),\n    overrideExisting: true,\n});\n\nexport const { useGetUsersQuery, useSetUserImageMutation, useUpdateUserFieldsMutation } = UserApi;\n"],"mappings":";AAAA,SAASA,kBAAkB,EAAEC,QAAQ,EAAEC,qBAAqB;AAE5D,SAASC,eAAe;AACxB,SAASC,SAAS;AAalB,OAAO,IAAMC,OAAO,GAAGD,SAAS,CAACE,eAAe,CAAC;EAC7CC,SAAS,EAAE,mBAACC,KAAK;IAAA,OAAM;MACnBP,QAAQ,EAAEO,KAAK,CAACC,KAAK,CAA4C;QAMvDC,OAAO,mBAACC,KAAK,EAAE;UAAA;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA;oBAAA,iCAEeV,QAAQ,CAACU,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC;kBAAA;oBAAhDC,aAAa;oBACbC,KAAK,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAAC,UAACC,OAAO;sBAAA,OAAKA,OAAO,CAACC,IAAI,EAAE;oBAAA,EAAC;oBAAA,iCAC1D;sBAAEA,IAAI,EAAEJ;oBAAM,CAAC;kBAAA;oBAAA;oBAAA;oBAEtBK,OAAO,CAACC,IAAI,6BAA6B;oBAAC,iCACnC;sBAAEC,KAAK;oBAAI,CAAC;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA;QAE3B;MACJ,CAAC,CAAC;MACFC,YAAY,EAAEb,KAAK,CAACc,QAAQ,CAAiB;QAOnCZ,OAAO,mBAACa,GAAG,EAAE;UAAA;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA;oBAAA,iCAEOpB,eAAe,CAACoB,GAAG,CAAC;kBAAA;oBAAhCC,GAAG;oBAAA,kCACF;sBAAEP,IAAI,EAAEO;oBAAI,CAAC;kBAAA;oBAAA;oBAAA;oBAEpBN,OAAO,CAACC,IAAI,mDAAwC;oBAAC,kCAC9C;sBAAEC,KAAK;oBAAI,CAAC;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA;QAE3B;MACJ,CAAC,CAAC;MAEFK,gBAAgB,EAAEjB,KAAK,CAACc,QAAQ,CAG9B;QAQQZ,OAAO,mBAACgB,UAAU,EAAE;UAAA;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA;oBAAA,iCAEZxB,qBAAqB,CAACwB,UAAU,CAAC;kBAAA;oBAAA;oBAAA,iCAChB1B,kBAAkB,CAAC0B,UAAU,CAACC,EAAE,CAAC;kBAAA;oBAAlDC,QAAQ;oBAAA,kCACP;sBAAEX,IAAI,EAAEW,QAAQ,CAACX,IAAI;oBAAG,CAAC;kBAAA;oBAAA;oBAAA;oBAEhCC,OAAO,CAACC,IAAI,oDAAyC;oBAAC,kCAC/C;sBAAEC,KAAK;oBAAI,CAAC;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA;QAE3B;MACJ,CAAC;IACL,CAAC;EAAA,CAAC;EACFS,gBAAgB,EAAE;AACtB,CAAC,CAAC;AAEK,IAAQC,gBAAgB,GAA2DzB,OAAO,CAAlFyB,gBAAgB;EAAEC,uBAAuB,GAAkC1B,OAAO,CAAhE0B,uBAAuB;EAAEC,2BAA2B,GAAK3B,OAAO,CAAvC2B,2BAA2B;AAAa"},"metadata":{},"sourceType":"module"}