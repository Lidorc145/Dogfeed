{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"_checkbox\", \"colorScheme\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport Box from \"../Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nexport var CheckboxGroupContext = createContext(null);\nfunction CheckboxGroup(_ref, ref) {\n  var size = _ref.size,\n    _checkbox = _ref._checkbox,\n    colorScheme = _ref.colorScheme,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var resolvedProps = usePropsResolution('CheckboxGroup', props);\n  var children = props.children;\n  var state = useCheckboxGroupState(props);\n  var _useCheckboxGroup = useCheckboxGroup(_objectSpread({\n      'aria-label': props.accessibilityLabel\n    }, props), state),\n    groupProps = _useCheckboxGroup.groupProps;\n  var formControlContext = useFormControlContext();\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    size: size,\n    colorScheme: colorScheme\n  }))) {\n    return null;\n  }\n  return React.createElement(CheckboxGroupContext.Provider, {\n    value: _objectSpread(_objectSpread(_objectSpread({\n      size: size,\n      colorScheme: colorScheme\n    }, _checkbox), formControlContext), {}, {\n      state: state\n    })\n  }, React.createElement(Box, _extends({}, resolvedProps, groupProps, props, {\n    ref: ref\n  }), children));\n}\nexport default memo(forwardRef(CheckboxGroup));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,IAA/B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,qBAAT;AAEA,OAAOC,GAAP;AACA,SAASC,qBAAT;AACA,SAASC,kBAAT;AAEA,OAAO,IAAMC,oBAAoB,GAAGT,aAAa,CAC/C,IAD+C,CAA1C;AAIP,SAASU,aAAT,OAEEC,GAFF,EAGE;EAAA,IAFEC,IAAF,QAAEA,IAAF;IAAQC,SAAR,QAAQA,SAAR;IAAmBC,WAAnB,QAAmBA,WAAnB;IAAmCC;EAGnC,IAAMC,aAAa,GAAGR,kBAAkB,CAAC,eAAD,EAAkBO,KAAlB,CAAxC;EACA,IAAQE,WAAaF,KAArB,CAAQE;EACR,IAAMC,KAAK,GAAGf,qBAAqB,CAACY,KAAD,CAAnC;EACA,wBAAuBX,gBAAgB;MACnC,cAAcW,KAAK,CAACI;IAAtB,GAA6CJ,QAC7CG,KAFqC,CAAvC;IAAQE;EAKR,IAAMC,kBAAkB,GAAGhB,qBAAqB,EAAhD;EAEA,IAAIE,qBAAqB,iCAAMQ,KAAL;IAAYH,IAAZ,EAAYA,IAAZ;IAAkBE;EAAAA,GAA5C,EAA4D;IAC1D,OAAO,IAAP;EACD;EACD,OACEf,oBAACU,oBAAD,CAAsBa,QAAtB;IACEC,KAAK;MAEHX,IAFK,EAELA,IAFK;MAGLE,WAHK,EAGLA;IAHK,GAIFD,SAJE,GAKFQ,kBALE;MAMLH;IAAAA;EAPJ,GAUEnB,oBAACO,GAAD,eAASU,aAAT,EAA4BI,UAA5B,EAA4CL,KAA5C;IAAmDJ,GAAG,EAAEA;EAAxD,IACGM,QADH,CAVF,CADF;AAgBD;AAED,eAAehB,IAAI,CAACC,UAAU,CAACQ,aAAD,CAAX,CAAnB","names":["React","createContext","memo","forwardRef","useCheckboxGroupState","useCheckboxGroup","useFormControlContext","Box","useHasResponsiveProps","usePropsResolution","CheckboxGroupContext","CheckboxGroup","ref","size","_checkbox","colorScheme","props","resolvedProps","children","state","accessibilityLabel","groupProps","formControlContext","Provider","value"],"sources":["CheckboxGroup.tsx"],"sourcesContent":["import React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n\n  const formControlContext = useFormControlContext();\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    <CheckboxGroupContext.Provider\n      value={{\n        //@ts-ignore\n        size,\n        colorScheme,\n        ..._checkbox,\n        ...formControlContext,\n        state,\n      }}\n    >\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"]},"metadata":{},"sourceType":"module"}