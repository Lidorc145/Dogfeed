{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\nvar $e40ea825a81a3709$export$52baac22726c72bf = function (_Set) {\n  _inherits($e40ea825a81a3709$export$52baac22726c72bf, _Set);\n  var _super = _createSuper($e40ea825a81a3709$export$52baac22726c72bf);\n  function $e40ea825a81a3709$export$52baac22726c72bf(keys, anchorKey, currentKey) {\n    var _this;\n    _classCallCheck(this, $e40ea825a81a3709$export$52baac22726c72bf);\n    _this = _super.call(this, keys);\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n    return _this;\n  }\n  return _createClass($e40ea825a81a3709$export$52baac22726c72bf);\n}(_wrapNativeSuper(Set));\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n  for (var _iterator = _createForOfIteratorHelperLoose(setA), _step; !(_step = _iterator()).done;) {\n    var item = _step.value;\n    if (!setB.has(item)) return false;\n  }\n  return true;\n}\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode,\n    disallowEmptySelection = props.disallowEmptySelection,\n    allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents,\n    _props$selectionBehav = props.selectionBehavior,\n    selectionBehaviorProp = _props$selectionBehav === void 0 ? 'toggle' : _props$selectionBehav,\n    _props$disabledBehavi = props.disabledBehavior,\n    disabledBehavior = _props$disabledBehavi === void 0 ? 'all' : _props$disabledBehavi;\n  var isFocusedRef = $Qsto2$useRef(false);\n  var _$Qsto2$useState = $Qsto2$useState(false),\n    _$Qsto2$useState2 = _slicedToArray(_$Qsto2$useState, 2),\n    _setFocused = _$Qsto2$useState2[1];\n  var focusedKeyRef = $Qsto2$useRef(null);\n  var childFocusStrategyRef = $Qsto2$useRef(null);\n  var _$Qsto2$useState3 = $Qsto2$useState(null),\n    _$Qsto2$useState4 = _slicedToArray(_$Qsto2$useState3, 2),\n    _setFocusedKey = _$Qsto2$useState4[1];\n  var selectedKeysProp = $Qsto2$useMemo(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = $Qsto2$useMemo(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf());\n  }, [props.defaultSelectedKeys]);\n  var _$Qsto2$useControlled = $Qsto2$useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n    _$Qsto2$useControlled2 = _slicedToArray(_$Qsto2$useControlled, 2),\n    selectedKeys = _$Qsto2$useControlled2[0],\n    _setSelectedKeys = _$Qsto2$useControlled2[1];\n  var disabledKeysProp = $Qsto2$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var _$Qsto2$useState5 = $Qsto2$useState(selectionBehaviorProp),\n    _$Qsto2$useState6 = _slicedToArray(_$Qsto2$useState5, 2),\n    selectionBehavior = _$Qsto2$useState6[0],\n    setSelectionBehavior = _$Qsto2$useState6[1];\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n  var lastSelectionBehavior = $Qsto2$useRef(selectionBehaviorProp);\n  $Qsto2$useEffect(function () {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n      _setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new $e40ea825a81a3709$export$52baac22726c72bf(selection);\n}\nvar $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = function () {\n  function $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, state, options) {\n    _classCallCheck(this, $d496c0a20b6e58ec$export$6c8a5aaad13c9852);\n    this.collection = collection;\n    this.state = state;\n    var ref;\n    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n    this._isSelectAll = null;\n  }\n  _createClass($d496c0a20b6e58ec$export$6c8a5aaad13c9852, [{\n    key: \"selectionMode\",\n    get: function get() {\n      return this.state.selectionMode;\n    }\n  }, {\n    key: \"disallowEmptySelection\",\n    get: function get() {\n      return this.state.disallowEmptySelection;\n    }\n  }, {\n    key: \"selectionBehavior\",\n    get: function get() {\n      return this.state.selectionBehavior;\n    }\n  }, {\n    key: \"setSelectionBehavior\",\n    value: function setSelectionBehavior(selectionBehavior) {\n      this.state.setSelectionBehavior(selectionBehavior);\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.state.isFocused;\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n  }, {\n    key: \"focusedKey\",\n    get: function get() {\n      return this.state.focusedKey;\n    }\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n  }, {\n    key: \"setFocusedKey\",\n    value: function setFocusedKey(key, childFocusStrategy) {\n      if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }, {\n    key: \"selectedKeys\",\n    get: function get() {\n      return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n  }, {\n    key: \"rawSelection\",\n    get: function get() {\n      return this.state.selectedKeys;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(key) {\n      if (this.state.selectionMode === 'none') return false;\n      key = this.getKey(key);\n      return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n    }\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n    }\n  }, {\n    key: \"isSelectAll\",\n    get: function get() {\n      if (this.isEmpty) return false;\n      if (this.state.selectedKeys === 'all') return true;\n      if (this._isSelectAll != null) return this._isSelectAll;\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var first = null;\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step2; !(_step2 = _iterator2()).done;) {\n        var key = _step2.value;\n        var item = this.collection.getItem(key);\n        if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n      }\n      return first === null || first === void 0 ? void 0 : first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var last = null;\n      for (var _iterator3 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n        var item = this.collection.getItem(key);\n        if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n      }\n      return last === null || last === void 0 ? void 0 : last.key;\n    }\n  }, {\n    key: \"disabledKeys\",\n    get: function get() {\n      return this.state.disabledKeys;\n    }\n  }, {\n    key: \"disabledBehavior\",\n    get: function get() {\n      return this.state.disabledBehavior;\n    }\n  }, {\n    key: \"extendSelection\",\n    value: function extendSelection(toKey) {\n      if (this.selectionMode === 'none') return;\n      if (this.selectionMode === 'single') {\n        this.replaceSelection(toKey);\n        return;\n      }\n      toKey = this.getKey(toKey);\n      var selection;\n      if (this.state.selectedKeys === 'all') selection = new $e40ea825a81a3709$export$52baac22726c72bf([toKey], toKey, toKey);else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n        for (var _iterator4 = _createForOfIteratorHelperLoose(this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)), _step4; !(_step4 = _iterator4()).done;) {\n          var key = _step4.value;\n          selection.delete(key);\n        }\n        for (var _iterator5 = _createForOfIteratorHelperLoose(this.getKeyRange(toKey, anchorKey)), _step5; !(_step5 = _iterator5()).done;) {\n          var key1 = _step5.value;\n          if (this.canSelectItem(key1)) selection.add(key1);\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n      if (fromItem && toItem) {\n        if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n        return this.getKeyRangeInternal(to, from);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n        if (key === to) return keys;\n        key = this.collection.getKeyAfter(key);\n      }\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item) return key;\n      if (item.type === 'cell' && this.allowsCellSelection) return key;\n      while (item.type !== 'item' && item.parentKey != null) {\n        item = this.collection.getItem(item.parentKey);\n      }\n      if (!item || item.type !== 'item') return null;\n      return item.key;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(key) {\n      if (this.selectionMode === 'none') return;\n      if (this.selectionMode === 'single' && !this.isSelected(key)) {\n        this.replaceSelection(key);\n        return;\n      }\n      key = this.getKey(key);\n      if (key == null) return;\n      var keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) return;\n      this.state.setSelectedKeys(keys);\n    }\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(key) {\n      if (this.selectionMode === 'none') return;\n      key = this.getKey(key);\n      if (key == null) return;\n      var selection = this.canSelectItem(key) ? new $e40ea825a81a3709$export$52baac22726c72bf([key], key, key) : new $e40ea825a81a3709$export$52baac22726c72bf();\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"setSelectedKeys\",\n    value: function setSelectedKeys(keys) {\n      if (this.selectionMode === 'none') return;\n      var selection = new $e40ea825a81a3709$export$52baac22726c72bf();\n      for (var _iterator6 = _createForOfIteratorHelperLoose(keys), _step6; !(_step6 = _iterator6()).done;) {\n        var key = _step6.value;\n        key = this.getKey(key);\n        if (key != null) {\n          selection.add(key);\n          if (this.selectionMode === 'single') break;\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n      var keys = [];\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (_this2.canSelectItem(key)) {\n            var item = _this2.collection.getItem(key);\n            if (item.type === 'item') keys.push(key);\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== 'item')) addKeys(_toConsumableArray(item.childNodes)[0].key);\n          }\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());\n    }\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      if (this.isSelectAll) this.clearSelection();else this.selectAll();\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === 'none') return;\n      if (this.selectionMode === 'single') {\n        if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n      } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) this.toggleSelection(key);else this.replaceSelection(key);\n    }\n  }, {\n    key: \"isSelectionEqual\",\n    value: function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) return true;\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) return false;\n      for (var _iterator7 = _createForOfIteratorHelperLoose(selection), _step7; !(_step7 = _iterator7()).done;) {\n        var key = _step7.value;\n        if (!selectedKeys.has(key)) return false;\n      }\n      for (var _iterator8 = _createForOfIteratorHelperLoose(selectedKeys), _step8; !(_step8 = _iterator8()).done;) {\n        var key2 = _step8.value;\n        if (!selection.has(key2)) return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"canSelectItem\",\n    value: function canSelectItem(key) {\n      if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n      var item = this.collection.getItem(key);\n      if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n      return true;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(key) {\n      return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n    }\n  }]);\n  return $d496c0a20b6e58ec$export$6c8a5aaad13c9852;\n}();\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"mappings":"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","names":["$e40ea825a81a3709$export$52baac22726c72bf","keys","anchorKey","currentKey","Set","$7af3f5b51489e0b5$var$equalSets","setA","setB","size","item","has","$7af3f5b51489e0b5$export$253fe78d46329472","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","selectionBehavior","selectionBehaviorProp","disabledBehavior","isFocusedRef","$Qsto2$useRef","$Qsto2$useState","setFocused","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","$Qsto2$useMemo","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","$Qsto2$useControlledState","onSelectionChange","setSelectedKeys","disabledKeysProp","disabledKeys","setSelectionBehavior","lastSelectionBehavior","$Qsto2$useEffect","current","isFocused","f","focusedKey","childFocusStrategy","k","selection","defaultValue","$d496c0a20b6e58ec$export$6c8a5aaad13c9852","collection","state","options","ref","allowsCellSelection","_isSelectAll","key","getItem","getSelectAllKeys","getKey","canSelectItem","isEmpty","allKeys","every","first","index","last","toKey","replaceSelection","getKeyRange","delete","key1","add","from","to","fromItem","toItem","getKeyRangeInternal","type","push","getKeyAfter","parentKey","isSelected","addKeys","hasChildNodes","childNodes","getFirstKey","isSelectAll","clearSelection","selectAll","e","toggleSelection","pointerType","key2"],"sources":["packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}