{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"wrapperRef\", \"isDisabled\", \"isInvalid\", \"isReadOnly\", \"isFocused\", \"isHovered\"],\n  _excluded2 = [\"totalLines\", \"onFocus\", \"onBlur\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Input } from \"../Input\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils\";\nvar TextArea = function TextArea(_ref2, ref) {\n  var wrapperRef = _ref2.wrapperRef,\n    isDisabled = _ref2.isDisabled,\n    isInvalid = _ref2.isInvalid,\n    isReadOnly = _ref2.isReadOnly,\n    isFocusedProp = _ref2.isFocused,\n    isHoveredProp = _ref2.isHovered,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var _ref = React.useRef(null);\n  var _useHover = useHover({}, _ref),\n    isHovered = _useHover.isHovered;\n  var _React$useState = React.useState(isFocusedProp),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isFocused = _React$useState2[0],\n    setIsFocused = _React$useState2[1];\n  var handleFocus = function handleFocus(focusState, callback) {\n    setIsFocused(focusState);\n    callback();\n  };\n  var _usePropsResolution = usePropsResolution('TextArea', props, {\n      isHovered: isHoveredProp || isHovered,\n      isDisabled: isDisabled,\n      isFocused: isFocused,\n      isInvalid: isInvalid,\n      isReadOnly: isReadOnly\n    }, {\n      extendTheme: ['Input']\n    }),\n    totalLines = _usePropsResolution.totalLines,\n    _onFocus = _usePropsResolution.onFocus,\n    _onBlur = _usePropsResolution.onBlur,\n    newProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Input, _extends({}, newProps, {\n    INTERNAL_notResolveThemeAndPseudoProps: true,\n    numberOfLines: totalLines,\n    wrapperRef: wrapperRef,\n    ref: mergeRefs([_ref, ref]),\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    },\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly\n  }));\n};\nexport default memo(forwardRef(TextArea));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT;AAEA,SAASC,kBAAT;AACA,SAASC,qBAAT;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,SAAT;AAcA,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,QAUZC,GAVe,EAWZ;EAAA,IATDC,UADF,SACEA,UADF;IAEEC,UAFF,SAEEA,UAFF;IAGEC,SAHF,SAGEA,SAHF;IAIEC,UAJF,SAIEA,UAJF;IAKaC,aALb,SAKEC,SAAS;IACEC,aANb,SAMEC,SAAS;IACNC;EAIL,IAAMC,IAAI,GAAGnB,KAAK,CAACoB,MAAN,CAAa,IAAb,CAAb;EACA,gBAAsBd,QAAQ,CAAC,EAAD,EAAKa,IAAL,CAA9B;IAAQF;EACR,sBAAkCjB,KAAK,CAACqB,QAAN,CAAeP,aAAf,CAAlC;IAAA;IAAOC,SAAD;IAAYO,YAAZ;EACN,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,UAAD,EAAsBC,QAAtB,EAAwC;IAC1DH,YAAY,CAACE,UAAD,CAAZ;IACAC,QAAQ;EACT,CAHD;EAIA,0BAAqDrB,kBAAkB,CACrE,UADqE,EAErEc,KAFqE,EAGrE;MACED,SAAS,EAAED,aAAa,IAAIC,SAD9B;MAEEN,UAFF,EAEEA,UAFF;MAGEI,SAHF,EAGEA,SAHF;MAIEH,SAJF,EAIEA,SAJF;MAKEC;IALF,CAHqE,EAUrE;MAAEa,WAAW,EAAE,CAAC,OAAD;IAAf,CAVqE,CAAvE;IAAQC,UAAF,uBAAEA,UAAF;IAAcC,QAAd,uBAAcA,OAAd;IAAuBC,OAAvB,uBAAuBA,MAAvB;IAAkCC;EAaxC,IAAIzB,qBAAqB,CAACa,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACElB,oBAACG,KAAD,eACM2B,QADN;IAEEC,sCAAsC,MAFxC;IAGEC,aAAa,EAAEL,UAHjB;IAIEjB,UAAU,EAAEA,UAJd;IAKED,GAAG,EAAEF,SAAS,CAAC,CAACY,IAAD,EAAOV,GAAP,CAAD,CALhB;IAMEmB,OAAO,EAAGK,kBAAD,EAAO;MACdV,WAAW,CAAC,IAAD,EAAOK,QAAO,GAAG;QAAA,OAAMA,QAAO,CAACK,CAAD,CAAhB;MAAA,IAAsB,YAAM,CAAE,CAA5C,CAAX;IACD,CARH;IASEJ,MAAM,EAAGI,iBAAD,EAAO;MACbV,WAAW,CAAC,KAAD,EAAQM,OAAM,GAAG;QAAA,OAAMA,OAAM,CAACI,CAAD,CAAf;MAAA,IAAqB,YAAM,CAAE,CAA3C,CAAX;IACD,CAXH;IAYEtB,UAAU,EAAEA,UAZd;IAaEC,SAAS,EAAEA,SAbb;IAcEC,UAAU,EAAEA;EAdd,GADF;AAkBD,CArDD;AAuDA,eAAeZ,IAAI,CAACC,UAAU,CAACM,QAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Input","usePropsResolution","useHasResponsiveProps","useHover","mergeRefs","TextArea","ref","wrapperRef","isDisabled","isInvalid","isReadOnly","isFocusedProp","isFocused","isHoveredProp","isHovered","props","_ref","useRef","useState","setIsFocused","handleFocus","focusState","callback","extendTheme","totalLines","onFocus","onBlur","newProps","INTERNAL_notResolveThemeAndPseudoProps","numberOfLines","e"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input } from '../Input';\nimport type { InterfaceInputProps } from '../Input/types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport type { PlatformProps } from '../../../components/types';\nexport interface ITextAreaProps\n  extends Omit<\n      InterfaceInputProps,\n      '_web' | '_android' | '_ios' | '_light' | '_dark' | '_important'\n    >,\n    PlatformProps<ITextAreaProps> {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = (\n  {\n    wrapperRef,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    ...props\n  }: ITextAreaProps,\n  ref: any\n) => {\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const [isFocused, setIsFocused] = React.useState(isFocusedProp);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n  const { totalLines, onFocus, onBlur, ...newProps } = usePropsResolution(\n    'TextArea',\n    props,\n    {\n      isHovered: isHoveredProp || isHovered,\n      isDisabled,\n      isFocused,\n      isInvalid,\n      isReadOnly,\n    },\n    { extendTheme: ['Input'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      {...newProps}\n      INTERNAL_notResolveThemeAndPseudoProps\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={mergeRefs([_ref, ref])}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      isDisabled={isDisabled}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]},"metadata":{},"sourceType":"module"}