{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var firebaseHandler = function _callee(fbQuery) {\n  var message, cause, fbError;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fbQuery);\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          message = null;\n          cause = 'email';\n          _context.t1 = _context.t0.code;\n          _context.next = _context.t1 === 'auth/invalid-email' ? 13 : _context.t1 === 'auth/user-disabled' ? 16 : _context.t1 === 'auth/user-not-found' ? 19 : _context.t1 === 'auth/wrong-password' ? 22 : _context.t1 === 'auth/user-mismatch' ? 25 : _context.t1 === 'auth/too-many-requests' ? 28 : 31;\n          break;\n        case 13:\n          message = 'Email is invalid.';\n          cause = 'email';\n          return _context.abrupt(\"break\", 35);\n        case 16:\n          message = \"User's account is disabled.\";\n          cause = 'account';\n          return _context.abrupt(\"break\", 35);\n        case 19:\n          message = 'User does not exist.';\n          cause = 'account';\n          return _context.abrupt(\"break\", 35);\n        case 22:\n          message = 'Email or password is incorrect.';\n          cause = 'password';\n          return _context.abrupt(\"break\", 35);\n        case 25:\n          message = 'User credentials do not match.';\n          cause = 'account';\n          return _context.abrupt(\"break\", 35);\n        case 28:\n          message = 'Account has exceeded its request limit.';\n          cause = 'account';\n          return _context.abrupt(\"break\", 35);\n        case 31:\n          message = 'Backend Error';\n          cause = 'account';\n          console.warn(\"New Backend error\");\n          console.warn(_context.t0);\n        case 35:\n          fbError = {\n            name: 'Firebase Error',\n            message: message,\n            code: _context.t0.code,\n            errorCause: cause\n          };\n          throw fbError;\n        case 37:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\nexport var firestoreGetHandler = function _callee2(firestoreQuery) {\n  var result, fbError;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(firebaseHandler(firestoreQuery));\n        case 2:\n          result = _context2.sent;\n          if (!result.exists()) {\n            _context2.next = 5;\n            break;\n          }\n          return _context2.abrupt(\"return\", result);\n        case 5:\n          fbError = {\n            name: 'Firebase Error',\n            message: 'Document does not exist',\n            code: 'firestore/does-not-exist',\n            errorCause: 'firestore-document'\n          };\n          throw fbError;\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["firebaseHandler","fbQuery","message","cause","code","console","warn","fbError","name","errorCause","firestoreGetHandler","firestoreQuery","result","exists"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/firebase/handler.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport { DocumentSnapshot, QueryDocumentSnapshot } from 'firebase/firestore';\n\n/**\n * FirebaseError type used to render errors to the user in the frontend\n *\n * @export\n * @interface FirebaseError\n * @extends {Error}\n */\nexport interface FirebaseError extends Error {\n    message: string;\n    code: string | null;\n    errorCause: 'email' | 'password' | 'account' | string;\n}\n\n/**\n * fbHandler will handle the promise and throw a firebase error if it is not handled correctly\n *\n * @template T\n * @param {Promise<any>} fbQuery\n * @return {*}  {Promise<Awaited<T>>}\n */\nexport const firebaseHandler = async <T>(fbQuery: Promise<any>): Promise<T> => {\n    /*\n        Function will handles catching errors with firebase, returning errors in the Firebase Error format\n        This will help with catching and display error messages to the user on the frontend.\n    */\n    try {\n        return await fbQuery;\n    } catch (error: any) {\n        // Define different firebase user errors\n        let message = null;\n        let cause = 'email';\n        switch (error.code) {\n            case 'auth/invalid-email':\n                message = 'Email is invalid.';\n                cause = 'email';\n                break;\n            case 'auth/user-disabled':\n                message = \"User's account is disabled.\";\n                cause = 'account';\n                break;\n            case 'auth/user-not-found':\n                message = 'User does not exist.';\n                cause = 'account';\n                break;\n            case 'auth/wrong-password':\n                message = 'Email or password is incorrect.';\n                cause = 'password';\n                break;\n            case 'auth/user-mismatch':\n                message = 'User credentials do not match.';\n                cause = 'account';\n                break;\n            case 'auth/too-many-requests':\n                message = 'Account has exceeded its request limit.';\n                cause = 'account';\n                break;\n            default:\n                message = 'Backend Error';\n                cause = 'account';\n                console.warn(`New Backend error`);\n                console.warn(error);\n        }\n\n        // assign values to interface\n        const fbError: FirebaseError = {\n            name: 'Firebase Error',\n            message,\n            code: error.code,\n            errorCause: cause,\n        };\n        throw fbError;\n    }\n};\n\n/**\n * Function used to handle functions that fetch data using a getDoc method, will return an error if no documents match\n *\n * @template T\n * @param {Promise<DocumentSnapshot<T>>} firestoreQuery\n * @return {Promise<QueryDocumentSnapshot<T>>}\n */\nexport const firestoreGetHandler = async <T>(\n    firestoreQuery: Promise<DocumentSnapshot<T>>,\n): Promise<QueryDocumentSnapshot<T>> => {\n    const result = await firebaseHandler<DocumentSnapshot<T>>(firestoreQuery);\n    if (result.exists()) {\n        return result;\n    }\n\n    // throw document does not exist\n    const fbError: FirebaseError = {\n        name: 'Firebase Error',\n        message: 'Document does not exist',\n        code: 'firestore/does-not-exist',\n        errorCause: 'firestore-document',\n    };\n    throw fbError;\n};\n"],"mappings":";AAuBA,OAAO,IAAMA,eAAe,GAAG,iBAAUC,OAAqB;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA;UAAA,iCAMzCA,OAAO;QAAA;UAAA;QAAA;UAAA;UAAA;UAGhBC,OAAO,GAAG,IAAI;UACdC,KAAK,GAAG,OAAO;UAAA,cACX,YAAMC,IAAI;UAAA,gCACT,oBAAoB,wBAIpB,oBAAoB,wBAIpB,qBAAqB,wBAIrB,qBAAqB,wBAIrB,oBAAoB,wBAIpB,wBAAwB;UAAA;QAAA;UAnBzBF,OAAO,GAAG,mBAAmB;UAC7BC,KAAK,GAAG,OAAO;UAAC;QAAA;UAGhBD,OAAO,GAAG,6BAA6B;UACvCC,KAAK,GAAG,SAAS;UAAC;QAAA;UAGlBD,OAAO,GAAG,sBAAsB;UAChCC,KAAK,GAAG,SAAS;UAAC;QAAA;UAGlBD,OAAO,GAAG,iCAAiC;UAC3CC,KAAK,GAAG,UAAU;UAAC;QAAA;UAGnBD,OAAO,GAAG,gCAAgC;UAC1CC,KAAK,GAAG,SAAS;UAAC;QAAA;UAGlBD,OAAO,GAAG,yCAAyC;UACnDC,KAAK,GAAG,SAAS;UAAC;QAAA;UAGlBD,OAAO,GAAG,eAAe;UACzBC,KAAK,GAAG,SAAS;UACjBE,OAAO,CAACC,IAAI,qBAAqB;UACjCD,OAAO,CAACC,IAAI,aAAO;QAAC;UAItBC,OAAsB,GAAG;YAC3BC,IAAI,EAAE,gBAAgB;YACtBN,OAAO,EAAPA,OAAO;YACPE,IAAI,EAAE,YAAMA,IAAI;YAChBK,UAAU,EAAEN;UAChB,CAAC;UAAA,MACKI,OAAO;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAEpB;AASD,OAAO,IAAMG,mBAAmB,GAAG,kBAC/BC,cAA4C;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,iCAEvBX,eAAe,CAAsBW,cAAc,CAAC;QAAA;UAAnEC,MAAM;UAAA,KACRA,MAAM,CAACC,MAAM,EAAE;YAAA;YAAA;UAAA;UAAA,kCACRD,MAAM;QAAA;UAIXL,OAAsB,GAAG;YAC3BC,IAAI,EAAE,gBAAgB;YACtBN,OAAO,EAAE,yBAAyB;YAClCE,IAAI,EAAE,0BAA0B;YAChCK,UAAU,EAAE;UAChB,CAAC;UAAA,MACKF,OAAO;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAChB"},"metadata":{},"sourceType":"module"}