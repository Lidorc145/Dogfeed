{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport { Box, Button, KeyboardAvoidingView, Text, useToast } from 'native-base';\nimport { FormInput } from \"../components/form-input\";\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { newPasswordSchema } from \"../utils/schemas\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useUpdatePasswordMutation } from \"../services\";\nimport { useAppSelector } from \"../ducks/useful-hooks\";\nimport { AlertToast } from \"../components/alert-toast\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var ChangePasswordScreen = function ChangePasswordScreen(_ref) {\n  var _errors$password, _errors$newPassword, _errors$confirmPasswo;\n  var navigation = _ref.navigation;\n  var userEmail = useAppSelector(function (state) {\n    return state.user.email;\n  });\n  var _useUpdatePasswordMut = useUpdatePasswordMutation(),\n    _useUpdatePasswordMut2 = _slicedToArray(_useUpdatePasswordMut, 2),\n    setNewPassword = _useUpdatePasswordMut2[0],\n    _useUpdatePasswordMut3 = _useUpdatePasswordMut2[1],\n    isLoading = _useUpdatePasswordMut3.isLoading,\n    isSuccess = _useUpdatePasswordMut3.isSuccess,\n    isError = _useUpdatePasswordMut3.isError,\n    error = _useUpdatePasswordMut3.error;\n  var _useForm = useForm({\n      resolver: yupResolver(newPasswordSchema)\n    }),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    errors = _useForm.formState.errors;\n  var toast = useToast();\n  useEffect(function () {\n    if (!isLoading && isSuccess) {\n      toast.show({\n        placement: 'bottom',\n        render: function render() {\n          return _jsx(AlertToast, {\n            title: \"Password Changed!\",\n            type: \"success\",\n            message: \"Your password has been successfully changed.\",\n            toExit: function toExit() {\n              return toast.close('pw-toast');\n            }\n          });\n        },\n        id: 'pw-toast'\n      });\n      navigation.goBack();\n    }\n  }, [isLoading, isSuccess, navigation, toast]);\n  var updatePassword = function _callee(_ref2) {\n    var password, newPassword;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            password = _ref2.password, newPassword = _ref2.newPassword;\n            if (userEmail) setNewPassword({\n              email: userEmail,\n              oldPassword: password,\n              newPassword: newPassword\n            });\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  return _jsx(KeyboardAvoidingView, {\n    h: {\n      lg: 'auto'\n    },\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    onTouchStart: function onTouchStart() {\n      return Keyboard.dismiss();\n    },\n    w: \"100%\",\n    children: _jsxs(Box, {\n      px: 5,\n      mt: 5,\n      children: [_jsx(FormInput, {\n        mt: 1,\n        name: \"password\",\n        control: control,\n        isInvalid: 'password' in errors,\n        password: true,\n        label: \"Enter your old password\",\n        placeholder: \"Old Password\",\n        defaultValue: \"\",\n        errorMessage: errors == null ? void 0 : (_errors$password = errors.password) == null ? void 0 : _errors$password.message\n      }, \"password\"), _jsx(FormInput, {\n        name: \"newPassword\",\n        control: control,\n        isInvalid: 'newPassword' in errors,\n        password: true,\n        label: \"Enter your new password\",\n        placeholder: \"New Password\",\n        defaultValue: \"\",\n        errorMessage: errors == null ? void 0 : (_errors$newPassword = errors.newPassword) == null ? void 0 : _errors$newPassword.message\n      }, \"newPassword\"), _jsx(FormInput, {\n        name: \"confirmPassword\",\n        control: control,\n        isInvalid: 'confirmPassword' in errors,\n        password: true,\n        label: \"Confirm your new password\",\n        placeholder: \"Confirm Password\",\n        defaultValue: \"\",\n        errorMessage: errors == null ? void 0 : (_errors$confirmPasswo = errors.confirmPassword) == null ? void 0 : _errors$confirmPasswo.message\n      }, \"confirmPassword\"), isError ? _jsx(Text, {\n        color: \"danger.600\",\n        textAlign: \"center\",\n        mt: 5,\n        children: error == null ? void 0 : error.message\n      }) : null, _jsx(Button, {\n        isLoading: isLoading,\n        mt: 8,\n        onPress: handleSubmit(updatePassword),\n        children: \"Update Password\"\n      }), _jsx(Button, {\n        colorScheme: \"danger\",\n        variant: \"ghost\",\n        my: 5,\n        onPress: navigation.goBack,\n        children: \"Cancel\"\n      })]\n    })\n  });\n};","map":{"version":3,"names":["React","useEffect","Box","Button","KeyboardAvoidingView","Text","useToast","FormInput","useForm","yupResolver","newPasswordSchema","useUpdatePasswordMutation","useAppSelector","AlertToast","ChangePasswordScreen","navigation","userEmail","state","user","email","setNewPassword","isLoading","isSuccess","isError","error","resolver","control","handleSubmit","errors","formState","toast","show","placement","render","close","id","goBack","updatePassword","password","newPassword","oldPassword","lg","Platform","OS","Keyboard","dismiss","message","confirmPassword"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/screens/change-password.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Box, Button, KeyboardAvoidingView, Text, useToast } from 'native-base';\nimport { FormInput } from 'src/components/form-input';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { newPasswordSchema, NewPasswordSchemaType } from 'src/utils/schemas';\nimport { Keyboard, Platform } from 'react-native';\nimport { SettingStackParams } from 'src/navigation/settings-stack';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport { useUpdatePasswordMutation } from 'src/services';\nimport { useAppSelector } from 'src/ducks/useful-hooks';\nimport { AlertToast } from 'src/components/alert-toast';\n\ntype ChangePasswordScreenProps = StackScreenProps<SettingStackParams, 'Password'>;\n\nexport /**\n * Change password screen, form that allows users to change password.\n *\n * @param {*} { navigation }\n * @return {*}\n */\nconst ChangePasswordScreen: React.FC<ChangePasswordScreenProps> = ({ navigation }) => {\n    // declare hooks\n    const userEmail = useAppSelector((state) => state.user.email);\n    const [setNewPassword, { isLoading, isSuccess, isError, error }] = useUpdatePasswordMutation();\n    // form validation\n    const {\n        control,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<NewPasswordSchemaType>({\n        resolver: yupResolver(newPasswordSchema),\n    });\n    // declare toast\n    const toast = useToast();\n\n    // effect hook for navigating back to the setting screen\n    useEffect(() => {\n        if (!isLoading && isSuccess) {\n            toast.show({\n                placement: 'bottom',\n                render: () => (\n                    <AlertToast\n                        title=\"Password Changed!\"\n                        type=\"success\"\n                        message=\"Your password has been successfully changed.\"\n                        toExit={() => toast.close('pw-toast')}\n                    />\n                ),\n                id: 'pw-toast',\n            });\n            navigation.goBack();\n        }\n    }, [isLoading, isSuccess, navigation, toast]);\n\n    const updatePassword = async ({ password, newPassword }: NewPasswordSchemaType) => {\n        if (userEmail) setNewPassword({ email: userEmail, oldPassword: password, newPassword });\n    };\n\n    return (\n        <KeyboardAvoidingView\n            h={{\n                lg: 'auto',\n            }}\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            onTouchStart={() => Keyboard.dismiss()}\n            w=\"100%\">\n            <Box px={5} mt={5}>\n                <FormInput\n                    mt={1}\n                    key=\"password\"\n                    name=\"password\"\n                    control={control}\n                    isInvalid={'password' in errors}\n                    password\n                    label=\"Enter your old password\"\n                    placeholder=\"Old Password\"\n                    defaultValue=\"\"\n                    errorMessage={errors?.password?.message}\n                />\n                <FormInput\n                    key=\"newPassword\"\n                    name=\"newPassword\"\n                    control={control}\n                    isInvalid={'newPassword' in errors}\n                    password\n                    label=\"Enter your new password\"\n                    placeholder=\"New Password\"\n                    defaultValue=\"\"\n                    errorMessage={errors?.newPassword?.message}\n                />\n                <FormInput\n                    key=\"confirmPassword\"\n                    name=\"confirmPassword\"\n                    control={control}\n                    isInvalid={'confirmPassword' in errors}\n                    password\n                    label=\"Confirm your new password\"\n                    placeholder=\"Confirm Password\"\n                    defaultValue=\"\"\n                    errorMessage={errors?.confirmPassword?.message}\n                />\n                {isError ? (\n                    <Text color=\"danger.600\" textAlign=\"center\" mt={5}>\n                        {error?.message}\n                    </Text>\n                ) : null}\n                <Button isLoading={isLoading} mt={8} onPress={handleSubmit(updatePassword)}>\n                    Update Password\n                </Button>\n                <Button colorScheme=\"danger\" variant=\"ghost\" my={5} onPress={navigation.goBack}>\n                    Cancel\n                </Button>\n            </Box>\n        </KeyboardAvoidingView>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}