{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"control\", \"name\", \"isInvalid\", \"label\", \"password\", \"errorMessage\", \"defaultValue\", \"placeholder\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState } from 'react';\nimport { FormControl, Input, Icon, WarningOutlineIcon, View } from 'native-base';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Controller } from 'react-hook-form';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var FormInput = function FormInput(_ref) {\n  var control = _ref.control,\n    name = _ref.name,\n    isInvalid = _ref.isInvalid,\n    label = _ref.label,\n    password = _ref.password,\n    errorMessage = _ref.errorMessage,\n    defaultValue = _ref.defaultValue,\n    placeholder = _ref.placeholder,\n    inputParams = _objectWithoutProperties(_ref, _excluded);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPassword = _useState2[0],\n    setShowPassword = _useState2[1];\n  return _jsxs(FormControl, _objectSpread(_objectSpread({\n    isInvalid: isInvalid\n  }, inputParams), {}, {\n    children: [_jsx(FormControl.Label, {\n      color: \"plainText.500\",\n      children: label\n    }), _jsx(Controller, {\n      name: name,\n      control: control,\n      defaultValue: defaultValue,\n      render: function render(_ref2) {\n        var _ref2$field = _ref2.field,\n          onBlur = _ref2$field.onBlur,\n          onChange = _ref2$field.onChange,\n          value = _ref2$field.value;\n        return _jsx(View, {\n          children: password ? _jsx(Input, {\n            variant: \"filled\",\n            color: \"plainText.800\",\n            value: value,\n            bgColor: \"background.200\",\n            selectionColor: \"plainText.500\",\n            borderColor: \"background.400\",\n            onBlur: onBlur,\n            onChangeText: onChange,\n            w: \"100%\",\n            h: \"auto\",\n            fontSize: \"lg\",\n            size: \"lg\",\n            clearButtonMode: \"while-editing\",\n            autoCapitalize: \"none\",\n            placeholder: placeholder,\n            type: showPassword ? 'text' : 'password',\n            InputRightElement: _jsx(Icon, {\n              as: _jsx(MaterialIcons, {\n                name: showPassword ? 'visibility' : 'visibility-off'\n              }),\n              size: 5,\n              mr: \"2\",\n              color: \"muted.400\",\n              onPress: function onPress() {\n                return setShowPassword(!showPassword);\n              }\n            })\n          }) : _jsx(Input, {\n            value: value,\n            color: \"plainText.800\",\n            bgColor: \"background.200\",\n            selectionColor: \"plainText.500\",\n            borderColor: \"background.400\",\n            onBlur: onBlur,\n            onChangeText: onChange,\n            w: \"100%\",\n            fontSize: \"lg\",\n            size: \"lg\",\n            clearButtonMode: \"while-editing\",\n            autoCapitalize: \"none\",\n            placeholder: placeholder\n          })\n        });\n      }\n    }, \"email\"), isInvalid ? _jsx(FormControl.ErrorMessage, {\n      leftIcon: _jsx(WarningOutlineIcon, {}),\n      children: errorMessage\n    }) : null]\n  }), \"testing\");\n};\nFormInput.defaultProps = {\n  control: undefined,\n  isInvalid: false,\n  label: '',\n  password: false,\n  errorMessage: undefined,\n  defaultValue: undefined\n};","map":{"version":3,"names":["React","useState","FormControl","Input","Icon","WarningOutlineIcon","View","MaterialIcons","Controller","FormInput","control","name","isInvalid","label","password","errorMessage","defaultValue","placeholder","inputParams","showPassword","setShowPassword","field","onBlur","onChange","value","defaultProps","undefined"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/components/form-input/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { FormControl, Input, Icon, WarningOutlineIcon, IInputProps, View } from 'native-base';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Control, Controller } from 'react-hook-form';\n\n/**\n * Props extend from nativebase IInputProps props\n *\n * @export\n * @interface FormInputParams\n * @extends {IInputProps}\n */\nexport interface FormInputParams extends IInputProps {\n    control?: Control<any, any> | undefined; // control passed into react-hook-form controller input: https://www.react-hook-form.com/get-started#IntegratingwithUIlibraries\n    name: string; // required for the react-hook-form controller\n    isInvalid?: boolean | undefined; // will set if form is invalid or not\n    label?: string | undefined; // used as the title label above the input\n    password?: boolean; // need default prop inputs, will automatically set props if password\n    errorMessage?: string | undefined; // will signal if there is an error on the form input\n    defaultValue?: string | undefined; // default value to put into form controller\n}\n\nexport const FormInput: React.FC<FormInputParams> = ({\n    control,\n    name,\n    isInvalid,\n    label,\n    password,\n    errorMessage,\n    defaultValue,\n    placeholder,\n    ...inputParams\n}) => {\n    /*\n        Component that will validate the user input and renders a form input\n    */\n\n    // states\n    const [showPassword, setShowPassword] = useState(false);\n\n    // password props\n    // const passwordProps = password\n    //     ? {\n    //           type: showPassword ? 'text' : 'password',\n    //           InputRightElement: (\n    //               <Icon\n    //                   as={<MaterialIcons name={showPassword ? 'visibility' : 'visibility-off'} />}\n    //                   size={5}\n    //                   mr=\"2\"\n    //                   color=\"muted.400\"\n    //                   onPress={() => setShowPassword(!showPassword)}\n    //               />\n    //           ),\n    //       }\n    //     : {};\n\n    return (\n        <FormControl key=\"testing\" isInvalid={isInvalid} {...inputParams}>\n            <FormControl.Label color=\"plainText.500\">{label}</FormControl.Label>\n            <Controller\n                key=\"email\"\n                name={name}\n                control={control}\n                defaultValue={defaultValue}\n                render={({ field: { onBlur, onChange, value } }) => (\n                    <View>\n                        {password ? (\n                            <Input\n                                variant=\"filled\"\n                                color=\"plainText.800\"\n                                value={value}\n                                bgColor=\"background.200\"\n                                selectionColor=\"plainText.500\"\n                                borderColor=\"background.400\"\n                                onBlur={onBlur}\n                                onChangeText={onChange}\n                                w=\"100%\"\n                                h=\"auto\"\n                                fontSize=\"lg\"\n                                size=\"lg\"\n                                clearButtonMode=\"while-editing\"\n                                autoCapitalize=\"none\"\n                                placeholder={placeholder}\n                                type={showPassword ? 'text' : 'password'}\n                                InputRightElement={\n                                    <Icon\n                                        as={\n                                            <MaterialIcons\n                                                name={\n                                                    showPassword ? 'visibility' : 'visibility-off'\n                                                }\n                                            />\n                                        }\n                                        size={5}\n                                        mr=\"2\"\n                                        color=\"muted.400\"\n                                        onPress={() => setShowPassword(!showPassword)}\n                                    />\n                                }\n                            />\n                        ) : (\n                            <Input\n                                value={value}\n                                color=\"plainText.800\"\n                                bgColor=\"background.200\"\n                                selectionColor=\"plainText.500\"\n                                borderColor=\"background.400\"\n                                onBlur={onBlur}\n                                onChangeText={onChange}\n                                w=\"100%\"\n                                fontSize=\"lg\"\n                                size=\"lg\"\n                                clearButtonMode=\"while-editing\"\n                                autoCapitalize=\"none\"\n                                placeholder={placeholder}\n                            />\n                        )}\n                    </View>\n                )}\n            />\n            {isInvalid ? (\n                <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon />}>\n                    {errorMessage}\n                </FormControl.ErrorMessage>\n            ) : null}\n        </FormControl>\n    );\n};\n\nFormInput.defaultProps = {\n    control: undefined,\n    isInvalid: false,\n    label: '',\n    password: false,\n    errorMessage: undefined,\n    defaultValue: undefined,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}