{"ast":null,"code":"import * as yup from 'yup';\nexport var authenticateSchema = yup.object().shape({\n  email: yup.string().email('Invalid email').required('Email is required'),\n  password: yup.string().required('Password is required')\n});\nexport var emailSchema = yup.object().shape({\n  email: yup.string().email('Invalid email').required('Email is required')\n});\nexport var signupSchema = yup.object().shape({\n  password: yup.string().required('Password is required').min(8, 'Minimum 8 characters'),\n  confirmPassword: yup.string().test({\n    name: 'confirmPassword',\n    message: 'Passwords must match',\n    test: function test() {\n      var _this$parent = this.parent,\n        password = _this$parent.password,\n        confirmPassword = _this$parent.confirmPassword;\n      if (password && confirmPassword !== password) {\n        return false;\n      }\n      return true;\n    }\n  })\n});\nexport var loginSchema = yup.object().shape({\n  password: yup.string().required('Password is required')\n});\nexport var editProfileSchema = yup.object().shape({\n  firstName: yup.string(),\n  lastName: yup.string()\n});\nexport var newPasswordSchema = yup.object().shape({\n  password: yup.string().required('Password is required').min(8, 'Minimum 8 characters'),\n  newPassword: yup.string().required('Password is required').min(8, 'Minimum 8 characters'),\n  confirmPassword: yup.string().test({\n    name: 'confirmPassword',\n    message: 'Passwords must match',\n    test: function test() {\n      var _this$parent2 = this.parent,\n        newPassword = _this$parent2.newPassword,\n        confirmPassword = _this$parent2.confirmPassword;\n      if (newPassword && confirmPassword !== newPassword) {\n        return false;\n      }\n      return true;\n    }\n  })\n});\nexport var newEmailSchema = yup.object().shape({\n  oldEmail: yup.string().email('Invalid email').required('Email is required'),\n  password: yup.string().required('Password is required'),\n  newEmail: yup.string().email('Invalid email').required('New email is required')\n});","map":{"version":3,"names":["yup","authenticateSchema","object","shape","email","string","required","password","emailSchema","signupSchema","min","confirmPassword","test","name","message","parent","loginSchema","editProfileSchema","firstName","lastName","newPasswordSchema","newPassword","newEmailSchema","oldEmail","newEmail"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/utils/schemas.ts"],"sourcesContent":["import * as yup from 'yup';\n\n/**\n * File defines varies yup schemas to be used for form validation\n */\n\nexport const authenticateSchema = yup.object().shape({\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup.string().required('Password is required'),\n});\nexport interface AuthenticateSchemaType extends yup.InferType<typeof authenticateSchema> {}\n\n/**\n * schema for a one form input for email\n */\nexport const emailSchema = yup.object().shape({\n    email: yup.string().email('Invalid email').required('Email is required'),\n});\nexport interface EmailSchemaType extends yup.InferType<typeof emailSchema> {}\n\n/**\n * Password and confirm password schema\n */\nexport const signupSchema = yup.object().shape({\n    password: yup.string().required('Password is required').min(8, 'Minimum 8 characters'),\n    confirmPassword: yup.string().test({\n        name: 'confirmPassword',\n        message: 'Passwords must match',\n        test() {\n            const { password, confirmPassword } = this.parent;\n            if (password && confirmPassword !== password) {\n                return false;\n            }\n            return true;\n        },\n    }),\n});\nexport interface SignupSchemaType extends yup.InferType<typeof signupSchema> {}\n\n/**\n * Password schema\n */\nexport const loginSchema = yup.object().shape({\n    password: yup.string().required('Password is required'),\n});\nexport interface LoginSchemaType extends yup.InferType<typeof loginSchema> {}\n\n// New schema for editing profile\nexport const editProfileSchema = yup.object().shape({\n    firstName: yup.string(),\n    lastName: yup.string(),\n});\nexport interface EditProfileSchemaType extends yup.InferType<typeof editProfileSchema> {}\n\n// Editing Password Schema\nexport const newPasswordSchema = yup.object().shape({\n    password: yup.string().required('Password is required').min(8, 'Minimum 8 characters'),\n    newPassword: yup.string().required('Password is required').min(8, 'Minimum 8 characters'),\n    confirmPassword: yup.string().test({\n        name: 'confirmPassword',\n        message: 'Passwords must match',\n        test() {\n            const { newPassword, confirmPassword } = this.parent;\n            if (newPassword && confirmPassword !== newPassword) {\n                return false;\n            }\n            return true;\n        },\n    }),\n});\nexport interface NewPasswordSchemaType extends yup.InferType<typeof newPasswordSchema> {}\n\nexport const newEmailSchema = yup.object().shape({\n    oldEmail: yup.string().email('Invalid email').required('Email is required'),\n    password: yup.string().required('Password is required'),\n    newEmail: yup.string().email('Invalid email').required('New email is required'),\n});\nexport interface NewEmailSchemaType extends yup.InferType<typeof newEmailSchema> {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}