{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"colorScheme\", \"_radio\", \"children\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Stack } from \"../Stack\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nexport var RadioContext = React.createContext({});\nvar RadioWrapper = memo(function (props) {\n  var resolvedProps = usePropsResolution('RadioGroup', props);\n  return React.createElement(Stack, _extends({}, resolvedProps, props.radioGroupProps, props));\n});\nvar RadioGroup = function RadioGroup(_ref, ref) {\n  var size = _ref.size,\n    colorScheme = _ref.colorScheme,\n    _radio = _ref._radio,\n    children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var formControlContext = useFormControlContext();\n  var state = useRadioGroupState(props);\n  var radioGroupState = useRadioGroup(_objectSpread(_objectSpread(_objectSpread({}, formControlContext), props), {}, {\n    'aria-label': props.accessibilityLabel\n  }), state);\n  var _React$useState = React.useState(props),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    propsState = _React$useState2[0];\n  var contextValue = React.useMemo(function () {\n    return _objectSpread(_objectSpread({\n      formControlContext: formControlContext,\n      size: size,\n      colorScheme: colorScheme\n    }, _radio), {}, {\n      state: state\n    });\n  }, [size, colorScheme, formControlContext, state, _radio]);\n  var radioGroupProps = React.useMemo(function () {\n    return radioGroupState.radioGroupProps;\n  }, []);\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    size: size,\n    colorScheme: colorScheme\n  }))) {\n    return null;\n  }\n  return React.createElement(RadioContext.Provider, {\n    value: contextValue\n  }, React.createElement(RadioWrapper, _extends({}, radioGroupProps, propsState, {\n    ref: ref\n  }), children));\n};\nexport default memo(forwardRef(RadioGroup));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT;AACA,SAASC,qBAAT;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,qBAAT;AACA,SAASC,kBAAT;AAEA,OAAO,IAAMC,YAAY,GAAGT,KAAK,CAACU,aAAN,CAC1B,EAD0B,CAArB;AAGP,IAAMC,YAAY,GAAGV,IAAI,CAAEW,eAAD,EAAgB;EACxC,IAAMC,aAAa,GAAGL,kBAAkB,CAAC,YAAD,EAAeI,KAAf,CAAxC;EACA,OAAOZ,oBAACG,KAAD,eAAWU,aAAX,EAA8BD,KAAK,CAACE,eAApC,EAAyDF,KAAzD,EAAP;AACD,CAHwB,CAAzB;AAKA,IAAMG,UAAU,GAAG,SAAbA,UAAU,OAEdC,GAFiB,EAGd;EAAA,IAFDC,IAAF,QAAEA,IAAF;IAAQC,WAAR,QAAQA,WAAR;IAAqBC,MAArB,QAAqBA,MAArB;IAA6BC,QAA7B,QAA6BA,QAA7B;IAA0CR;EAG1C,IAAMS,kBAAkB,GAAGjB,qBAAqB,EAAhD;EAEA,IAAMkB,KAAK,GAAGjB,kBAAkB,CAACO,KAAD,CAAhC;EACA,IAAMW,eAAe,GAAGjB,aAAa,+CAC9Be,kBAAL,GAA4BT,KAA5B;IAAmC,cAAcA,KAAK,CAACY;EAAAA,IACvDF,KAFmC,CAArC;EAIA,sBAAqBtB,KAAK,CAACyB,QAAN,CAAeb,KAAf,CAArB;IAAA;IAAOc,UAAD;EACN,IAAMC,YAAiB,GAAG3B,KAAK,CAAC4B,OAAN,CAAc,YAAM;IAC5C;MACEP,kBADK,EACLA,kBADK;MAELJ,IAFK,EAELA,IAFK;MAGLC,WAHK,EAGLA;IAHK,GAIFC,MAJE;MAKLG;IAAAA;EAEH,CARyB,EAQvB,CAACL,IAAD,EAAOC,WAAP,EAAoBG,kBAApB,EAAwCC,KAAxC,EAA+CH,MAA/C,CARuB,CAA1B;EAUA,IAAML,eAAe,GAAGd,KAAK,CAAC4B,OAAN,CACtB;IAAA,OAAML,eAAe,CAACT,eADA;EAAA,GAGtB,EAHsB,CAAxB;EAOA,IAAIP,qBAAqB,iCAAMK,KAAL;IAAYK,IAAZ,EAAYA,IAAZ;IAAkBC;EAAAA,GAA5C,EAA4D;IAC1D,OAAO,IAAP;EACD;EAED,OACElB,oBAACS,YAAD,CAAcoB,QAAd;IAAuBC,KAAK,EAAEH;EAA9B,GACE3B,oBAACW,YAAD,eAAkBG,eAAlB,EAAuCY,UAAvC;IAAmDV,GAAG,EAAEA;EAAxD,IACGI,QADH,CADF,CADF;AAOD,CAxCD;AA0CA,eAAenB,IAAI,CAACC,UAAU,CAACa,UAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Stack","useFormControlContext","useRadioGroupState","useRadioGroup","useHasResponsiveProps","usePropsResolution","RadioContext","createContext","RadioWrapper","props","resolvedProps","radioGroupProps","RadioGroup","ref","size","colorScheme","_radio","children","formControlContext","state","radioGroupState","accessibilityLabel","useState","propsState","contextValue","useMemo","Provider","value"],"sources":["RadioGroup.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Stack } from '../Stack';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { IRadioContext, IRadioGroupProps } from './types';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const RadioContext = React.createContext<IRadioContext>(\n  {} as IRadioContext\n);\nconst RadioWrapper = memo((props: any) => {\n  const resolvedProps = usePropsResolution('RadioGroup', props);\n  return <Stack {...resolvedProps} {...props.radioGroupProps} {...props} />;\n});\n\nconst RadioGroup = (\n  { size, colorScheme, _radio, children, ...props }: IRadioGroupProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup(\n    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel },\n    state\n  );\n  const [propsState] = React.useState(props);\n  const contextValue: any = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      ..._radio,\n      state,\n    };\n  }, [size, colorScheme, formControlContext, state, _radio]);\n\n  const radioGroupProps = React.useMemo(\n    () => radioGroupState.radioGroupProps,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n\n  return (\n    <RadioContext.Provider value={contextValue}>\n      <RadioWrapper {...radioGroupProps} {...propsState} ref={ref}>\n        {children}\n      </RadioWrapper>\n    </RadioContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(RadioGroup));\n"]},"metadata":{},"sourceType":"module"}