{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { ModalContext } from \"./Context\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar ModalContent = function ModalContent(props, ref) {\n  var resolvedProps = usePropsResolution('ModalContent', props);\n  var _React$useContext = React.useContext(ModalContext),\n    contentSize = _React$useContext.contentSize,\n    initialFocusRef = _React$useContext.initialFocusRef,\n    finalFocusRef = _React$useContext.finalFocusRef,\n    handleClose = _React$useContext.handleClose,\n    visible = _React$useContext.visible;\n  React.useEffect(function () {\n    var finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]);\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, _extends({}, contentSize, resolvedProps, {\n    ref: ref,\n    onAccessibilityEscape: handleClose,\n    \"aria-modal\": \"true\",\n    accessibilityRole: Platform.OS === 'web' ? 'dialog' : undefined,\n    accessibilityViewIsModal: true,\n    _web: {\n      focusable: false\n    }\n  }));\n};\nexport default memo(forwardRef(ModalContent));","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP;AACA,SAASC,kBAAT;AACA,SAASC,YAAT;AAAA;AAEA,SAASC,qBAAT;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAD,EAAmBC,GAAnB,EAAiC;EACpD,IAAMC,aAAa,GAAGN,kBAAkB,CAAC,cAAD,EAAiBI,KAAjB,CAAxC;EACA,wBAMIR,KAAK,CAACW,UAAN,CAAiBN,YAAjB,CANJ;IACEO,WADI,qBACJA,WADI;IAEJC,eAFI,qBAEJA,eAFI;IAGJC,aAHI,qBAGJA,aAHI;IAIJC,WAJI,qBAIJA,WAJI;IAKJC;EAEFhB,KAAK,CAACiB,SAAN,CAAgB,YAAM;IACpB,IAAMC,WAAW,GAAGJ,aAAa,GAAGA,aAAa,CAACK,OAAjB,GAA2B,IAA5D;IACA,IAAIH,OAAJ,EAAa;MACX,IAAIH,eAAe,IAAIA,eAAe,CAACM,OAAvC,EAAgD;QAE9CN,eAAe,CAACM,OAAhB,CAAwBC,KAAxB;MACD;IACF,CALD,MAKO;MACL,IAAIF,WAAJ,EAAiB;QAEfA,WAAW,CAACE,KAAZ;MACD;IACF;EACF,CAbD,EAaG,CAACP,eAAD,EAAkBC,aAAlB,EAAiCE,OAAjC,CAbH;EAgBA,IAAIV,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACER,oBAACG,GAAD,eACMS,WADN,EAEMF,aAFN;IAGED,GAAG,EAAEA,GAHP;IAIEY,qBAAqB,EAAEN,WAJzB;IAME,cAAW,MANb;IAQEO,iBAAiB,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,QAAxB,GAAmCC,SARxD;IASEC,wBAAwB,MAT1B;IAUEC,IAAI,EAAE;MAAEC,SAAS,EAAE;IAAb;EAVR,GADF;AAcD,CA1CD;AA4CA,eAAe3B,IAAI,CAACC,UAAU,CAACK,YAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","ModalContext","useHasResponsiveProps","ModalContent","props","ref","resolvedProps","useContext","contentSize","initialFocusRef","finalFocusRef","handleClose","visible","useEffect","finalRefVal","current","focus","onAccessibilityEscape","accessibilityRole","Platform","OS","undefined","accessibilityViewIsModal","_web","focusable"],"sources":["ModalContent.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport { Platform } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ModalContent = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('ModalContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n    visible,\n  } = React.useContext(ModalContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (visible) {\n      if (initialFocusRef && initialFocusRef.current) {\n        //@ts-ignore\n        initialFocusRef.current.focus();\n      }\n    } else {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    }\n  }, [initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...resolvedProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole={Platform.OS === 'web' ? 'dialog' : undefined}\n      accessibilityViewIsModal\n      _web={{ focusable: false }}\n    />\n  );\n};\n\nexport default memo(forwardRef(ModalContent));\n"]},"metadata":{},"sourceType":"module"}