{"ast":null,"code":"import React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from \"./../theme\";\nimport HybridProvider from \"./hybrid-overlay/HybridProvider\";\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from \"../components/composites/Toast\";\nimport { defaultConfig, NativeBaseConfigProvider } from \"./NativeBaseContext\";\nimport { useToast } from \"../components/composites/Toast\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from \"../theme/tools/utils\";\nimport { ResponsiveQueryProvider } from \"../utils/useResponsiveQuery\";\nvar defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: defaultInitialWindowMetrics\n});\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  var _config$theme, _useWindowDimensions;\n  var colorModeManager = props.colorModeManager,\n    _props$config = props.config,\n    config = _props$config === void 0 ? defaultConfig : _props$config,\n    children = props.children,\n    _props$theme = props.theme,\n    propsTheme = _props$theme === void 0 ? defaultTheme : _props$theme,\n    initialWindowMetrics = props.initialWindowMetrics,\n    isSSR = props.isSSR,\n    disableContrastText = props.disableContrastText;\n  var theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  var newTheme = React.useMemo(function () {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var currentBreakpoint = React.useMemo(function () {\n    return getClosestBreakpoint(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n  return React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, React.createElement(OverlayProvider, null, React.createElement(ToastProvider, null, React.createElement(InitializeToastRef, null), React.createElement(SSRProvider, null, children)))))));\n};\nvar InitializeToastRef = function InitializeToastRef() {\n  var toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\nexport { NativeBaseProvider };","map":{"version":3,"mappings":"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","names":["React","SafeAreaProvider","initialWindowMetrics","defaultInitialWindowMetrics","SSRProvider","theme","defaultTheme","HybridProvider","OverlayProvider","ToastProvider","ToastRef","defaultConfig","NativeBaseConfigProvider","useToast","getClosestBreakpoint","platformSpecificSpaceUnits","ResponsiveQueryProvider","defaultInitialWindowMetricsBasedOnPlatform","Platform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","NativeBaseProvider","props","colorModeManager","config","children","propsTheme","isSSR","disableContrastText","newTheme","useMemo","enableRem","windowWidth","useWindowDimensions","_useWindowDimensions","currentBreakpoint","breakpoints","initialMetrics","disableCSSMediaQueries","options","InitializeToastRef","toast","current"],"sources":["NativeBaseProvider.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  disableContrastText?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n      disableContrastText={disableContrastText}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <ResponsiveQueryProvider disableCSSMediaQueries={!isSSR}>\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </ResponsiveQueryProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]},"metadata":{},"sourceType":"module"}