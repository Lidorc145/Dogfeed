{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Box, VStack, Button, Heading, Text, useToast, HStack, KeyboardAvoidingView } from 'native-base';\nimport { useNavigation, useTheme } from '@react-navigation/native';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { emailSchema } from \"../utils/schemas\";\nimport { FormInput } from \"../components/form-input\";\nimport { useAppSelector } from \"../ducks/useful-hooks\";\nimport { AlertToast } from \"../components/alert-toast\";\nimport { useLazyFetchSignInMethodsQuery, useLazySignOutQuery, useLazySignUpQuery } from \"../services/auth-api\";\nimport { LogoIcon } from \"../components/logo-icon\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var WelcomeScreen = function WelcomeScreen() {\n  var _errors$email;\n  var navigation = useNavigation();\n  var isAnonymous = useAppSelector(function (state) {\n    return state.user.isAnonymous;\n  });\n  var toast = useToast();\n  var iconColor = useTheme().colors.text;\n  var _useForm = useForm({\n      resolver: yupResolver(emailSchema)\n    }),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    errors = _useForm.formState.errors,\n    reset = _useForm.reset;\n  var _useLazyFetchSignInMe = useLazyFetchSignInMethodsQuery(),\n    _useLazyFetchSignInMe2 = _slicedToArray(_useLazyFetchSignInMe, 2),\n    getSignInMethods = _useLazyFetchSignInMe2[0],\n    _useLazyFetchSignInMe3 = _useLazyFetchSignInMe2[1],\n    emailFetching = _useLazyFetchSignInMe3.isFetching,\n    fetchingError = _useLazyFetchSignInMe3.error;\n  var _useLazySignUpQuery = useLazySignUpQuery(),\n    _useLazySignUpQuery2 = _slicedToArray(_useLazySignUpQuery, 2),\n    triggerSignUp = _useLazySignUpQuery2[0],\n    guestFetching = _useLazySignUpQuery2[1].isFetching;\n  var _useLazySignOutQuery = useLazySignOutQuery(),\n    _useLazySignOutQuery2 = _slicedToArray(_useLazySignOutQuery, 1),\n    triggerSignOut = _useLazySignOutQuery2[0];\n  var renderGuestToast = function renderGuestToast() {\n    return _jsx(AlertToast, {\n      title: \"Using Maet as a Guest.\",\n      type: \"primary\",\n      toExit: function toExit() {\n        return toast.close('guestToast');\n      }\n    });\n  };\n  var handleEmail = function _callee(data) {\n    var emailSignInMethods;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getSignInMethods(data.email).unwrap());\n          case 2:\n            emailSignInMethods = _context.sent;\n            navigation.navigate('Login', {\n              signInMethods: emailSignInMethods,\n              email: data.email\n            });\n            reset();\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  var handleAnonymous = function _callee2() {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(triggerSignUp('guest'));\n          case 2:\n            toast.show({\n              placement: 'top',\n              render: renderGuestToast,\n              id: 'guestToast'\n            });\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n  return _jsx(KeyboardAvoidingView, {\n    h: {\n      lg: 'auto'\n    },\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    onTouchStart: function onTouchStart() {\n      return Keyboard.dismiss();\n    },\n    w: \"100%\",\n    children: _jsx(Box, {\n      px: \"10\",\n      w: \"100%\",\n      h: \"100%\",\n      bg: \"background.100\",\n      justifyContent: !isAnonymous ? 'center' : 'flex-start',\n      alignItems: \"center\",\n      safeArea: !isAnonymous ? true : undefined,\n      children: _jsxs(VStack, {\n        space: 3,\n        alignItems: \"center\",\n        w: \"100%\",\n        children: [!isAnonymous ? _jsxs(_Fragment, {\n          children: [_jsx(LogoIcon, {\n            size: 200,\n            color: iconColor\n          }), _jsx(Heading, {\n            textAlign: \"center\",\n            mb: 3,\n            color: \"plainText.900\",\n            children: \"Welcome to the Maet template!\"\n          })]\n        }) : _jsxs(HStack, {\n          pt: 5,\n          space: 5,\n          w: \"100%\",\n          justifyContent: \"center\",\n          children: [_jsx(LogoIcon, {\n            size: 50,\n            color: iconColor\n          }), _jsx(Heading, {\n            textAlign: \"left\",\n            mb: 3,\n            color: \"plainText.900\",\n            children: \"Welcome to the Maet template!\"\n          })]\n        }), _jsx(FormInput, {\n          name: \"email\",\n          control: control,\n          isInvalid: 'email' in errors,\n          label: \"Input your email\",\n          placeholder: \"name@example.com\",\n          defaultValue: \"\",\n          errorMessage: String(errors == null ? void 0 : (_errors$email = errors.email) == null ? void 0 : _errors$email.message)\n        }, \"login-email\"), _jsx(Button, {\n          w: \"100%\",\n          colorScheme: \"primary\",\n          onPress: handleSubmit(handleEmail),\n          isLoading: emailFetching,\n          isLoadingText: \"Submitting\",\n          children: \"Submit\"\n        }, \"Password-Button\"), !isAnonymous ? _jsx(Button, {\n          w: \"100%\",\n          colorScheme: \"primary\",\n          variant: \"link\",\n          onPress: handleAnonymous,\n          isLoading: guestFetching,\n          isLoadingText: \"Continuing\",\n          children: \"Continue as guest\"\n        }) : null, _jsx(Text, {\n          color: \"danger.600\",\n          children: fetchingError == null ? void 0 : fetchingError.message\n        }), isAnonymous ? _jsx(Button, {\n          w: \"100%\",\n          colorScheme: \"primary\",\n          variant: \"link\",\n          onPress: function onPress() {\n            return triggerSignOut(undefined);\n          },\n          isLoading: guestFetching,\n          isLoadingText: \"Continuing\",\n          children: \"Logout of Guest\"\n        }) : null]\n      })\n    })\n  });\n};","map":{"version":3,"names":["React","Box","VStack","Button","Heading","Text","useToast","HStack","KeyboardAvoidingView","useNavigation","useTheme","useForm","yupResolver","emailSchema","FormInput","useAppSelector","AlertToast","useLazyFetchSignInMethodsQuery","useLazySignOutQuery","useLazySignUpQuery","LogoIcon","WelcomeScreen","navigation","isAnonymous","state","user","toast","iconColor","colors","text","resolver","control","handleSubmit","errors","formState","reset","getSignInMethods","emailFetching","isFetching","fetchingError","error","triggerSignUp","guestFetching","triggerSignOut","renderGuestToast","close","handleEmail","data","email","unwrap","emailSignInMethods","navigate","signInMethods","handleAnonymous","show","placement","render","id","lg","Platform","OS","Keyboard","dismiss","undefined","String","message"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/screens/welcome.tsx"],"sourcesContent":["import React from 'react';\nimport { Keyboard, Platform } from 'react-native';\nimport {\n    Box,\n    VStack,\n    Button,\n    Heading,\n    Text,\n    useToast,\n    HStack,\n    KeyboardAvoidingView,\n} from 'native-base';\nimport { useNavigation, useTheme } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { emailSchema } from 'src/utils/schemas';\nimport { FormInput } from 'src/components/form-input';\nimport { useAppSelector } from 'src/ducks/useful-hooks';\nimport { AuthStackParams } from 'src/navigation/auth-stack';\nimport { AlertToast } from 'src/components/alert-toast';\nimport {\n    useLazyFetchSignInMethodsQuery,\n    useLazySignOutQuery,\n    useLazySignUpQuery,\n} from 'src/services/auth-api';\nimport { LogoIcon } from 'src/components/logo-icon';\n\n// define navigation props\ntype WelcomeScreenParams = StackNavigationProp<AuthStackParams, 'Welcome'>;\n\nexport /**\n * Welcome Screen, used either signing into Maet or making an account\n *\n * @return {*}\n */\nconst WelcomeScreen: React.FC<{}> = () => {\n    // hooks\n    const navigation = useNavigation<WelcomeScreenParams>();\n    const isAnonymous = useAppSelector((state) => state.user.isAnonymous);\n    const toast = useToast();\n    const iconColor = useTheme().colors.text;\n\n    // form schema hooks\n    const {\n        control,\n        handleSubmit,\n        formState: { errors },\n        reset,\n    } = useForm({\n        resolver: yupResolver(emailSchema),\n    });\n\n    // redux query hooks\n    const [getSignInMethods, { isFetching: emailFetching, error: fetchingError }] =\n        useLazyFetchSignInMethodsQuery();\n    const [triggerSignUp, { isFetching: guestFetching }] = useLazySignUpQuery();\n    const [triggerSignOut] = useLazySignOutQuery();\n\n    // toast component for guest\n    const renderGuestToast = () => (\n        <AlertToast\n            title=\"Using Maet as a Guest.\"\n            type=\"primary\"\n            toExit={() => toast.close('guestToast')}\n        />\n    );\n\n    // handling button presses\n    const handleEmail = async (data: any) => {\n        // updating variables within function, since they need to be sent to new screen\n        const emailSignInMethods = await getSignInMethods(data.email).unwrap();\n        navigation.navigate('Login', {\n            signInMethods: emailSignInMethods,\n            email: data.email,\n        });\n        reset();\n    };\n\n    const handleAnonymous = async () => {\n        await triggerSignUp('guest');\n        toast.show({\n            placement: 'top',\n            render: renderGuestToast,\n            id: 'guestToast',\n        });\n    };\n\n    return (\n        <KeyboardAvoidingView\n            h={{\n                lg: 'auto',\n            }}\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            onTouchStart={() => Keyboard.dismiss()}\n            w=\"100%\">\n            <Box\n                px=\"10\"\n                w=\"100%\"\n                h=\"100%\"\n                bg=\"background.100\"\n                justifyContent={!isAnonymous ? 'center' : 'flex-start'}\n                alignItems=\"center\"\n                safeArea={!isAnonymous ? true : undefined}>\n                <VStack space={3} alignItems=\"center\" w=\"100%\">\n                    {!isAnonymous ? (\n                        <>\n                            <LogoIcon size={200} color={iconColor} />\n                            <Heading textAlign=\"center\" mb={3} color=\"plainText.900\">\n                                Welcome to the Maet template!\n                            </Heading>\n                        </>\n                    ) : (\n                        <HStack pt={5} space={5} w=\"100%\" justifyContent=\"center\">\n                            <LogoIcon size={50} color={iconColor} />\n                            <Heading textAlign=\"left\" mb={3} color=\"plainText.900\">\n                                Welcome to the Maet template!\n                            </Heading>\n                        </HStack>\n                    )}\n                    <FormInput\n                        key=\"login-email\"\n                        name=\"email\"\n                        control={control}\n                        isInvalid={'email' in errors}\n                        label=\"Input your email\"\n                        placeholder=\"name@example.com\"\n                        defaultValue=\"\"\n                        errorMessage={String(errors?.email?.message)}\n                    />\n                    {/* <Button mt=\"3\" colorScheme=\"primary\" w=\"100%\" >\n                        Send me a sign-in link\n                    </Button> */}\n                    <Button\n                        key=\"Password-Button\"\n                        w=\"100%\"\n                        colorScheme=\"primary\"\n                        onPress={handleSubmit(handleEmail)}\n                        isLoading={emailFetching}\n                        isLoadingText=\"Submitting\">\n                        Submit\n                    </Button>\n                    {!isAnonymous ? (\n                        <Button\n                            w=\"100%\"\n                            colorScheme=\"primary\"\n                            variant=\"link\"\n                            onPress={handleAnonymous}\n                            isLoading={guestFetching}\n                            isLoadingText=\"Continuing\">\n                            Continue as guest\n                        </Button>\n                    ) : null}\n                    <Text color=\"danger.600\">{fetchingError?.message}</Text>\n                    {isAnonymous ? (\n                        <Button\n                            w=\"100%\"\n                            colorScheme=\"primary\"\n                            variant=\"link\"\n                            onPress={() => triggerSignOut(undefined)}\n                            isLoading={guestFetching}\n                            isLoadingText=\"Continuing\">\n                            Logout of Guest\n                        </Button>\n                    ) : null}\n                </VStack>\n            </Box>\n        </KeyboardAvoidingView>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}