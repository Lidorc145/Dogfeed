{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { auth, storage } from \"./config\";\nimport { updatePrivateUserData } from \"./user-api\";\nexport var uploadUserImage = function _callee2(uri) {\n  var _auth$currentUser;\n  var userID, img, blobFile, storageRef, uploadImage;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          userID = (_auth$currentUser = auth.currentUser) == null ? void 0 : _auth$currentUser.uid;\n          if (!(userID != null && userID.length)) {\n            _context2.next = 11;\n            break;\n          }\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(fetch(uri));\n        case 4:\n          img = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(img.blob());\n        case 7:\n          blobFile = _context2.sent;\n          storageRef = ref(storage, \"user-profile-img/\" + userID);\n          uploadImage = uploadBytesResumable(storageRef, blobFile);\n          uploadImage.on('state_changed', function () {}, function (err) {\n            return console.warn(err);\n          }, function () {\n            return getDownloadURL(uploadImage.snapshot.ref).then(function _callee(url) {\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return _regeneratorRuntime.awrap(updatePrivateUserData({\n                        id: userID,\n                        image: url\n                      }));\n                    case 2:\n                      return _context.abrupt(\"return\", url);\n                    case 3:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            });\n          });\n        case 11:\n          return _context2.abrupt(\"return\", uri);\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["getDownloadURL","ref","uploadBytesResumable","auth","storage","updatePrivateUserData","uploadUserImage","uri","userID","currentUser","uid","length","fetch","img","blob","blobFile","storageRef","uploadImage","on","err","console","warn","snapshot","then","url","id","image"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/firebase/storage-api.ts"],"sourcesContent":["import { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { auth, storage } from 'src/firebase/config';\nimport { updatePrivateUserData } from 'src/firebase/user-api';\n\nexport /**\n * Uploads file to firebase storage\n * Resource: https://stackoverflow.com/questions/72411525/firebase-storage-image-upload-function-to-return-the-image-url-after-uploading\n * @param {string} file\n * @param {string} userID\n * @return {*}  {Promise<void>}\n */\nconst uploadUserImage = async (uri: string): Promise<string> => {\n    const userID = auth.currentUser?.uid;\n    if (userID?.length) {\n        const img = await fetch(uri);\n        const blobFile = await img.blob();\n        const storageRef = ref(storage, `user-profile-img/${userID}`);\n        const uploadImage = uploadBytesResumable(storageRef, blobFile);\n        // await uploadBytesResumable(storageRef, blobFile);\n        // const url = await getDownloadURL(storageRef);\n        // console.log(url);\n        // await updatePrivateUserData({\n        //     id: userID,\n        //     image: url,\n        // });\n        // return url;\n        uploadImage.on(\n            'state_changed',\n            () => {},\n            (err) => console.warn(err),\n            () => {\n                return getDownloadURL(uploadImage.snapshot.ref).then(async (url) => {\n                    await updatePrivateUserData({\n                        id: userID,\n                        image: url,\n                    });\n                    return url;\n                });\n            },\n        );\n    }\n    return uri;\n};\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,GAAG,EAAEC,oBAAoB,QAAQ,kBAAkB;AAC5E,SAASC,IAAI,EAAEC,OAAO;AACtB,SAASC,qBAAqB;AAE9B,OAOA,IAAMC,eAAe,GAAG,kBAAOC,GAAW;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAChCC,MAAM,wBAAGL,IAAI,CAACM,WAAW,qBAAhB,kBAAkBC,GAAG;UAAA,MAChCF,MAAM,YAANA,MAAM,CAAEG,MAAM;YAAA;YAAA;UAAA;UAAA;UAAA,iCACIC,KAAK,CAACL,GAAG,CAAC;QAAA;UAAtBM,GAAG;UAAA;UAAA,iCACcA,GAAG,CAACC,IAAI,EAAE;QAAA;UAA3BC,QAAQ;UACRC,UAAU,GAAGf,GAAG,CAACG,OAAO,wBAAsBI,MAAM,CAAG;UACvDS,WAAW,GAAGf,oBAAoB,CAACc,UAAU,EAAED,QAAQ,CAAC;UAS9DE,WAAW,CAACC,EAAE,CACV,eAAe,EACf,YAAM,CAAC,CAAC,EACR,UAACC,GAAG;YAAA,OAAKC,OAAO,CAACC,IAAI,CAACF,GAAG,CAAC;UAAA,GAC1B,YAAM;YACF,OAAOnB,cAAc,CAACiB,WAAW,CAACK,QAAQ,CAACrB,GAAG,CAAC,CAACsB,IAAI,CAAC,iBAAOC,GAAG;cAAA;gBAAA;kBAAA;oBAAA;sBAAA;sBAAA,iCACrDnB,qBAAqB,CAAC;wBACxBoB,EAAE,EAAEjB,MAAM;wBACVkB,KAAK,EAAEF;sBACX,CAAC,CAAC;oBAAA;sBAAA,iCACKA,GAAG;oBAAA;oBAAA;sBAAA;kBAAA;gBAAA;cAAA;YAAA,CACb,CAAC;UACN,CAAC,CACJ;QAAC;UAAA,kCAECjB,GAAG;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CACb"},"metadata":{},"sourceType":"module"}