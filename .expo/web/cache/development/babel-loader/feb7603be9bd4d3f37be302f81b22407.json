{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TabBarIcon from \"./TabBarIcon\";\nexport default function BottomTabBarItem(_ref) {\n  var focused = _ref.focused,\n    route = _ref.route,\n    descriptor = _ref.descriptor,\n    label = _ref.label,\n    icon = _ref.icon,\n    badge = _ref.badge,\n    badgeStyle = _ref.badgeStyle,\n    to = _ref.to,\n    _ref$button = _ref.button,\n    button = _ref$button === void 0 ? function (_ref2) {\n      var children = _ref2.children,\n        style = _ref2.style,\n        _onPress = _ref2.onPress,\n        to = _ref2.to,\n        accessibilityRole = _ref2.accessibilityRole,\n        rest = _objectWithoutProperties(_ref2, _excluded);\n      if (Platform.OS === 'web' && to) {\n        return React.createElement(Link, _extends({}, rest, {\n          to: to,\n          style: [styles.button, style],\n          onPress: function onPress(e) {\n            if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n              e.preventDefault();\n              _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n            }\n          }\n        }), children);\n      } else {\n        return React.createElement(Pressable, _extends({}, rest, {\n          accessibilityRole: accessibilityRole,\n          onPress: _onPress,\n          style: style\n        }), children);\n      }\n    } : _ref$button,\n    accessibilityLabel = _ref.accessibilityLabel,\n    testID = _ref.testID,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    horizontal = _ref.horizontal,\n    customActiveTintColor = _ref.activeTintColor,\n    customInactiveTintColor = _ref.inactiveTintColor,\n    _ref$activeBackground = _ref.activeBackgroundColor,\n    activeBackgroundColor = _ref$activeBackground === void 0 ? 'transparent' : _ref$activeBackground,\n    _ref$inactiveBackgrou = _ref.inactiveBackgroundColor,\n    inactiveBackgroundColor = _ref$inactiveBackgrou === void 0 ? 'transparent' : _ref$inactiveBackgrou,\n    _ref$showLabel = _ref.showLabel,\n    showLabel = _ref$showLabel === void 0 ? true : _ref$showLabel,\n    allowFontScaling = _ref.allowFontScaling,\n    labelStyle = _ref.labelStyle,\n    iconStyle = _ref.iconStyle,\n    style = _ref.style;\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var activeTintColor = customActiveTintColor === undefined ? colors.primary : customActiveTintColor;\n  var inactiveTintColor = customInactiveTintColor === undefined ? Color(colors.text).mix(Color(colors.card), 0.5).hex() : customInactiveTintColor;\n  var renderLabel = function renderLabel(_ref3) {\n    var focused = _ref3.focused;\n    if (showLabel === false) {\n      return null;\n    }\n    var color = focused ? activeTintColor : inactiveTintColor;\n    if (typeof label === 'string') {\n      return React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, {\n          color: color\n        }, horizontal ? styles.labelBeside : styles.labelBeneath, labelStyle],\n        allowFontScaling: allowFontScaling\n      }, label);\n    }\n    var options = descriptor.options;\n    var children = typeof options.tabBarLabel === 'string' ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    return label({\n      focused: focused,\n      color: color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n      children: children\n    });\n  };\n  var renderIcon = function renderIcon(_ref4) {\n    var focused = _ref4.focused;\n    if (icon === undefined) {\n      return null;\n    }\n    var activeOpacity = focused ? 1 : 0;\n    var inactiveOpacity = focused ? 0 : 1;\n    return React.createElement(TabBarIcon, {\n      route: route,\n      horizontal: horizontal,\n      badge: badge,\n      badgeStyle: badgeStyle,\n      activeOpacity: activeOpacity,\n      inactiveOpacity: inactiveOpacity,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      renderIcon: icon,\n      style: iconStyle\n    });\n  };\n  var scene = {\n    route: route,\n    focused: focused\n  };\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  return button({\n    to: to,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: Platform.select({\n      ios: 'button',\n      default: 'tab'\n    }),\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [styles.tab, {\n      backgroundColor: backgroundColor\n    }, horizontal ? styles.tabLandscape : styles.tabPortrait, style],\n    children: React.createElement(React.Fragment, null, renderIcon(scene), renderLabel(scene))\n  });\n}\nvar styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  },\n  labelBeneath: {\n    fontSize: 10\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"mappings":"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","names":["Link","useTheme","Color","React","TabBarIcon","BottomTabBarItem","focused","_ref","route","descriptor","label","icon","badge","badgeStyle","to","button","children","_ref2","style","onPress","accessibilityRole","rest","Platform","OS","styles","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","Pressable","accessibilityLabel","testID","onLongPress","horizontal","customActiveTintColor","activeTintColor","customInactiveTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","allowFontScaling","labelStyle","iconStyle","colors","undefined","primary","text","mix","card","hex","renderLabel","_ref3","color","Text","numberOfLines","labelBeside","labelBeneath","options","tabBarLabel","title","name","position","renderIcon","_ref4","activeOpacity","inactiveOpacity","scene","backgroundColor","select","ios","default","accessibilityState","selected","accessibilityStates","tab","tabLandscape","tabPortrait","Fragment","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","textAlign","fontSize","marginLeft","marginTop","display"],"sources":["BottomTabItem.tsx"],"sourcesContent":["import { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport React from 'react';\nimport {\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport type {\n  BottomTabBarButtonProps,\n  BottomTabDescriptor,\n  LabelPosition,\n} from '../types';\nimport TabBarIcon from './TabBarIcon';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The descriptor object for the route.\n   */\n  descriptor: BottomTabDescriptor;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n        children: string;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  descriptor,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <Pressable\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n          style={style}\n        >\n          {children}\n        </Pressable>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    const { options } = descriptor;\n    const children =\n      typeof options.tabBarLabel === 'string'\n        ? options.tabBarLabel\n        : options.title !== undefined\n        ? options.title\n        : route.name;\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n      children,\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    // FIXME: accessibilityRole: 'tab' doesn't seem to work as expected on iOS\n    accessibilityRole: Platform.select({ ios: 'button', default: 'tab' }),\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}