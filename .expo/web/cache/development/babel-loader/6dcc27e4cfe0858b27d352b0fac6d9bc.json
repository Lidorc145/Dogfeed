{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { deleteDoc, doc, getDoc, getDocs, limit, orderBy, query, setDoc, startAfter } from 'firebase/firestore';\nimport { privateUserCollection, publicUserCollection } from \"./config\";\nimport { firebaseHandler, firestoreGetHandler } from \"./handler\";\nexport function updatePrivateUserData(userData, newUser) {\n  var userRef;\n  return _regeneratorRuntime.async(function updatePrivateUserData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          userRef = doc(privateUserCollection, userData.id);\n          return _context.abrupt(\"return\", firebaseHandler(setDoc(userRef, userData, {\n            merge: !newUser\n          })));\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPrivateUserData(userID) {\n  var userRef;\n  return _regeneratorRuntime.async(function getPrivateUserData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          userRef = doc(privateUserCollection, userID);\n          return _context2.abrupt(\"return\", firestoreGetHandler(getDoc(userRef)));\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deletePrivateUserData(userID) {\n  var userRef;\n  return _regeneratorRuntime.async(function deletePrivateUserData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          userRef = doc(privateUserCollection, userID);\n          return _context3.abrupt(\"return\", firebaseHandler(deleteDoc(userRef)));\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUsers() {\n  var begID,\n    lim,\n    direction,\n    q,\n    lastVisible,\n    _args4 = arguments;\n  return _regeneratorRuntime.async(function getUsers$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          begID = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : undefined;\n          lim = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 10;\n          direction = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : 'desc';\n          if (!begID) {\n            _context4.next = 9;\n            break;\n          }\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(getDoc(doc(publicUserCollection, begID)));\n        case 6:\n          _context4.t0 = _context4.sent;\n          _context4.next = 10;\n          break;\n        case 9:\n          _context4.t0 = undefined;\n        case 10:\n          lastVisible = _context4.t0;\n          if (lastVisible != null && lastVisible.exists()) {\n            q = query(publicUserCollection, orderBy('count', direction), startAfter(lastVisible), limit(lim));\n          } else {\n            q = query(publicUserCollection, orderBy('count', direction), limit(lim));\n          }\n          return _context4.abrupt(\"return\", getDocs(q));\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["deleteDoc","doc","getDoc","getDocs","limit","orderBy","query","setDoc","startAfter","privateUserCollection","publicUserCollection","firebaseHandler","firestoreGetHandler","updatePrivateUserData","userData","newUser","userRef","id","merge","getPrivateUserData","userID","deletePrivateUserData","getUsers","begID","undefined","lim","direction","lastVisible","exists","q"],"sources":["C:/Users/LidorCohen/Desktop/Dogfeel/src/firebase/user-api.ts"],"sourcesContent":["import {\n    deleteDoc,\n    doc,\n    getDoc,\n    getDocs,\n    limit,\n    orderBy,\n    OrderByDirection,\n    query,\n    QueryDocumentSnapshot,\n    QuerySnapshot,\n    setDoc,\n    startAfter,\n} from 'firebase/firestore';\nimport { privateUserCollection, publicUserCollection } from 'src/firebase/config';\nimport { firebaseHandler, firestoreGetHandler } from 'src/firebase/handler';\nimport { PrivateUserData, PublicUserData } from 'src/types';\n\n/**\n * Function will update the user with the input fields, will overwrite if newUser set to True\n *\n * @export\n * @param {PrivateUserData} userData\n * @param {boolean} [newUser]\n * @return {*}  {Promise<void>}\n */\nexport async function updatePrivateUserData(\n    userData: { id: string } & Partial<PrivateUserData>,\n    newUser?: boolean,\n): Promise<void> {\n    const userRef = doc(privateUserCollection, userData.id);\n    return firebaseHandler<void>(setDoc(userRef, userData, { merge: !newUser }));\n}\n\n/**\n * Function will get the private user data\n *\n * @export\n * @param {string} userID\n * @return {*}  {Promise<QueryDocumentSnapshot<PrivateUserData>>}\n */\nexport async function getPrivateUserData(\n    userID: string,\n): Promise<QueryDocumentSnapshot<PrivateUserData>> {\n    const userRef = doc(privateUserCollection, userID);\n    return firestoreGetHandler<PrivateUserData>(getDoc(userRef));\n}\n\n/**\n * Function will delete the private user data\n *\n * @remarks\n * Firebase functions will automatically delete the public facing data\n *\n * @export\n * @param {string} userID\n * @return {*}  {Promise<void>}\n */\nexport async function deletePrivateUserData(userID: string): Promise<void> {\n    const userRef = doc(privateUserCollection, userID);\n    return firebaseHandler<void>(deleteDoc(userRef));\n}\n\n/**\n * Will fetch the users from the public user data\n *\n * @export\n * @param {(string | undefined)} [begID=undefined] - the beginning id of the last document\n * @param {number} [lim=10] - limit of documents to fetch\n * @param {OrderByDirection} [direction='desc'] - which direction to order the documents by\n * @return {*}  {Promise<QuerySnapshot<PublicUserData>>}\n */\nexport async function getUsers(\n    begID: string | undefined = undefined,\n    lim: number = 10,\n    direction: OrderByDirection = 'desc',\n): Promise<QuerySnapshot<PublicUserData>> {\n    let q;\n    const lastVisible = begID ? await getDoc(doc(publicUserCollection, begID)) : undefined;\n\n    if (lastVisible?.exists()) {\n        q = query(\n            publicUserCollection,\n            orderBy('count', direction),\n            startAfter(lastVisible),\n            limit(lim),\n        );\n    } else {\n        q = query(publicUserCollection, orderBy('count', direction), limit(lim));\n    }\n    return getDocs(q);\n}\n"],"mappings":";AAAA,SACIA,SAAS,EACTC,GAAG,EACHC,MAAM,EACNC,OAAO,EACPC,KAAK,EACLC,OAAO,EAEPC,KAAK,EAGLC,MAAM,EACNC,UAAU,QACP,oBAAoB;AAC3B,SAASC,qBAAqB,EAAEC,oBAAoB;AACpD,SAASC,eAAe,EAAEC,mBAAmB;AAW7C,OAAO,SAAeC,qBAAqB,CACvCC,QAAmD,EACnDC,OAAiB;EAAA;EAAA;IAAA;MAAA;QAAA;UAEXC,OAAO,GAAGf,GAAG,CAACQ,qBAAqB,EAAEK,QAAQ,CAACG,EAAE,CAAC;UAAA,iCAChDN,eAAe,CAAOJ,MAAM,CAACS,OAAO,EAAEF,QAAQ,EAAE;YAAEI,KAAK,EAAE,CAACH;UAAQ,CAAC,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAUhF,OAAO,SAAeI,kBAAkB,CACpCC,MAAc;EAAA;EAAA;IAAA;MAAA;QAAA;UAERJ,OAAO,GAAGf,GAAG,CAACQ,qBAAqB,EAAEW,MAAM,CAAC;UAAA,kCAC3CR,mBAAmB,CAAkBV,MAAM,CAACc,OAAO,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAahE,OAAO,SAAeK,qBAAqB,CAACD,MAAc;EAAA;EAAA;IAAA;MAAA;QAAA;UAChDJ,OAAO,GAAGf,GAAG,CAACQ,qBAAqB,EAAEW,MAAM,CAAC;UAAA,kCAC3CT,eAAe,CAAOX,SAAS,CAACgB,OAAO,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAYpD,OAAO,SAAeM,QAAQ;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;IAAA;MAAA;QAAA;UAC1BC,KAAyB,8DAAGC,SAAS;UACrCC,GAAW,8DAAG,EAAE;UAChBC,SAA2B,8DAAG,MAAM;UAAA,KAGhBH,KAAK;YAAA;YAAA;UAAA;UAAA;UAAA,iCAASrB,MAAM,CAACD,GAAG,CAACS,oBAAoB,EAAEa,KAAK,CAAC,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA;UAAA,eAAGC,SAAS;QAAA;UAAhFG,WAAW;UAEjB,IAAIA,WAAW,YAAXA,WAAW,CAAEC,MAAM,EAAE,EAAE;YACvBC,CAAC,GAAGvB,KAAK,CACLI,oBAAoB,EACpBL,OAAO,CAAC,OAAO,EAAEqB,SAAS,CAAC,EAC3BlB,UAAU,CAACmB,WAAW,CAAC,EACvBvB,KAAK,CAACqB,GAAG,CAAC,CACb;UACL,CAAC,MAAM;YACHI,CAAC,GAAGvB,KAAK,CAACI,oBAAoB,EAAEL,OAAO,CAAC,OAAO,EAAEqB,SAAS,CAAC,EAAEtB,KAAK,CAACqB,GAAG,CAAC,CAAC;UAC5E;UAAC,kCACMtB,OAAO,CAAC0B,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}