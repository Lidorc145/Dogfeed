{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isDisabled\", \"label\", \"value\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Actionsheet } from \"../../composites/Actionsheet\";\nimport { SelectContext } from \"./Select\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var Item = function Item(_ref, ref) {\n  var isDisabled = _ref.isDisabled,\n    label = _ref.label,\n    value = _ref.value,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useContext = React.useContext(SelectContext),\n    onValueChange = _React$useContext.onValueChange,\n    selectedValue = _React$useContext.selectedValue,\n    _selectedItem = _React$useContext._selectedItem,\n    _item = _React$useContext._item;\n  if (useHasResponsiveProps(_objectSpread(_objectSpread({}, props), {}, {\n    isDisabled: isDisabled,\n    label: label,\n    value: value\n  }))) {\n    return null;\n  }\n  if (Platform.OS !== 'web') {\n    var isSelected = selectedValue === value;\n    return React.createElement(Actionsheet.Item, _extends({\n      ref: ref,\n      onPress: function onPress() {\n        if (!isDisabled) {\n          onValueChange(value);\n        }\n      },\n      accessibilityState: {\n        selected: isSelected\n      }\n    }, _item, isSelected && _selectedItem, props), label);\n  } else {\n    return React.createElement(\"option\", {\n      ref: ref,\n      value: value,\n      disabled: isDisabled\n    }, label);\n  }\n};\nexport default memo(forwardRef(Item));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AAAA;AAGA,SAASC,WAAT;AACA,SAASC,aAAT;AACA,SAASC,qBAAT;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAI,OAEfC,GAFkB,EAGf;EAAA,IAFDC,UAAF,QAAEA,UAAF;IAAcC,KAAd,QAAcA,KAAd;IAAqBC,KAArB,QAAqBA,KAArB;IAA+BC;EAG/B,wBAKIX,KAAK,CAACY,UAAN,CAAiBR,aAAjB,CALJ;IACES,aADI,qBACJA,aADI;IAEJC,aAFI,qBAEJA,aAFI;IAGJC,aAHI,qBAGJA,aAHI;IAIJC;EAGF,IAAIX,qBAAqB,iCAAMM,KAAL;IAAYH,UAAZ,EAAYA,UAAZ;IAAwBC,KAAxB,EAAwBA,KAAxB;IAA+BC;EAAAA,GAAzD,EAAmE;IACjE,OAAO,IAAP;EACD;EACD,IAAIO,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;IACzB,IAAMC,UAAU,GAAGL,aAAa,KAAKJ,KAArC;IAEA,OACEV,oBAACG,WAAD,CAAaG,IAAb;MACEC,GAAG,EAAEA,GADP;MAEEa,OAAO,EAAE,mBAAM;QACb,IAAI,CAACZ,UAAL,EAAiB;UACfK,aAAa,CAACH,KAAD,CAAb;QACD;MACF,CANH;MAOEW,kBAAkB,EAAE;QAAEC,QAAQ,EAAEH;MAAZ;IAPtB,GAQMH,KARN,EASOG,UAAU,IAAIJ,aATrB,EAUMJ,KAVN,GAYGF,KAZH,CADF;EAgBD,CAnBD,MAmBO;IACL,OACET;MAAQO,GAAG,EAAEA,GAAb;MAAkBG,KAAK,EAAEA,KAAzB;MAAgCa,QAAQ,EAAEf;IAA1C,GACGC,KADH,CADF;EAKD;AACF,CAxCM;AA0CP,eAAeP,IAAI,CAACD,UAAU,CAACK,IAAD,CAAX,CAAnB","names":["React","forwardRef","memo","Actionsheet","SelectContext","useHasResponsiveProps","Item","ref","isDisabled","label","value","props","useContext","onValueChange","selectedValue","_selectedItem","_item","Platform","OS","isSelected","onPress","accessibilityState","selected","disabled"],"sources":["SelectItem.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectItemProps } from './types';\nimport { Platform } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport { SelectContext } from './Select';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Item = (\n  { isDisabled, label, value, ...props }: ISelectItemProps,\n  ref?: any\n) => {\n  const {\n    onValueChange,\n    selectedValue,\n    _selectedItem,\n    _item,\n  } = React.useContext(SelectContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, isDisabled, label, value })) {\n    return null;\n  }\n  if (Platform.OS !== 'web') {\n    const isSelected = selectedValue === value;\n\n    return (\n      <Actionsheet.Item\n        ref={ref}\n        onPress={() => {\n          if (!isDisabled) {\n            onValueChange(value);\n          }\n        }}\n        accessibilityState={{ selected: isSelected }}\n        {..._item}\n        {...(isSelected && _selectedItem)}\n        {...props}\n      >\n        {label}\n      </Actionsheet.Item>\n    );\n  } else {\n    return (\n      <option ref={ref} value={value} disabled={isDisabled}>\n        {label}\n      </option>\n    );\n  }\n};\n\nexport default memo(forwardRef(Item));\n"]},"metadata":{},"sourceType":"module"}